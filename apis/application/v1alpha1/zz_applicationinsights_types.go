/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApplicationInsightsObservation struct {
	AppId string `json:"appId" tf:"app_id"`

	ConnectionString string `json:"connectionString" tf:"connection_string"`

	InstrumentationKey string `json:"instrumentationKey" tf:"instrumentation_key"`
}

type ApplicationInsightsParameters struct {
	ApplicationType string `json:"applicationType" tf:"application_type"`

	DailyDataCapInGb *float64 `json:"dailyDataCapInGb,omitempty" tf:"daily_data_cap_in_gb"`

	DailyDataCapNotificationsDisabled *bool `json:"dailyDataCapNotificationsDisabled,omitempty" tf:"daily_data_cap_notifications_disabled"`

	DisableIpMasking *bool `json:"disableIpMasking,omitempty" tf:"disable_ip_masking"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RetentionInDays *int64 `json:"retentionInDays,omitempty" tf:"retention_in_days"`

	SamplingPercentage *float64 `json:"samplingPercentage,omitempty" tf:"sampling_percentage"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	WorkspaceId *string `json:"workspaceId,omitempty" tf:"workspace_id"`
}

// ApplicationInsightsSpec defines the desired state of ApplicationInsights
type ApplicationInsightsSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApplicationInsightsParameters `json:"forProvider"`
}

// ApplicationInsightsStatus defines the observed state of ApplicationInsights.
type ApplicationInsightsStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApplicationInsightsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationInsights is the Schema for the ApplicationInsightss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApplicationInsights struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationInsightsSpec   `json:"spec"`
	Status            ApplicationInsightsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationInsightsList contains a list of ApplicationInsightss
type ApplicationInsightsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationInsights `json:"items"`
}

// Repository type metadata.
var (
	ApplicationInsightsKind             = "ApplicationInsights"
	ApplicationInsightsGroupKind        = schema.GroupKind{Group: Group, Kind: ApplicationInsightsKind}.String()
	ApplicationInsightsKindAPIVersion   = ApplicationInsightsKind + "." + GroupVersion.String()
	ApplicationInsightsGroupVersionKind = GroupVersion.WithKind(ApplicationInsightsKind)
)

func init() {
	SchemeBuilder.Register(&ApplicationInsights{}, &ApplicationInsightsList{})
}
