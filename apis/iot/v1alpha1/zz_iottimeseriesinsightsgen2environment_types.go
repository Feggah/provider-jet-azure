/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IotTimeSeriesInsightsGen2EnvironmentObservation struct {
	DataAccessFqdn *string `json:"dataAccessFqdn,omitempty" tf:"data_access_fqdn,omitempty"`
}

type IotTimeSeriesInsightsGen2EnvironmentParameters struct {

	// +kubebuilder:validation:Required
	IDProperties []*string `json:"idProperties" tf:"id_properties,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SkuName *string `json:"skuName" tf:"sku_name,omitempty"`

	// +kubebuilder:validation:Required
	Storage []StorageParameters `json:"storage" tf:"storage,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	WarmStoreDataRetentionTime *string `json:"warmStoreDataRetentionTime,omitempty" tf:"warm_store_data_retention_time,omitempty"`
}

type StorageObservation struct {
}

type StorageParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// IotTimeSeriesInsightsGen2EnvironmentSpec defines the desired state of IotTimeSeriesInsightsGen2Environment
type IotTimeSeriesInsightsGen2EnvironmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IotTimeSeriesInsightsGen2EnvironmentParameters `json:"forProvider"`
}

// IotTimeSeriesInsightsGen2EnvironmentStatus defines the observed state of IotTimeSeriesInsightsGen2Environment.
type IotTimeSeriesInsightsGen2EnvironmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IotTimeSeriesInsightsGen2EnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IotTimeSeriesInsightsGen2Environment is the Schema for the IotTimeSeriesInsightsGen2Environments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type IotTimeSeriesInsightsGen2Environment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IotTimeSeriesInsightsGen2EnvironmentSpec   `json:"spec"`
	Status            IotTimeSeriesInsightsGen2EnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IotTimeSeriesInsightsGen2EnvironmentList contains a list of IotTimeSeriesInsightsGen2Environments
type IotTimeSeriesInsightsGen2EnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IotTimeSeriesInsightsGen2Environment `json:"items"`
}

// Repository type metadata.
var (
	IotTimeSeriesInsightsGen2EnvironmentKind             = "IotTimeSeriesInsightsGen2Environment"
	IotTimeSeriesInsightsGen2EnvironmentGroupKind        = schema.GroupKind{Group: Group, Kind: IotTimeSeriesInsightsGen2EnvironmentKind}.String()
	IotTimeSeriesInsightsGen2EnvironmentKindAPIVersion   = IotTimeSeriesInsightsGen2EnvironmentKind + "." + GroupVersion.String()
	IotTimeSeriesInsightsGen2EnvironmentGroupVersionKind = GroupVersion.WithKind(IotTimeSeriesInsightsGen2EnvironmentKind)
)

func init() {
	SchemeBuilder.Register(&IotTimeSeriesInsightsGen2Environment{}, &IotTimeSeriesInsightsGen2EnvironmentList{})
}
