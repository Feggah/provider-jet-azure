/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type EventgridTopicInboundIPRuleObservation struct {
}

type EventgridTopicInboundIPRuleParameters struct {
	Action *string `json:"action,omitempty" tf:"action"`

	IPMask string `json:"ipMask" tf:"ip_mask"`
}

type EventgridTopicInputMappingDefaultValuesObservation struct {
}

type EventgridTopicInputMappingDefaultValuesParameters struct {
	DataVersion *string `json:"dataVersion,omitempty" tf:"data_version"`

	EventType *string `json:"eventType,omitempty" tf:"event_type"`

	Subject *string `json:"subject,omitempty" tf:"subject"`
}

type EventgridTopicInputMappingFieldsObservation struct {
}

type EventgridTopicInputMappingFieldsParameters struct {
	DataVersion *string `json:"dataVersion,omitempty" tf:"data_version"`

	EventTime *string `json:"eventTime,omitempty" tf:"event_time"`

	EventType *string `json:"eventType,omitempty" tf:"event_type"`

	ID *string `json:"id,omitempty" tf:"id"`

	Subject *string `json:"subject,omitempty" tf:"subject"`

	Topic *string `json:"topic,omitempty" tf:"topic"`
}

type EventgridTopicObservation struct {
	Endpoint string `json:"endpoint" tf:"endpoint"`

	PrimaryAccessKey string `json:"primaryAccessKey" tf:"primary_access_key"`

	SecondaryAccessKey string `json:"secondaryAccessKey" tf:"secondary_access_key"`
}

type EventgridTopicParameters struct {
	InboundIPRule []EventgridTopicInboundIPRuleParameters `json:"inboundIpRule,omitempty" tf:"inbound_ip_rule"`

	InputMappingDefaultValues []EventgridTopicInputMappingDefaultValuesParameters `json:"inputMappingDefaultValues,omitempty" tf:"input_mapping_default_values"`

	InputMappingFields []EventgridTopicInputMappingFieldsParameters `json:"inputMappingFields,omitempty" tf:"input_mapping_fields"`

	InputSchema *string `json:"inputSchema,omitempty" tf:"input_schema"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// EventgridTopicSpec defines the desired state of EventgridTopic
type EventgridTopicSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EventgridTopicParameters `json:"forProvider"`
}

// EventgridTopicStatus defines the observed state of EventgridTopic.
type EventgridTopicStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EventgridTopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventgridTopic is the Schema for the EventgridTopics API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type EventgridTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventgridTopicSpec   `json:"spec"`
	Status            EventgridTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventgridTopicList contains a list of EventgridTopics
type EventgridTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventgridTopic `json:"items"`
}

// Repository type metadata.
var (
	EventgridTopicKind             = "EventgridTopic"
	EventgridTopicGroupKind        = schema.GroupKind{Group: Group, Kind: EventgridTopicKind}.String()
	EventgridTopicKindAPIVersion   = EventgridTopicKind + "." + GroupVersion.String()
	EventgridTopicGroupVersionKind = GroupVersion.WithKind(EventgridTopicKind)
)

func init() {
	SchemeBuilder.Register(&EventgridTopic{}, &EventgridTopicList{})
}
