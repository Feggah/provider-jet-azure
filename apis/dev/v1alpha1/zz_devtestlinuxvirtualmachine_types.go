/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DevTestLinuxVirtualMachineObservation struct {
	Fqdn string `json:"fqdn" tf:"fqdn"`

	UniqueIdentifier string `json:"uniqueIdentifier" tf:"unique_identifier"`
}

type DevTestLinuxVirtualMachineParameters struct {
	AllowClaim *bool `json:"allowClaim,omitempty" tf:"allow_claim"`

	DisallowPublicIPAddress *bool `json:"disallowPublicIpAddress,omitempty" tf:"disallow_public_ip_address"`

	GalleryImageReference []GalleryImageReferenceParameters `json:"galleryImageReference" tf:"gallery_image_reference"`

	InboundNatRule []InboundNatRuleParameters `json:"inboundNatRule,omitempty" tf:"inbound_nat_rule"`

	LabName string `json:"labName" tf:"lab_name"`

	LabSubnetName string `json:"labSubnetName" tf:"lab_subnet_name"`

	LabVirtualNetworkID string `json:"labVirtualNetworkId" tf:"lab_virtual_network_id"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	Notes *string `json:"notes,omitempty" tf:"notes"`

	Password *string `json:"password,omitempty" tf:"password"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key"`

	Size string `json:"size" tf:"size"`

	StorageType string `json:"storageType" tf:"storage_type"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Username string `json:"username" tf:"username"`
}

type GalleryImageReferenceObservation struct {
}

type GalleryImageReferenceParameters struct {
	Offer string `json:"offer" tf:"offer"`

	Publisher string `json:"publisher" tf:"publisher"`

	Sku string `json:"sku" tf:"sku"`

	Version string `json:"version" tf:"version"`
}

type InboundNatRuleObservation struct {
	FrontendPort int64 `json:"frontendPort" tf:"frontend_port"`
}

type InboundNatRuleParameters struct {
	BackendPort int64 `json:"backendPort" tf:"backend_port"`

	Protocol string `json:"protocol" tf:"protocol"`
}

// DevTestLinuxVirtualMachineSpec defines the desired state of DevTestLinuxVirtualMachine
type DevTestLinuxVirtualMachineSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DevTestLinuxVirtualMachineParameters `json:"forProvider"`
}

// DevTestLinuxVirtualMachineStatus defines the observed state of DevTestLinuxVirtualMachine.
type DevTestLinuxVirtualMachineStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DevTestLinuxVirtualMachineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestLinuxVirtualMachine is the Schema for the DevTestLinuxVirtualMachines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DevTestLinuxVirtualMachine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DevTestLinuxVirtualMachineSpec   `json:"spec"`
	Status            DevTestLinuxVirtualMachineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestLinuxVirtualMachineList contains a list of DevTestLinuxVirtualMachines
type DevTestLinuxVirtualMachineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevTestLinuxVirtualMachine `json:"items"`
}

// Repository type metadata.
var (
	DevTestLinuxVirtualMachineKind             = "DevTestLinuxVirtualMachine"
	DevTestLinuxVirtualMachineGroupKind        = schema.GroupKind{Group: Group, Kind: DevTestLinuxVirtualMachineKind}.String()
	DevTestLinuxVirtualMachineKindAPIVersion   = DevTestLinuxVirtualMachineKind + "." + GroupVersion.String()
	DevTestLinuxVirtualMachineGroupVersionKind = GroupVersion.WithKind(DevTestLinuxVirtualMachineKind)
)

func init() {
	SchemeBuilder.Register(&DevTestLinuxVirtualMachine{}, &DevTestLinuxVirtualMachineList{})
}
