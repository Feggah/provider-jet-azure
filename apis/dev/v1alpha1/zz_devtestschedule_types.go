/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DailyRecurrenceObservation struct {
}

type DailyRecurrenceParameters struct {
	Time string `json:"time" tf:"time"`
}

type DevTestScheduleNotificationSettingsObservation struct {
}

type DevTestScheduleNotificationSettingsParameters struct {
	Status *string `json:"status,omitempty" tf:"status"`

	TimeInMinutes *int64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes"`

	WebhookUrl *string `json:"webhookUrl,omitempty" tf:"webhook_url"`
}

type DevTestScheduleObservation struct {
}

type DevTestScheduleParameters struct {
	DailyRecurrence []DailyRecurrenceParameters `json:"dailyRecurrence,omitempty" tf:"daily_recurrence"`

	HourlyRecurrence []HourlyRecurrenceParameters `json:"hourlyRecurrence,omitempty" tf:"hourly_recurrence"`

	LabName string `json:"labName" tf:"lab_name"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	NotificationSettings []DevTestScheduleNotificationSettingsParameters `json:"notificationSettings" tf:"notification_settings"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Status *string `json:"status,omitempty" tf:"status"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TaskType string `json:"taskType" tf:"task_type"`

	TimeZoneId string `json:"timeZoneId" tf:"time_zone_id"`

	WeeklyRecurrence []WeeklyRecurrenceParameters `json:"weeklyRecurrence,omitempty" tf:"weekly_recurrence"`
}

type HourlyRecurrenceObservation struct {
}

type HourlyRecurrenceParameters struct {
	Minute int64 `json:"minute" tf:"minute"`
}

type WeeklyRecurrenceObservation struct {
}

type WeeklyRecurrenceParameters struct {
	Time string `json:"time" tf:"time"`

	WeekDays []string `json:"weekDays,omitempty" tf:"week_days"`
}

// DevTestScheduleSpec defines the desired state of DevTestSchedule
type DevTestScheduleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DevTestScheduleParameters `json:"forProvider"`
}

// DevTestScheduleStatus defines the observed state of DevTestSchedule.
type DevTestScheduleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DevTestScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestSchedule is the Schema for the DevTestSchedules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DevTestSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DevTestScheduleSpec   `json:"spec"`
	Status            DevTestScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevTestScheduleList contains a list of DevTestSchedules
type DevTestScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevTestSchedule `json:"items"`
}

// Repository type metadata.
var (
	DevTestScheduleKind             = "DevTestSchedule"
	DevTestScheduleGroupKind        = schema.GroupKind{Group: Group, Kind: DevTestScheduleKind}.String()
	DevTestScheduleKindAPIVersion   = DevTestScheduleKind + "." + GroupVersion.String()
	DevTestScheduleGroupVersionKind = GroupVersion.WithKind(DevTestScheduleKind)
)

func init() {
	SchemeBuilder.Register(&DevTestSchedule{}, &DevTestScheduleList{})
}
