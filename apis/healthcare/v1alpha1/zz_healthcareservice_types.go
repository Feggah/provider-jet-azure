/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AuthenticationConfigurationObservation struct {
}

type AuthenticationConfigurationParameters struct {
	Audience *string `json:"audience,omitempty" tf:"audience"`

	Authority *string `json:"authority,omitempty" tf:"authority"`

	SmartProxyEnabled *bool `json:"smartProxyEnabled,omitempty" tf:"smart_proxy_enabled"`
}

type CorsConfigurationObservation struct {
}

type CorsConfigurationParameters struct {
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials"`

	AllowedHeaders []string `json:"allowedHeaders,omitempty" tf:"allowed_headers"`

	AllowedMethods []string `json:"allowedMethods,omitempty" tf:"allowed_methods"`

	AllowedOrigins []string `json:"allowedOrigins,omitempty" tf:"allowed_origins"`

	MaxAgeInSeconds *int64 `json:"maxAgeInSeconds,omitempty" tf:"max_age_in_seconds"`
}

type HealthcareServiceObservation struct {
}

type HealthcareServiceParameters struct {
	AccessPolicyObjectIds []string `json:"accessPolicyObjectIds,omitempty" tf:"access_policy_object_ids"`

	AuthenticationConfiguration []AuthenticationConfigurationParameters `json:"authenticationConfiguration,omitempty" tf:"authentication_configuration"`

	CorsConfiguration []CorsConfigurationParameters `json:"corsConfiguration,omitempty" tf:"cors_configuration"`

	CosmosdbKeyVaultKeyVersionlessId *string `json:"cosmosdbKeyVaultKeyVersionlessId,omitempty" tf:"cosmosdb_key_vault_key_versionless_id"`

	CosmosdbThroughput *int64 `json:"cosmosdbThroughput,omitempty" tf:"cosmosdb_throughput"`

	Kind *string `json:"kind,omitempty" tf:"kind"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// HealthcareServiceSpec defines the desired state of HealthcareService
type HealthcareServiceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HealthcareServiceParameters `json:"forProvider"`
}

// HealthcareServiceStatus defines the observed state of HealthcareService.
type HealthcareServiceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HealthcareServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HealthcareService is the Schema for the HealthcareServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HealthcareService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HealthcareServiceSpec   `json:"spec"`
	Status            HealthcareServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HealthcareServiceList contains a list of HealthcareServices
type HealthcareServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HealthcareService `json:"items"`
}

// Repository type metadata.
var (
	HealthcareServiceKind             = "HealthcareService"
	HealthcareServiceGroupKind        = schema.GroupKind{Group: Group, Kind: HealthcareServiceKind}.String()
	HealthcareServiceKindAPIVersion   = HealthcareServiceKind + "." + GroupVersion.String()
	HealthcareServiceGroupVersionKind = GroupVersion.WithKind(HealthcareServiceKind)
)

func init() {
	SchemeBuilder.Register(&HealthcareService{}, &HealthcareServiceList{})
}
