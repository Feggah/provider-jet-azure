/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CommonEncryptionCbcsObservation struct {
}

type CommonEncryptionCbcsParameters struct {
	DefaultContentKey []DefaultContentKeyParameters `json:"defaultContentKey,omitempty" tf:"default_content_key"`

	DrmFairplay []DrmFairplayParameters `json:"drmFairplay,omitempty" tf:"drm_fairplay"`

	EnabledProtocols []EnabledProtocolsParameters `json:"enabledProtocols,omitempty" tf:"enabled_protocols"`
}

type CommonEncryptionCencDefaultContentKeyObservation struct {
}

type CommonEncryptionCencDefaultContentKeyParameters struct {
	Label *string `json:"label,omitempty" tf:"label"`

	PolicyName *string `json:"policyName,omitempty" tf:"policy_name"`
}

type CommonEncryptionCencEnabledProtocolsObservation struct {
}

type CommonEncryptionCencEnabledProtocolsParameters struct {
	Dash *bool `json:"dash,omitempty" tf:"dash"`

	Download *bool `json:"download,omitempty" tf:"download"`

	Hls *bool `json:"hls,omitempty" tf:"hls"`

	SmoothStreaming *bool `json:"smoothStreaming,omitempty" tf:"smooth_streaming"`
}

type CommonEncryptionCencObservation struct {
}

type CommonEncryptionCencParameters struct {
	DefaultContentKey []CommonEncryptionCencDefaultContentKeyParameters `json:"defaultContentKey,omitempty" tf:"default_content_key"`

	DrmPlayready []DrmPlayreadyParameters `json:"drmPlayready,omitempty" tf:"drm_playready"`

	DrmWidevineCustomLicenseAcquisitionURLTemplate *string `json:"drmWidevineCustomLicenseAcquisitionUrlTemplate,omitempty" tf:"drm_widevine_custom_license_acquisition_url_template"`

	EnabledProtocols []CommonEncryptionCencEnabledProtocolsParameters `json:"enabledProtocols,omitempty" tf:"enabled_protocols"`
}

type DefaultContentKeyObservation struct {
}

type DefaultContentKeyParameters struct {
	Label *string `json:"label,omitempty" tf:"label"`

	PolicyName *string `json:"policyName,omitempty" tf:"policy_name"`
}

type DrmFairplayObservation struct {
}

type DrmFairplayParameters struct {
	AllowPersistentLicense *bool `json:"allowPersistentLicense,omitempty" tf:"allow_persistent_license"`

	CustomLicenseAcquisitionURLTemplate *string `json:"customLicenseAcquisitionUrlTemplate,omitempty" tf:"custom_license_acquisition_url_template"`
}

type DrmPlayreadyObservation struct {
}

type DrmPlayreadyParameters struct {
	CustomAttributes *string `json:"customAttributes,omitempty" tf:"custom_attributes"`

	CustomLicenseAcquisitionURLTemplate *string `json:"customLicenseAcquisitionUrlTemplate,omitempty" tf:"custom_license_acquisition_url_template"`
}

type EnabledProtocolsObservation struct {
}

type EnabledProtocolsParameters struct {
	Dash *bool `json:"dash,omitempty" tf:"dash"`

	Download *bool `json:"download,omitempty" tf:"download"`

	Hls *bool `json:"hls,omitempty" tf:"hls"`

	SmoothStreaming *bool `json:"smoothStreaming,omitempty" tf:"smooth_streaming"`
}

type MediaStreamingPolicyObservation struct {
}

type MediaStreamingPolicyParameters struct {
	CommonEncryptionCbcs []CommonEncryptionCbcsParameters `json:"commonEncryptionCbcs,omitempty" tf:"common_encryption_cbcs"`

	CommonEncryptionCenc []CommonEncryptionCencParameters `json:"commonEncryptionCenc,omitempty" tf:"common_encryption_cenc"`

	DefaultContentKeyPolicyName *string `json:"defaultContentKeyPolicyName,omitempty" tf:"default_content_key_policy_name"`

	MediaServicesAccountName string `json:"mediaServicesAccountName" tf:"media_services_account_name"`

	Name string `json:"name" tf:"name"`

	NoEncryptionEnabledProtocols []NoEncryptionEnabledProtocolsParameters `json:"noEncryptionEnabledProtocols,omitempty" tf:"no_encryption_enabled_protocols"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

type NoEncryptionEnabledProtocolsObservation struct {
}

type NoEncryptionEnabledProtocolsParameters struct {
	Dash *bool `json:"dash,omitempty" tf:"dash"`

	Download *bool `json:"download,omitempty" tf:"download"`

	Hls *bool `json:"hls,omitempty" tf:"hls"`

	SmoothStreaming *bool `json:"smoothStreaming,omitempty" tf:"smooth_streaming"`
}

// MediaStreamingPolicySpec defines the desired state of MediaStreamingPolicy
type MediaStreamingPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MediaStreamingPolicyParameters `json:"forProvider"`
}

// MediaStreamingPolicyStatus defines the observed state of MediaStreamingPolicy.
type MediaStreamingPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MediaStreamingPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MediaStreamingPolicy is the Schema for the MediaStreamingPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MediaStreamingPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MediaStreamingPolicySpec   `json:"spec"`
	Status            MediaStreamingPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MediaStreamingPolicyList contains a list of MediaStreamingPolicys
type MediaStreamingPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MediaStreamingPolicy `json:"items"`
}

// Repository type metadata.
var (
	MediaStreamingPolicyKind             = "MediaStreamingPolicy"
	MediaStreamingPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: MediaStreamingPolicyKind}.String()
	MediaStreamingPolicyKindAPIVersion   = MediaStreamingPolicyKind + "." + GroupVersion.String()
	MediaStreamingPolicyGroupVersionKind = GroupVersion.WithKind(MediaStreamingPolicyKind)
)

func init() {
	SchemeBuilder.Register(&MediaStreamingPolicy{}, &MediaStreamingPolicyList{})
}
