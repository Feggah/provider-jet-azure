/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ConditionObservation struct {
}

type ConditionParameters struct {
	Operation *string `json:"operation,omitempty" tf:"operation"`

	Property *string `json:"property,omitempty" tf:"property"`

	Value *string `json:"value,omitempty" tf:"value"`
}

type MediaAssetFilterObservation struct {
}

type MediaAssetFilterParameters struct {
	AssetId string `json:"assetId" tf:"asset_id"`

	FirstQualityBitrate *int64 `json:"firstQualityBitrate,omitempty" tf:"first_quality_bitrate"`

	Name string `json:"name" tf:"name"`

	PresentationTimeRange []PresentationTimeRangeParameters `json:"presentationTimeRange,omitempty" tf:"presentation_time_range"`

	TrackSelection []TrackSelectionParameters `json:"trackSelection,omitempty" tf:"track_selection"`
}

type PresentationTimeRangeObservation struct {
}

type PresentationTimeRangeParameters struct {
	EndInUnits *int64 `json:"endInUnits,omitempty" tf:"end_in_units"`

	ForceEnd *bool `json:"forceEnd,omitempty" tf:"force_end"`

	LiveBackoffInUnits *int64 `json:"liveBackoffInUnits,omitempty" tf:"live_backoff_in_units"`

	PresentationWindowInUnits *int64 `json:"presentationWindowInUnits,omitempty" tf:"presentation_window_in_units"`

	StartInUnits *int64 `json:"startInUnits,omitempty" tf:"start_in_units"`

	UnitTimescaleInMiliseconds *int64 `json:"unitTimescaleInMiliseconds,omitempty" tf:"unit_timescale_in_miliseconds"`
}

type TrackSelectionObservation struct {
}

type TrackSelectionParameters struct {
	Condition []ConditionParameters `json:"condition" tf:"condition"`
}

// MediaAssetFilterSpec defines the desired state of MediaAssetFilter
type MediaAssetFilterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MediaAssetFilterParameters `json:"forProvider"`
}

// MediaAssetFilterStatus defines the observed state of MediaAssetFilter.
type MediaAssetFilterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MediaAssetFilterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MediaAssetFilter is the Schema for the MediaAssetFilters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MediaAssetFilter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MediaAssetFilterSpec   `json:"spec"`
	Status            MediaAssetFilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MediaAssetFilterList contains a list of MediaAssetFilters
type MediaAssetFilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MediaAssetFilter `json:"items"`
}

// Repository type metadata.
var (
	MediaAssetFilterKind             = "MediaAssetFilter"
	MediaAssetFilterGroupKind        = schema.GroupKind{Group: Group, Kind: MediaAssetFilterKind}.String()
	MediaAssetFilterKindAPIVersion   = MediaAssetFilterKind + "." + GroupVersion.String()
	MediaAssetFilterGroupVersionKind = GroupVersion.WithKind(MediaAssetFilterKind)
)

func init() {
	SchemeBuilder.Register(&MediaAssetFilter{}, &MediaAssetFilterList{})
}
