/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryIntegrationRuntimeManagedCatalogInfoObservation struct {
}

type DataFactoryIntegrationRuntimeManagedCatalogInfoParameters struct {
	AdministratorLogin *string `json:"administratorLogin,omitempty" tf:"administrator_login"`

	AdministratorPassword *string `json:"administratorPassword,omitempty" tf:"administrator_password"`

	PricingTier *string `json:"pricingTier,omitempty" tf:"pricing_tier"`

	ServerEndpoint string `json:"serverEndpoint" tf:"server_endpoint"`
}

type DataFactoryIntegrationRuntimeManagedCustomSetupScriptObservation struct {
}

type DataFactoryIntegrationRuntimeManagedCustomSetupScriptParameters struct {
	BlobContainerURI string `json:"blobContainerUri" tf:"blob_container_uri"`

	SasToken string `json:"sasToken" tf:"sas_token"`
}

type DataFactoryIntegrationRuntimeManagedObservation struct {
}

type DataFactoryIntegrationRuntimeManagedParameters struct {
	CatalogInfo []DataFactoryIntegrationRuntimeManagedCatalogInfoParameters `json:"catalogInfo,omitempty" tf:"catalog_info"`

	CustomSetupScript []DataFactoryIntegrationRuntimeManagedCustomSetupScriptParameters `json:"customSetupScript,omitempty" tf:"custom_setup_script"`

	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	Description *string `json:"description,omitempty" tf:"description"`

	Edition *string `json:"edition,omitempty" tf:"edition"`

	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`

	Location string `json:"location" tf:"location"`

	MaxParallelExecutionsPerNode *int64 `json:"maxParallelExecutionsPerNode,omitempty" tf:"max_parallel_executions_per_node"`

	Name string `json:"name" tf:"name"`

	NodeSize string `json:"nodeSize" tf:"node_size"`

	NumberOfNodes *int64 `json:"numberOfNodes,omitempty" tf:"number_of_nodes"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	VnetIntegration []DataFactoryIntegrationRuntimeManagedVnetIntegrationParameters `json:"vnetIntegration,omitempty" tf:"vnet_integration"`
}

type DataFactoryIntegrationRuntimeManagedVnetIntegrationObservation struct {
}

type DataFactoryIntegrationRuntimeManagedVnetIntegrationParameters struct {
	SubnetName string `json:"subnetName" tf:"subnet_name"`

	VnetID string `json:"vnetId" tf:"vnet_id"`
}

// DataFactoryIntegrationRuntimeManagedSpec defines the desired state of DataFactoryIntegrationRuntimeManaged
type DataFactoryIntegrationRuntimeManagedSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryIntegrationRuntimeManagedParameters `json:"forProvider"`
}

// DataFactoryIntegrationRuntimeManagedStatus defines the observed state of DataFactoryIntegrationRuntimeManaged.
type DataFactoryIntegrationRuntimeManagedStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryIntegrationRuntimeManagedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryIntegrationRuntimeManaged is the Schema for the DataFactoryIntegrationRuntimeManageds API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryIntegrationRuntimeManaged struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryIntegrationRuntimeManagedSpec   `json:"spec"`
	Status            DataFactoryIntegrationRuntimeManagedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryIntegrationRuntimeManagedList contains a list of DataFactoryIntegrationRuntimeManageds
type DataFactoryIntegrationRuntimeManagedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryIntegrationRuntimeManaged `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryIntegrationRuntimeManagedKind             = "DataFactoryIntegrationRuntimeManaged"
	DataFactoryIntegrationRuntimeManagedGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryIntegrationRuntimeManagedKind}.String()
	DataFactoryIntegrationRuntimeManagedKindAPIVersion   = DataFactoryIntegrationRuntimeManagedKind + "." + GroupVersion.String()
	DataFactoryIntegrationRuntimeManagedGroupVersionKind = GroupVersion.WithKind(DataFactoryIntegrationRuntimeManagedKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryIntegrationRuntimeManaged{}, &DataFactoryIntegrationRuntimeManagedList{})
}
