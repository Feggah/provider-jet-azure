/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryLinkedServiceAzureSqlDatabaseKeyVaultPasswordObservation struct {
}

type DataFactoryLinkedServiceAzureSqlDatabaseKeyVaultPasswordParameters struct {
	LinkedServiceName string `json:"linkedServiceName" tf:"linked_service_name"`

	SecretName string `json:"secretName" tf:"secret_name"`
}

type DataFactoryLinkedServiceAzureSqlDatabaseObservation struct {
}

type DataFactoryLinkedServiceAzureSqlDatabaseParameters struct {
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string"`

	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	Description *string `json:"description,omitempty" tf:"description"`

	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name"`

	KeyVaultConnectionString []KeyVaultConnectionStringParameters `json:"keyVaultConnectionString,omitempty" tf:"key_vault_connection_string"`

	KeyVaultPassword []DataFactoryLinkedServiceAzureSqlDatabaseKeyVaultPasswordParameters `json:"keyVaultPassword,omitempty" tf:"key_vault_password"`

	Name string `json:"name" tf:"name"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	ServicePrincipalId *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id"`

	ServicePrincipalKey *string `json:"servicePrincipalKey,omitempty" tf:"service_principal_key"`

	TenantId *string `json:"tenantId,omitempty" tf:"tenant_id"`

	UseManagedIdentity *bool `json:"useManagedIdentity,omitempty" tf:"use_managed_identity"`
}

type KeyVaultConnectionStringObservation struct {
}

type KeyVaultConnectionStringParameters struct {
	LinkedServiceName string `json:"linkedServiceName" tf:"linked_service_name"`

	SecretName string `json:"secretName" tf:"secret_name"`
}

// DataFactoryLinkedServiceAzureSqlDatabaseSpec defines the desired state of DataFactoryLinkedServiceAzureSqlDatabase
type DataFactoryLinkedServiceAzureSqlDatabaseSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryLinkedServiceAzureSqlDatabaseParameters `json:"forProvider"`
}

// DataFactoryLinkedServiceAzureSqlDatabaseStatus defines the observed state of DataFactoryLinkedServiceAzureSqlDatabase.
type DataFactoryLinkedServiceAzureSqlDatabaseStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryLinkedServiceAzureSqlDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceAzureSqlDatabase is the Schema for the DataFactoryLinkedServiceAzureSqlDatabases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryLinkedServiceAzureSqlDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryLinkedServiceAzureSqlDatabaseSpec   `json:"spec"`
	Status            DataFactoryLinkedServiceAzureSqlDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceAzureSqlDatabaseList contains a list of DataFactoryLinkedServiceAzureSqlDatabases
type DataFactoryLinkedServiceAzureSqlDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryLinkedServiceAzureSqlDatabase `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryLinkedServiceAzureSqlDatabaseKind             = "DataFactoryLinkedServiceAzureSqlDatabase"
	DataFactoryLinkedServiceAzureSqlDatabaseGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryLinkedServiceAzureSqlDatabaseKind}.String()
	DataFactoryLinkedServiceAzureSqlDatabaseKindAPIVersion   = DataFactoryLinkedServiceAzureSqlDatabaseKind + "." + GroupVersion.String()
	DataFactoryLinkedServiceAzureSqlDatabaseGroupVersionKind = GroupVersion.WithKind(DataFactoryLinkedServiceAzureSqlDatabaseKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryLinkedServiceAzureSqlDatabase{}, &DataFactoryLinkedServiceAzureSqlDatabaseList{})
}
