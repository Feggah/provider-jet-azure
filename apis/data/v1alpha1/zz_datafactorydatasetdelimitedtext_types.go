/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AzureBlobFsLocationObservation struct {
}

type AzureBlobFsLocationParameters struct {
	FileSystem string `json:"fileSystem" tf:"file_system"`

	Filename *string `json:"filename,omitempty" tf:"filename"`

	Path *string `json:"path,omitempty" tf:"path"`
}

type DataFactoryDatasetDelimitedTextAzureBlobStorageLocationObservation struct {
}

type DataFactoryDatasetDelimitedTextAzureBlobStorageLocationParameters struct {
	Container string `json:"container" tf:"container"`

	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled"`

	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled"`

	Filename *string `json:"filename,omitempty" tf:"filename"`

	Path *string `json:"path,omitempty" tf:"path"`
}

type DataFactoryDatasetDelimitedTextHttpServerLocationObservation struct {
}

type DataFactoryDatasetDelimitedTextHttpServerLocationParameters struct {
	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled"`

	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled"`

	Filename string `json:"filename" tf:"filename"`

	Path string `json:"path" tf:"path"`

	RelativeUrl string `json:"relativeUrl" tf:"relative_url"`
}

type DataFactoryDatasetDelimitedTextObservation struct {
}

type DataFactoryDatasetDelimitedTextParameters struct {
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	AzureBlobFsLocation []AzureBlobFsLocationParameters `json:"azureBlobFsLocation,omitempty" tf:"azure_blob_fs_location"`

	AzureBlobStorageLocation []DataFactoryDatasetDelimitedTextAzureBlobStorageLocationParameters `json:"azureBlobStorageLocation,omitempty" tf:"azure_blob_storage_location"`

	ColumnDelimiter *string `json:"columnDelimiter,omitempty" tf:"column_delimiter"`

	CompressionCodec *string `json:"compressionCodec,omitempty" tf:"compression_codec"`

	CompressionLevel *string `json:"compressionLevel,omitempty" tf:"compression_level"`

	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	Description *string `json:"description,omitempty" tf:"description"`

	Encoding *string `json:"encoding,omitempty" tf:"encoding"`

	EscapeCharacter *string `json:"escapeCharacter,omitempty" tf:"escape_character"`

	FirstRowAsHeader *bool `json:"firstRowAsHeader,omitempty" tf:"first_row_as_header"`

	Folder *string `json:"folder,omitempty" tf:"folder"`

	HttpServerLocation []DataFactoryDatasetDelimitedTextHttpServerLocationParameters `json:"httpServerLocation,omitempty" tf:"http_server_location"`

	LinkedServiceName string `json:"linkedServiceName" tf:"linked_service_name"`

	Name string `json:"name" tf:"name"`

	NullValue *string `json:"nullValue,omitempty" tf:"null_value"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	QuoteCharacter *string `json:"quoteCharacter,omitempty" tf:"quote_character"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RowDelimiter *string `json:"rowDelimiter,omitempty" tf:"row_delimiter"`

	SchemaColumn []DataFactoryDatasetDelimitedTextSchemaColumnParameters `json:"schemaColumn,omitempty" tf:"schema_column"`
}

type DataFactoryDatasetDelimitedTextSchemaColumnObservation struct {
}

type DataFactoryDatasetDelimitedTextSchemaColumnParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	Type *string `json:"type,omitempty" tf:"type"`
}

// DataFactoryDatasetDelimitedTextSpec defines the desired state of DataFactoryDatasetDelimitedText
type DataFactoryDatasetDelimitedTextSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryDatasetDelimitedTextParameters `json:"forProvider"`
}

// DataFactoryDatasetDelimitedTextStatus defines the observed state of DataFactoryDatasetDelimitedText.
type DataFactoryDatasetDelimitedTextStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryDatasetDelimitedTextObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryDatasetDelimitedText is the Schema for the DataFactoryDatasetDelimitedTexts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryDatasetDelimitedText struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryDatasetDelimitedTextSpec   `json:"spec"`
	Status            DataFactoryDatasetDelimitedTextStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryDatasetDelimitedTextList contains a list of DataFactoryDatasetDelimitedTexts
type DataFactoryDatasetDelimitedTextList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryDatasetDelimitedText `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryDatasetDelimitedTextKind             = "DataFactoryDatasetDelimitedText"
	DataFactoryDatasetDelimitedTextGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryDatasetDelimitedTextKind}.String()
	DataFactoryDatasetDelimitedTextKindAPIVersion   = DataFactoryDatasetDelimitedTextKind + "." + GroupVersion.String()
	DataFactoryDatasetDelimitedTextGroupVersionKind = GroupVersion.WithKind(DataFactoryDatasetDelimitedTextKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryDatasetDelimitedText{}, &DataFactoryDatasetDelimitedTextList{})
}
