/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CriteriaObservation struct {
}

type CriteriaParameters struct {

	// +kubebuilder:validation:Optional
	AbsoluteCriteria *string `json:"absoluteCriteria,omitempty" tf:"absolute_criteria,omitempty"`
}

type DataProtectionBackupPolicyDiskObservation struct {
}

type DataProtectionBackupPolicyDiskParameters struct {

	// +kubebuilder:validation:Required
	BackupRepeatingTimeIntervals []*string `json:"backupRepeatingTimeIntervals" tf:"backup_repeating_time_intervals,omitempty"`

	// +kubebuilder:validation:Required
	DefaultRetentionDuration *string `json:"defaultRetentionDuration" tf:"default_retention_duration,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionRule []RetentionRuleParameters `json:"retentionRule,omitempty" tf:"retention_rule,omitempty"`

	// +kubebuilder:validation:Required
	VaultID *string `json:"vaultId" tf:"vault_id,omitempty"`
}

type RetentionRuleObservation struct {
}

type RetentionRuleParameters struct {

	// +kubebuilder:validation:Required
	Criteria []CriteriaParameters `json:"criteria" tf:"criteria,omitempty"`

	// +kubebuilder:validation:Required
	Duration *string `json:"duration" tf:"duration,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Priority *int64 `json:"priority" tf:"priority,omitempty"`
}

// DataProtectionBackupPolicyDiskSpec defines the desired state of DataProtectionBackupPolicyDisk
type DataProtectionBackupPolicyDiskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataProtectionBackupPolicyDiskParameters `json:"forProvider"`
}

// DataProtectionBackupPolicyDiskStatus defines the observed state of DataProtectionBackupPolicyDisk.
type DataProtectionBackupPolicyDiskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataProtectionBackupPolicyDiskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataProtectionBackupPolicyDisk is the Schema for the DataProtectionBackupPolicyDisks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataProtectionBackupPolicyDisk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataProtectionBackupPolicyDiskSpec   `json:"spec"`
	Status            DataProtectionBackupPolicyDiskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataProtectionBackupPolicyDiskList contains a list of DataProtectionBackupPolicyDisks
type DataProtectionBackupPolicyDiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataProtectionBackupPolicyDisk `json:"items"`
}

// Repository type metadata.
var (
	DataProtectionBackupPolicyDiskKind             = "DataProtectionBackupPolicyDisk"
	DataProtectionBackupPolicyDiskGroupKind        = schema.GroupKind{Group: Group, Kind: DataProtectionBackupPolicyDiskKind}.String()
	DataProtectionBackupPolicyDiskKindAPIVersion   = DataProtectionBackupPolicyDiskKind + "." + GroupVersion.String()
	DataProtectionBackupPolicyDiskGroupVersionKind = GroupVersion.WithKind(DataProtectionBackupPolicyDiskKind)
)

func init() {
	SchemeBuilder.Register(&DataProtectionBackupPolicyDisk{}, &DataProtectionBackupPolicyDiskList{})
}
