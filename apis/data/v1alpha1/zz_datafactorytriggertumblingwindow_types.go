/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryTriggerTumblingWindowObservation struct {
}

type DataFactoryTriggerTumblingWindowParameters struct {
	Activated *bool `json:"activated,omitempty" tf:"activated"`

	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	DataFactoryId string `json:"dataFactoryId" tf:"data_factory_id"`

	Delay *string `json:"delay,omitempty" tf:"delay"`

	Description *string `json:"description,omitempty" tf:"description"`

	EndTime *string `json:"endTime,omitempty" tf:"end_time"`

	Frequency string `json:"frequency" tf:"frequency"`

	Interval int64 `json:"interval" tf:"interval"`

	MaxConcurrency *int64 `json:"maxConcurrency,omitempty" tf:"max_concurrency"`

	Name string `json:"name" tf:"name"`

	Pipeline []DataFactoryTriggerTumblingWindowPipelineParameters `json:"pipeline" tf:"pipeline"`

	Retry []RetryParameters `json:"retry,omitempty" tf:"retry"`

	StartTime string `json:"startTime" tf:"start_time"`

	TriggerDependency []TriggerDependencyParameters `json:"triggerDependency,omitempty" tf:"trigger_dependency"`
}

type DataFactoryTriggerTumblingWindowPipelineObservation struct {
}

type DataFactoryTriggerTumblingWindowPipelineParameters struct {
	Name string `json:"name" tf:"name"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type RetryObservation struct {
}

type RetryParameters struct {
	Count int64 `json:"count" tf:"count"`

	Interval *int64 `json:"interval,omitempty" tf:"interval"`
}

type TriggerDependencyObservation struct {
}

type TriggerDependencyParameters struct {
	Offset *string `json:"offset,omitempty" tf:"offset"`

	Size *string `json:"size,omitempty" tf:"size"`

	TriggerName *string `json:"triggerName,omitempty" tf:"trigger_name"`
}

// DataFactoryTriggerTumblingWindowSpec defines the desired state of DataFactoryTriggerTumblingWindow
type DataFactoryTriggerTumblingWindowSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryTriggerTumblingWindowParameters `json:"forProvider"`
}

// DataFactoryTriggerTumblingWindowStatus defines the observed state of DataFactoryTriggerTumblingWindow.
type DataFactoryTriggerTumblingWindowStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryTriggerTumblingWindowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryTriggerTumblingWindow is the Schema for the DataFactoryTriggerTumblingWindows API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryTriggerTumblingWindow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryTriggerTumblingWindowSpec   `json:"spec"`
	Status            DataFactoryTriggerTumblingWindowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryTriggerTumblingWindowList contains a list of DataFactoryTriggerTumblingWindows
type DataFactoryTriggerTumblingWindowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryTriggerTumblingWindow `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryTriggerTumblingWindowKind             = "DataFactoryTriggerTumblingWindow"
	DataFactoryTriggerTumblingWindowGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryTriggerTumblingWindowKind}.String()
	DataFactoryTriggerTumblingWindowKindAPIVersion   = DataFactoryTriggerTumblingWindowKind + "." + GroupVersion.String()
	DataFactoryTriggerTumblingWindowGroupVersionKind = GroupVersion.WithKind(DataFactoryTriggerTumblingWindowKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryTriggerTumblingWindow{}, &DataFactoryTriggerTumblingWindowList{})
}
