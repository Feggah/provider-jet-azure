/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryDatasetJsonAzureBlobStorageLocationObservation struct {
}

type DataFactoryDatasetJsonAzureBlobStorageLocationParameters struct {
	Container string `json:"container" tf:"container"`

	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled"`

	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled"`

	Filename string `json:"filename" tf:"filename"`

	Path string `json:"path" tf:"path"`
}

type DataFactoryDatasetJsonHttpServerLocationObservation struct {
}

type DataFactoryDatasetJsonHttpServerLocationParameters struct {
	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled"`

	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled"`

	Filename string `json:"filename" tf:"filename"`

	Path string `json:"path" tf:"path"`

	RelativeUrl string `json:"relativeUrl" tf:"relative_url"`
}

type DataFactoryDatasetJsonObservation struct {
}

type DataFactoryDatasetJsonParameters struct {
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	AzureBlobStorageLocation []DataFactoryDatasetJsonAzureBlobStorageLocationParameters `json:"azureBlobStorageLocation,omitempty" tf:"azure_blob_storage_location"`

	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	Description *string `json:"description,omitempty" tf:"description"`

	Encoding *string `json:"encoding,omitempty" tf:"encoding"`

	Folder *string `json:"folder,omitempty" tf:"folder"`

	HttpServerLocation []DataFactoryDatasetJsonHttpServerLocationParameters `json:"httpServerLocation,omitempty" tf:"http_server_location"`

	LinkedServiceName string `json:"linkedServiceName" tf:"linked_service_name"`

	Name string `json:"name" tf:"name"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SchemaColumn []DataFactoryDatasetJsonSchemaColumnParameters `json:"schemaColumn,omitempty" tf:"schema_column"`
}

type DataFactoryDatasetJsonSchemaColumnObservation struct {
}

type DataFactoryDatasetJsonSchemaColumnParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Name string `json:"name" tf:"name"`

	Type *string `json:"type,omitempty" tf:"type"`
}

// DataFactoryDatasetJsonSpec defines the desired state of DataFactoryDatasetJson
type DataFactoryDatasetJsonSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryDatasetJsonParameters `json:"forProvider"`
}

// DataFactoryDatasetJsonStatus defines the observed state of DataFactoryDatasetJson.
type DataFactoryDatasetJsonStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryDatasetJsonObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryDatasetJson is the Schema for the DataFactoryDatasetJsons API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryDatasetJson struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryDatasetJsonSpec   `json:"spec"`
	Status            DataFactoryDatasetJsonStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryDatasetJsonList contains a list of DataFactoryDatasetJsons
type DataFactoryDatasetJsonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryDatasetJson `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryDatasetJsonKind             = "DataFactoryDatasetJson"
	DataFactoryDatasetJsonGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryDatasetJsonKind}.String()
	DataFactoryDatasetJsonKindAPIVersion   = DataFactoryDatasetJsonKind + "." + GroupVersion.String()
	DataFactoryDatasetJsonGroupVersionKind = GroupVersion.WithKind(DataFactoryDatasetJsonKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryDatasetJson{}, &DataFactoryDatasetJsonList{})
}
