/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataFactoryLinkedServiceSqlServerKeyVaultConnectionStringObservation struct {
}

type DataFactoryLinkedServiceSqlServerKeyVaultConnectionStringParameters struct {
	LinkedServiceName string `json:"linkedServiceName" tf:"linked_service_name"`

	SecretName string `json:"secretName" tf:"secret_name"`
}

type DataFactoryLinkedServiceSqlServerKeyVaultPasswordObservation struct {
}

type DataFactoryLinkedServiceSqlServerKeyVaultPasswordParameters struct {
	LinkedServiceName string `json:"linkedServiceName" tf:"linked_service_name"`

	SecretName string `json:"secretName" tf:"secret_name"`
}

type DataFactoryLinkedServiceSqlServerObservation struct {
}

type DataFactoryLinkedServiceSqlServerParameters struct {
	AdditionalProperties map[string]string `json:"additionalProperties,omitempty" tf:"additional_properties"`

	Annotations []string `json:"annotations,omitempty" tf:"annotations"`

	ConnectionString *string `json:"connectionString,omitempty" tf:"connection_string"`

	DataFactoryName string `json:"dataFactoryName" tf:"data_factory_name"`

	Description *string `json:"description,omitempty" tf:"description"`

	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name"`

	KeyVaultConnectionString []DataFactoryLinkedServiceSqlServerKeyVaultConnectionStringParameters `json:"keyVaultConnectionString,omitempty" tf:"key_vault_connection_string"`

	KeyVaultPassword []DataFactoryLinkedServiceSqlServerKeyVaultPasswordParameters `json:"keyVaultPassword,omitempty" tf:"key_vault_password"`

	Name string `json:"name" tf:"name"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

// DataFactoryLinkedServiceSqlServerSpec defines the desired state of DataFactoryLinkedServiceSqlServer
type DataFactoryLinkedServiceSqlServerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DataFactoryLinkedServiceSqlServerParameters `json:"forProvider"`
}

// DataFactoryLinkedServiceSqlServerStatus defines the observed state of DataFactoryLinkedServiceSqlServer.
type DataFactoryLinkedServiceSqlServerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DataFactoryLinkedServiceSqlServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceSqlServer is the Schema for the DataFactoryLinkedServiceSqlServers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryLinkedServiceSqlServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryLinkedServiceSqlServerSpec   `json:"spec"`
	Status            DataFactoryLinkedServiceSqlServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryLinkedServiceSqlServerList contains a list of DataFactoryLinkedServiceSqlServers
type DataFactoryLinkedServiceSqlServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryLinkedServiceSqlServer `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryLinkedServiceSqlServerKind             = "DataFactoryLinkedServiceSqlServer"
	DataFactoryLinkedServiceSqlServerGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryLinkedServiceSqlServerKind}.String()
	DataFactoryLinkedServiceSqlServerKindAPIVersion   = DataFactoryLinkedServiceSqlServerKind + "." + GroupVersion.String()
	DataFactoryLinkedServiceSqlServerGroupVersionKind = GroupVersion.WithKind(DataFactoryLinkedServiceSqlServerKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryLinkedServiceSqlServer{}, &DataFactoryLinkedServiceSqlServerList{})
}
