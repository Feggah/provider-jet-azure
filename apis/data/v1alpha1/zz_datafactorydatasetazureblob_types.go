/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataFactoryDatasetAzureBlobObservation struct {
}

type DataFactoryDatasetAzureBlobParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Required
	DataFactoryName *string `json:"dataFactoryName" tf:"data_factory_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// +kubebuilder:validation:Required
	LinkedServiceName *string `json:"linkedServiceName" tf:"linked_service_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SchemaColumn []SchemaColumnParameters `json:"schemaColumn,omitempty" tf:"schema_column,omitempty"`
}

type SchemaColumnObservation struct {
}

type SchemaColumnParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// DataFactoryDatasetAzureBlobSpec defines the desired state of DataFactoryDatasetAzureBlob
type DataFactoryDatasetAzureBlobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataFactoryDatasetAzureBlobParameters `json:"forProvider"`
}

// DataFactoryDatasetAzureBlobStatus defines the observed state of DataFactoryDatasetAzureBlob.
type DataFactoryDatasetAzureBlobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataFactoryDatasetAzureBlobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryDatasetAzureBlob is the Schema for the DataFactoryDatasetAzureBlobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataFactoryDatasetAzureBlob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataFactoryDatasetAzureBlobSpec   `json:"spec"`
	Status            DataFactoryDatasetAzureBlobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataFactoryDatasetAzureBlobList contains a list of DataFactoryDatasetAzureBlobs
type DataFactoryDatasetAzureBlobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataFactoryDatasetAzureBlob `json:"items"`
}

// Repository type metadata.
var (
	DataFactoryDatasetAzureBlobKind             = "DataFactoryDatasetAzureBlob"
	DataFactoryDatasetAzureBlobGroupKind        = schema.GroupKind{Group: Group, Kind: DataFactoryDatasetAzureBlobKind}.String()
	DataFactoryDatasetAzureBlobKindAPIVersion   = DataFactoryDatasetAzureBlobKind + "." + GroupVersion.String()
	DataFactoryDatasetAzureBlobGroupVersionKind = GroupVersion.WithKind(DataFactoryDatasetAzureBlobKind)
)

func init() {
	SchemeBuilder.Register(&DataFactoryDatasetAzureBlob{}, &DataFactoryDatasetAzureBlobList{})
}
