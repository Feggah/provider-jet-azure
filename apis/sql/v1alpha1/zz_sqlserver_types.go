/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IdentityObservation struct {
	PrincipalId string `json:"principalId" tf:"principal_id"`

	TenantId string `json:"tenantId" tf:"tenant_id"`
}

type IdentityParameters struct {
	Type string `json:"type" tf:"type"`
}

type SqlServerExtendedAuditingPolicyObservation struct {
}

type SqlServerExtendedAuditingPolicyParameters struct {
	LogMonitoringEnabled *bool `json:"logMonitoringEnabled,omitempty" tf:"log_monitoring_enabled"`

	RetentionInDays *int64 `json:"retentionInDays,omitempty" tf:"retention_in_days"`

	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty" tf:"storage_account_access_key"`

	StorageAccountAccessKeyIsSecondary *bool `json:"storageAccountAccessKeyIsSecondary,omitempty" tf:"storage_account_access_key_is_secondary"`

	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint"`
}

type SqlServerObservation struct {
	FullyQualifiedDomainName string `json:"fullyQualifiedDomainName" tf:"fully_qualified_domain_name"`
}

type SqlServerParameters struct {
	AdministratorLogin string `json:"administratorLogin" tf:"administrator_login"`

	AdministratorLoginPassword string `json:"administratorLoginPassword" tf:"administrator_login_password"`

	ConnectionPolicy *string `json:"connectionPolicy,omitempty" tf:"connection_policy"`

	ExtendedAuditingPolicy []SqlServerExtendedAuditingPolicyParameters `json:"extendedAuditingPolicy,omitempty" tf:"extended_auditing_policy"`

	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	ThreatDetectionPolicy []SqlServerThreatDetectionPolicyParameters `json:"threatDetectionPolicy,omitempty" tf:"threat_detection_policy"`

	Version string `json:"version" tf:"version"`
}

type SqlServerThreatDetectionPolicyObservation struct {
}

type SqlServerThreatDetectionPolicyParameters struct {
	DisabledAlerts []string `json:"disabledAlerts,omitempty" tf:"disabled_alerts"`

	EmailAccountAdmins *bool `json:"emailAccountAdmins,omitempty" tf:"email_account_admins"`

	EmailAddresses []string `json:"emailAddresses,omitempty" tf:"email_addresses"`

	RetentionDays *int64 `json:"retentionDays,omitempty" tf:"retention_days"`

	State *string `json:"state,omitempty" tf:"state"`

	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty" tf:"storage_account_access_key"`

	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint"`
}

// SqlServerSpec defines the desired state of SqlServer
type SqlServerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SqlServerParameters `json:"forProvider"`
}

// SqlServerStatus defines the observed state of SqlServer.
type SqlServerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SqlServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SqlServer is the Schema for the SqlServers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SqlServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SqlServerSpec   `json:"spec"`
	Status            SqlServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SqlServerList contains a list of SqlServers
type SqlServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlServer `json:"items"`
}

// Repository type metadata.
var (
	SqlServerKind             = "SqlServer"
	SqlServerGroupKind        = schema.GroupKind{Group: Group, Kind: SqlServerKind}.String()
	SqlServerKindAPIVersion   = SqlServerKind + "." + GroupVersion.String()
	SqlServerGroupVersionKind = GroupVersion.WithKind(SqlServerKind)
)

func init() {
	SchemeBuilder.Register(&SqlServer{}, &SqlServerList{})
}
