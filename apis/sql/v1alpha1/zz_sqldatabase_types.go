/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ExtendedAuditingPolicyObservation struct {
}

type ExtendedAuditingPolicyParameters struct {
	LogMonitoringEnabled *bool `json:"logMonitoringEnabled,omitempty" tf:"log_monitoring_enabled"`

	RetentionInDays *int64 `json:"retentionInDays,omitempty" tf:"retention_in_days"`

	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty" tf:"storage_account_access_key"`

	StorageAccountAccessKeyIsSecondary *bool `json:"storageAccountAccessKeyIsSecondary,omitempty" tf:"storage_account_access_key_is_secondary"`

	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint"`
}

type ImportObservation struct {
}

type ImportParameters struct {
	AdministratorLogin string `json:"administratorLogin" tf:"administrator_login"`

	AdministratorLoginPassword string `json:"administratorLoginPassword" tf:"administrator_login_password"`

	AuthenticationType string `json:"authenticationType" tf:"authentication_type"`

	OperationMode *string `json:"operationMode,omitempty" tf:"operation_mode"`

	StorageKey string `json:"storageKey" tf:"storage_key"`

	StorageKeyType string `json:"storageKeyType" tf:"storage_key_type"`

	StorageUri string `json:"storageUri" tf:"storage_uri"`
}

type SqlDatabaseObservation struct {
	CreationDate string `json:"creationDate" tf:"creation_date"`

	DefaultSecondaryLocation string `json:"defaultSecondaryLocation" tf:"default_secondary_location"`

	Encryption string `json:"encryption" tf:"encryption"`
}

type SqlDatabaseParameters struct {
	Collation *string `json:"collation,omitempty" tf:"collation"`

	CreateMode *string `json:"createMode,omitempty" tf:"create_mode"`

	Edition *string `json:"edition,omitempty" tf:"edition"`

	ElasticPoolName *string `json:"elasticPoolName,omitempty" tf:"elastic_pool_name"`

	ExtendedAuditingPolicy []ExtendedAuditingPolicyParameters `json:"extendedAuditingPolicy,omitempty" tf:"extended_auditing_policy"`

	Import []ImportParameters `json:"import,omitempty" tf:"import"`

	Location string `json:"location" tf:"location"`

	MaxSizeBytes *string `json:"maxSizeBytes,omitempty" tf:"max_size_bytes"`

	MaxSizeGb *string `json:"maxSizeGb,omitempty" tf:"max_size_gb"`

	Name string `json:"name" tf:"name"`

	ReadScale *bool `json:"readScale,omitempty" tf:"read_scale"`

	RequestedServiceObjectiveId *string `json:"requestedServiceObjectiveId,omitempty" tf:"requested_service_objective_id"`

	RequestedServiceObjectiveName *string `json:"requestedServiceObjectiveName,omitempty" tf:"requested_service_objective_name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RestorePointInTime *string `json:"restorePointInTime,omitempty" tf:"restore_point_in_time"`

	ServerName string `json:"serverName" tf:"server_name"`

	SourceDatabaseDeletionDate *string `json:"sourceDatabaseDeletionDate,omitempty" tf:"source_database_deletion_date"`

	SourceDatabaseId *string `json:"sourceDatabaseId,omitempty" tf:"source_database_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	ThreatDetectionPolicy []ThreatDetectionPolicyParameters `json:"threatDetectionPolicy,omitempty" tf:"threat_detection_policy"`

	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant"`
}

type ThreatDetectionPolicyObservation struct {
}

type ThreatDetectionPolicyParameters struct {
	DisabledAlerts []string `json:"disabledAlerts,omitempty" tf:"disabled_alerts"`

	EmailAccountAdmins *string `json:"emailAccountAdmins,omitempty" tf:"email_account_admins"`

	EmailAddresses []string `json:"emailAddresses,omitempty" tf:"email_addresses"`

	RetentionDays *int64 `json:"retentionDays,omitempty" tf:"retention_days"`

	State *string `json:"state,omitempty" tf:"state"`

	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty" tf:"storage_account_access_key"`

	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint"`

	UseServerDefault *string `json:"useServerDefault,omitempty" tf:"use_server_default"`
}

// SqlDatabaseSpec defines the desired state of SqlDatabase
type SqlDatabaseSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SqlDatabaseParameters `json:"forProvider"`
}

// SqlDatabaseStatus defines the observed state of SqlDatabase.
type SqlDatabaseStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SqlDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SqlDatabase is the Schema for the SqlDatabases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SqlDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SqlDatabaseSpec   `json:"spec"`
	Status            SqlDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SqlDatabaseList contains a list of SqlDatabases
type SqlDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlDatabase `json:"items"`
}

// Repository type metadata.
var (
	SqlDatabaseKind             = "SqlDatabase"
	SqlDatabaseGroupKind        = schema.GroupKind{Group: Group, Kind: SqlDatabaseKind}.String()
	SqlDatabaseKindAPIVersion   = SqlDatabaseKind + "." + GroupVersion.String()
	SqlDatabaseGroupVersionKind = GroupVersion.WithKind(SqlDatabaseKind)
)

func init() {
	SchemeBuilder.Register(&SqlDatabase{}, &SqlDatabaseList{})
}
