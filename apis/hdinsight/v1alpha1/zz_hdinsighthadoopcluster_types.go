/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AmbariObservation struct {
}

type AmbariParameters struct {
	DatabaseName string `json:"databaseName" tf:"database_name"`

	Password string `json:"password" tf:"password"`

	Server string `json:"server" tf:"server"`

	Username string `json:"username" tf:"username"`
}

type AutoscaleObservation struct {
}

type AutoscaleParameters struct {
	Capacity []CapacityParameters `json:"capacity,omitempty" tf:"capacity"`

	Recurrence []RecurrenceParameters `json:"recurrence,omitempty" tf:"recurrence"`
}

type CapacityObservation struct {
}

type CapacityParameters struct {
	MaxInstanceCount int64 `json:"maxInstanceCount" tf:"max_instance_count"`

	MinInstanceCount int64 `json:"minInstanceCount" tf:"min_instance_count"`
}

type ComponentVersionObservation struct {
}

type ComponentVersionParameters struct {
	Hadoop string `json:"hadoop" tf:"hadoop"`
}

type EdgeNodeObservation struct {
}

type EdgeNodeParameters struct {
	InstallScriptAction []InstallScriptActionParameters `json:"installScriptAction" tf:"install_script_action"`

	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	VmSize string `json:"vmSize" tf:"vm_size"`
}

type GatewayObservation struct {
}

type GatewayParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type HdinsightHadoopClusterObservation struct {
	HttpsEndpoint string `json:"httpsEndpoint" tf:"https_endpoint"`

	SshEndpoint string `json:"sshEndpoint" tf:"ssh_endpoint"`
}

type HdinsightHadoopClusterParameters struct {
	ClusterVersion string `json:"clusterVersion" tf:"cluster_version"`

	ComponentVersion []ComponentVersionParameters `json:"componentVersion" tf:"component_version"`

	Gateway []GatewayParameters `json:"gateway" tf:"gateway"`

	Location string `json:"location" tf:"location"`

	Metastores []MetastoresParameters `json:"metastores,omitempty" tf:"metastores"`

	Monitor []MonitorParameters `json:"monitor,omitempty" tf:"monitor"`

	Name string `json:"name" tf:"name"`

	Network []NetworkParameters `json:"network,omitempty" tf:"network"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Roles []RolesParameters `json:"roles" tf:"roles"`

	StorageAccount []StorageAccountParameters `json:"storageAccount,omitempty" tf:"storage_account"`

	StorageAccountGen2 []StorageAccountGen2Parameters `json:"storageAccountGen2,omitempty" tf:"storage_account_gen2"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Tier string `json:"tier" tf:"tier"`

	TlsMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version"`
}

type HeadNodeObservation struct {
}

type HeadNodeParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetId *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Username string `json:"username" tf:"username"`

	VirtualNetworkId *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`

	VmSize string `json:"vmSize" tf:"vm_size"`
}

type HiveObservation struct {
}

type HiveParameters struct {
	DatabaseName string `json:"databaseName" tf:"database_name"`

	Password string `json:"password" tf:"password"`

	Server string `json:"server" tf:"server"`

	Username string `json:"username" tf:"username"`
}

type InstallScriptActionObservation struct {
}

type InstallScriptActionParameters struct {
	Name string `json:"name" tf:"name"`

	Uri string `json:"uri" tf:"uri"`
}

type MetastoresObservation struct {
}

type MetastoresParameters struct {
	Ambari []AmbariParameters `json:"ambari,omitempty" tf:"ambari"`

	Hive []HiveParameters `json:"hive,omitempty" tf:"hive"`

	Oozie []OozieParameters `json:"oozie,omitempty" tf:"oozie"`
}

type MonitorObservation struct {
}

type MonitorParameters struct {
	LogAnalyticsWorkspaceId string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id"`

	PrimaryKey string `json:"primaryKey" tf:"primary_key"`
}

type NetworkObservation struct {
}

type NetworkParameters struct {
	ConnectionDirection *string `json:"connectionDirection,omitempty" tf:"connection_direction"`

	PrivateLinkEnabled *bool `json:"privateLinkEnabled,omitempty" tf:"private_link_enabled"`
}

type OozieObservation struct {
}

type OozieParameters struct {
	DatabaseName string `json:"databaseName" tf:"database_name"`

	Password string `json:"password" tf:"password"`

	Server string `json:"server" tf:"server"`

	Username string `json:"username" tf:"username"`
}

type RecurrenceObservation struct {
}

type RecurrenceParameters struct {
	Schedule []ScheduleParameters `json:"schedule" tf:"schedule"`

	Timezone string `json:"timezone" tf:"timezone"`
}

type RolesObservation struct {
}

type RolesParameters struct {
	EdgeNode []EdgeNodeParameters `json:"edgeNode,omitempty" tf:"edge_node"`

	HeadNode []HeadNodeParameters `json:"headNode" tf:"head_node"`

	WorkerNode []WorkerNodeParameters `json:"workerNode" tf:"worker_node"`

	ZookeeperNode []ZookeeperNodeParameters `json:"zookeeperNode" tf:"zookeeper_node"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {
	Days []string `json:"days" tf:"days"`

	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	Time string `json:"time" tf:"time"`
}

type StorageAccountGen2Observation struct {
}

type StorageAccountGen2Parameters struct {
	FilesystemId string `json:"filesystemId" tf:"filesystem_id"`

	IsDefault bool `json:"isDefault" tf:"is_default"`

	ManagedIdentityResourceId string `json:"managedIdentityResourceId" tf:"managed_identity_resource_id"`

	StorageResourceId string `json:"storageResourceId" tf:"storage_resource_id"`
}

type StorageAccountObservation struct {
}

type StorageAccountParameters struct {
	IsDefault bool `json:"isDefault" tf:"is_default"`

	StorageAccountKey string `json:"storageAccountKey" tf:"storage_account_key"`

	StorageContainerId string `json:"storageContainerId" tf:"storage_container_id"`
}

type WorkerNodeObservation struct {
}

type WorkerNodeParameters struct {
	Autoscale []AutoscaleParameters `json:"autoscale,omitempty" tf:"autoscale"`

	MinInstanceCount *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count"`

	Password *string `json:"password,omitempty" tf:"password"`

	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetId *string `json:"subnetId,omitempty" tf:"subnet_id"`

	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	Username string `json:"username" tf:"username"`

	VirtualNetworkId *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`

	VmSize string `json:"vmSize" tf:"vm_size"`
}

type ZookeeperNodeObservation struct {
}

type ZookeeperNodeParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetId *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Username string `json:"username" tf:"username"`

	VirtualNetworkId *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`

	VmSize string `json:"vmSize" tf:"vm_size"`
}

// HdinsightHadoopClusterSpec defines the desired state of HdinsightHadoopCluster
type HdinsightHadoopClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HdinsightHadoopClusterParameters `json:"forProvider"`
}

// HdinsightHadoopClusterStatus defines the observed state of HdinsightHadoopCluster.
type HdinsightHadoopClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HdinsightHadoopClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightHadoopCluster is the Schema for the HdinsightHadoopClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HdinsightHadoopCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HdinsightHadoopClusterSpec   `json:"spec"`
	Status            HdinsightHadoopClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightHadoopClusterList contains a list of HdinsightHadoopClusters
type HdinsightHadoopClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HdinsightHadoopCluster `json:"items"`
}

// Repository type metadata.
var (
	HdinsightHadoopClusterKind             = "HdinsightHadoopCluster"
	HdinsightHadoopClusterGroupKind        = schema.GroupKind{Group: Group, Kind: HdinsightHadoopClusterKind}.String()
	HdinsightHadoopClusterKindAPIVersion   = HdinsightHadoopClusterKind + "." + GroupVersion.String()
	HdinsightHadoopClusterGroupVersionKind = GroupVersion.WithKind(HdinsightHadoopClusterKind)
)

func init() {
	SchemeBuilder.Register(&HdinsightHadoopCluster{}, &HdinsightHadoopClusterList{})
}
