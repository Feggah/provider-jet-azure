/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HdinsightSparkClusterComponentVersionObservation struct {
}

type HdinsightSparkClusterComponentVersionParameters struct {

	// +kubebuilder:validation:Required
	Spark *string `json:"spark" tf:"spark,omitempty"`
}

type HdinsightSparkClusterGatewayObservation struct {
}

type HdinsightSparkClusterGatewayParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type HdinsightSparkClusterMetastoresAmbariObservation struct {
}

type HdinsightSparkClusterMetastoresAmbariParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Server *string `json:"server" tf:"server,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type HdinsightSparkClusterMetastoresHiveObservation struct {
}

type HdinsightSparkClusterMetastoresHiveParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Server *string `json:"server" tf:"server,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type HdinsightSparkClusterMetastoresObservation struct {
}

type HdinsightSparkClusterMetastoresOozieObservation struct {
}

type HdinsightSparkClusterMetastoresOozieParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Server *string `json:"server" tf:"server,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type HdinsightSparkClusterMetastoresParameters struct {

	// +kubebuilder:validation:Optional
	Ambari []HdinsightSparkClusterMetastoresAmbariParameters `json:"ambari,omitempty" tf:"ambari,omitempty"`

	// +kubebuilder:validation:Optional
	Hive []HdinsightSparkClusterMetastoresHiveParameters `json:"hive,omitempty" tf:"hive,omitempty"`

	// +kubebuilder:validation:Optional
	Oozie []HdinsightSparkClusterMetastoresOozieParameters `json:"oozie,omitempty" tf:"oozie,omitempty"`
}

type HdinsightSparkClusterMonitorObservation struct {
}

type HdinsightSparkClusterMonitorParameters struct {

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	PrimaryKeySecretRef v1.SecretKeySelector `json:"primaryKeySecretRef" tf:"-"`
}

type HdinsightSparkClusterNetworkObservation struct {
}

type HdinsightSparkClusterNetworkParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionDirection *string `json:"connectionDirection,omitempty" tf:"connection_direction,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateLinkEnabled *bool `json:"privateLinkEnabled,omitempty" tf:"private_link_enabled,omitempty"`
}

type HdinsightSparkClusterObservation struct {
	HTTPSEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint,omitempty"`

	SSHEndpoint *string `json:"sshEndpoint,omitempty" tf:"ssh_endpoint,omitempty"`
}

type HdinsightSparkClusterParameters struct {

	// +kubebuilder:validation:Required
	ClusterVersion *string `json:"clusterVersion" tf:"cluster_version,omitempty"`

	// +kubebuilder:validation:Required
	ComponentVersion []HdinsightSparkClusterComponentVersionParameters `json:"componentVersion" tf:"component_version,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionInTransitEnabled *bool `json:"encryptionInTransitEnabled,omitempty" tf:"encryption_in_transit_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Gateway []HdinsightSparkClusterGatewayParameters `json:"gateway" tf:"gateway,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	Metastores []HdinsightSparkClusterMetastoresParameters `json:"metastores,omitempty" tf:"metastores,omitempty"`

	// +kubebuilder:validation:Optional
	Monitor []HdinsightSparkClusterMonitorParameters `json:"monitor,omitempty" tf:"monitor,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Network []HdinsightSparkClusterNetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	Roles []HdinsightSparkClusterRolesParameters `json:"roles" tf:"roles,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityProfile []HdinsightSparkClusterSecurityProfileParameters `json:"securityProfile,omitempty" tf:"security_profile,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccount []HdinsightSparkClusterStorageAccountParameters `json:"storageAccount,omitempty" tf:"storage_account,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountGen2 []HdinsightSparkClusterStorageAccountGen2Parameters `json:"storageAccountGen2,omitempty" tf:"storage_account_gen2,omitempty"`

	// +kubebuilder:validation:Optional
	TLSMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	Tier *string `json:"tier" tf:"tier,omitempty"`
}

type HdinsightSparkClusterRolesHeadNodeObservation struct {
}

type HdinsightSparkClusterRolesHeadNodeParameters struct {

	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`

	// +kubebuilder:validation:Required
	VMSize *string `json:"vmSize" tf:"vm_size,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type HdinsightSparkClusterRolesObservation struct {
}

type HdinsightSparkClusterRolesParameters struct {

	// +kubebuilder:validation:Required
	HeadNode []HdinsightSparkClusterRolesHeadNodeParameters `json:"headNode" tf:"head_node,omitempty"`

	// +kubebuilder:validation:Required
	WorkerNode []HdinsightSparkClusterRolesWorkerNodeParameters `json:"workerNode" tf:"worker_node,omitempty"`

	// +kubebuilder:validation:Required
	ZookeeperNode []HdinsightSparkClusterRolesZookeeperNodeParameters `json:"zookeeperNode" tf:"zookeeper_node,omitempty"`
}

type HdinsightSparkClusterRolesWorkerNodeAutoscaleObservation struct {
}

type HdinsightSparkClusterRolesWorkerNodeAutoscaleParameters struct {

	// +kubebuilder:validation:Optional
	Capacity []WorkerNodeAutoscaleCapacityParameters `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// +kubebuilder:validation:Optional
	Recurrence []RolesWorkerNodeAutoscaleRecurrenceParameters `json:"recurrence,omitempty" tf:"recurrence,omitempty"`
}

type HdinsightSparkClusterRolesWorkerNodeObservation struct {
}

type HdinsightSparkClusterRolesWorkerNodeParameters struct {

	// +kubebuilder:validation:Optional
	Autoscale []HdinsightSparkClusterRolesWorkerNodeAutoscaleParameters `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// +kubebuilder:validation:Optional
	MinInstanceCount *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Required
	TargetInstanceCount *int64 `json:"targetInstanceCount" tf:"target_instance_count,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`

	// +kubebuilder:validation:Required
	VMSize *string `json:"vmSize" tf:"vm_size,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type HdinsightSparkClusterRolesZookeeperNodeObservation struct {
}

type HdinsightSparkClusterRolesZookeeperNodeParameters struct {

	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SSHKeys []*string `json:"sshKeys,omitempty" tf:"ssh_keys,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`

	// +kubebuilder:validation:Required
	VMSize *string `json:"vmSize" tf:"vm_size,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type HdinsightSparkClusterSecurityProfileObservation struct {
}

type HdinsightSparkClusterSecurityProfileParameters struct {

	// +kubebuilder:validation:Required
	AaddsResourceID *string `json:"aaddsResourceId" tf:"aadds_resource_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterUsersGroupDNS []*string `json:"clusterUsersGroupDns,omitempty" tf:"cluster_users_group_dns,omitempty"`

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// +kubebuilder:validation:Required
	DomainUserPasswordSecretRef v1.SecretKeySelector `json:"domainUserPasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	DomainUsername *string `json:"domainUsername" tf:"domain_username,omitempty"`

	// +kubebuilder:validation:Required
	LdapsUrls []*string `json:"ldapsUrls" tf:"ldaps_urls,omitempty"`

	// +kubebuilder:validation:Required
	MsiResourceID *string `json:"msiResourceId" tf:"msi_resource_id,omitempty"`
}

type HdinsightSparkClusterStorageAccountGen2Observation struct {
}

type HdinsightSparkClusterStorageAccountGen2Parameters struct {

	// +kubebuilder:validation:Required
	FilesystemID *string `json:"filesystemId" tf:"filesystem_id,omitempty"`

	// +kubebuilder:validation:Required
	IsDefault *bool `json:"isDefault" tf:"is_default,omitempty"`

	// +kubebuilder:validation:Required
	ManagedIdentityResourceID *string `json:"managedIdentityResourceId" tf:"managed_identity_resource_id,omitempty"`

	// +kubebuilder:validation:Required
	StorageResourceID *string `json:"storageResourceId" tf:"storage_resource_id,omitempty"`
}

type HdinsightSparkClusterStorageAccountObservation struct {
}

type HdinsightSparkClusterStorageAccountParameters struct {

	// +kubebuilder:validation:Required
	IsDefault *bool `json:"isDefault" tf:"is_default,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountKeySecretRef v1.SecretKeySelector `json:"storageAccountKeySecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	StorageContainerID *string `json:"storageContainerId" tf:"storage_container_id,omitempty"`
}

type RolesWorkerNodeAutoscaleRecurrenceObservation struct {
}

type RolesWorkerNodeAutoscaleRecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Schedule []WorkerNodeAutoscaleRecurrenceScheduleParameters `json:"schedule" tf:"schedule,omitempty"`

	// +kubebuilder:validation:Required
	Timezone *string `json:"timezone" tf:"timezone,omitempty"`
}

type WorkerNodeAutoscaleCapacityObservation struct {
}

type WorkerNodeAutoscaleCapacityParameters struct {

	// +kubebuilder:validation:Required
	MaxInstanceCount *int64 `json:"maxInstanceCount" tf:"max_instance_count,omitempty"`

	// +kubebuilder:validation:Required
	MinInstanceCount *int64 `json:"minInstanceCount" tf:"min_instance_count,omitempty"`
}

type WorkerNodeAutoscaleRecurrenceScheduleObservation struct {
}

type WorkerNodeAutoscaleRecurrenceScheduleParameters struct {

	// +kubebuilder:validation:Required
	Days []*string `json:"days" tf:"days,omitempty"`

	// +kubebuilder:validation:Required
	TargetInstanceCount *int64 `json:"targetInstanceCount" tf:"target_instance_count,omitempty"`

	// +kubebuilder:validation:Required
	Time *string `json:"time" tf:"time,omitempty"`
}

// HdinsightSparkClusterSpec defines the desired state of HdinsightSparkCluster
type HdinsightSparkClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HdinsightSparkClusterParameters `json:"forProvider"`
}

// HdinsightSparkClusterStatus defines the observed state of HdinsightSparkCluster.
type HdinsightSparkClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HdinsightSparkClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightSparkCluster is the Schema for the HdinsightSparkClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HdinsightSparkCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HdinsightSparkClusterSpec   `json:"spec"`
	Status            HdinsightSparkClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightSparkClusterList contains a list of HdinsightSparkClusters
type HdinsightSparkClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HdinsightSparkCluster `json:"items"`
}

// Repository type metadata.
var (
	HdinsightSparkClusterKind             = "HdinsightSparkCluster"
	HdinsightSparkClusterGroupKind        = schema.GroupKind{Group: Group, Kind: HdinsightSparkClusterKind}.String()
	HdinsightSparkClusterKindAPIVersion   = HdinsightSparkClusterKind + "." + GroupVersion.String()
	HdinsightSparkClusterGroupVersionKind = GroupVersion.WithKind(HdinsightSparkClusterKind)
)

func init() {
	SchemeBuilder.Register(&HdinsightSparkCluster{}, &HdinsightSparkClusterList{})
}
