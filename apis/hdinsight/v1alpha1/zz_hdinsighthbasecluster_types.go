/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutoscaleRecurrenceObservation struct {
}

type AutoscaleRecurrenceParameters struct {
	Schedule []RecurrenceScheduleParameters `json:"schedule" tf:"schedule"`

	Timezone string `json:"timezone" tf:"timezone"`
}

type HdinsightHbaseClusterComponentVersionObservation struct {
}

type HdinsightHbaseClusterComponentVersionParameters struct {
	Hbase string `json:"hbase" tf:"hbase"`
}

type HdinsightHbaseClusterGatewayObservation struct {
}

type HdinsightHbaseClusterGatewayParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type HdinsightHbaseClusterMetastoresObservation struct {
}

type HdinsightHbaseClusterMetastoresParameters struct {
	Ambari []MetastoresAmbariParameters `json:"ambari,omitempty" tf:"ambari"`

	Hive []MetastoresHiveParameters `json:"hive,omitempty" tf:"hive"`

	Oozie []MetastoresOozieParameters `json:"oozie,omitempty" tf:"oozie"`
}

type HdinsightHbaseClusterMonitorObservation struct {
}

type HdinsightHbaseClusterMonitorParameters struct {
	LogAnalyticsWorkspaceId string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id"`

	PrimaryKey string `json:"primaryKey" tf:"primary_key"`
}

type HdinsightHbaseClusterObservation struct {
	HttpsEndpoint string `json:"httpsEndpoint" tf:"https_endpoint"`

	SshEndpoint string `json:"sshEndpoint" tf:"ssh_endpoint"`
}

type HdinsightHbaseClusterParameters struct {
	ClusterVersion string `json:"clusterVersion" tf:"cluster_version"`

	ComponentVersion []HdinsightHbaseClusterComponentVersionParameters `json:"componentVersion" tf:"component_version"`

	Gateway []HdinsightHbaseClusterGatewayParameters `json:"gateway" tf:"gateway"`

	Location string `json:"location" tf:"location"`

	Metastores []HdinsightHbaseClusterMetastoresParameters `json:"metastores,omitempty" tf:"metastores"`

	Monitor []HdinsightHbaseClusterMonitorParameters `json:"monitor,omitempty" tf:"monitor"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Roles []HdinsightHbaseClusterRolesParameters `json:"roles" tf:"roles"`

	StorageAccount []HdinsightHbaseClusterStorageAccountParameters `json:"storageAccount,omitempty" tf:"storage_account"`

	StorageAccountGen2 []HdinsightHbaseClusterStorageAccountGen2Parameters `json:"storageAccountGen2,omitempty" tf:"storage_account_gen2"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Tier string `json:"tier" tf:"tier"`

	TlsMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version"`
}

type HdinsightHbaseClusterRolesObservation struct {
}

type HdinsightHbaseClusterRolesParameters struct {
	HeadNode []RolesHeadNodeParameters `json:"headNode" tf:"head_node"`

	WorkerNode []RolesWorkerNodeParameters `json:"workerNode" tf:"worker_node"`

	ZookeeperNode []RolesZookeeperNodeParameters `json:"zookeeperNode" tf:"zookeeper_node"`
}

type HdinsightHbaseClusterStorageAccountGen2Observation struct {
}

type HdinsightHbaseClusterStorageAccountGen2Parameters struct {
	FilesystemId string `json:"filesystemId" tf:"filesystem_id"`

	IsDefault bool `json:"isDefault" tf:"is_default"`

	ManagedIdentityResourceId string `json:"managedIdentityResourceId" tf:"managed_identity_resource_id"`

	StorageResourceId string `json:"storageResourceId" tf:"storage_resource_id"`
}

type HdinsightHbaseClusterStorageAccountObservation struct {
}

type HdinsightHbaseClusterStorageAccountParameters struct {
	IsDefault bool `json:"isDefault" tf:"is_default"`

	StorageAccountKey string `json:"storageAccountKey" tf:"storage_account_key"`

	StorageContainerId string `json:"storageContainerId" tf:"storage_container_id"`
}

type MetastoresAmbariObservation struct {
}

type MetastoresAmbariParameters struct {
	DatabaseName string `json:"databaseName" tf:"database_name"`

	Password string `json:"password" tf:"password"`

	Server string `json:"server" tf:"server"`

	Username string `json:"username" tf:"username"`
}

type MetastoresHiveObservation struct {
}

type MetastoresHiveParameters struct {
	DatabaseName string `json:"databaseName" tf:"database_name"`

	Password string `json:"password" tf:"password"`

	Server string `json:"server" tf:"server"`

	Username string `json:"username" tf:"username"`
}

type MetastoresOozieObservation struct {
}

type MetastoresOozieParameters struct {
	DatabaseName string `json:"databaseName" tf:"database_name"`

	Password string `json:"password" tf:"password"`

	Server string `json:"server" tf:"server"`

	Username string `json:"username" tf:"username"`
}

type RecurrenceScheduleObservation struct {
}

type RecurrenceScheduleParameters struct {
	Days []string `json:"days" tf:"days"`

	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	Time string `json:"time" tf:"time"`
}

type RolesHeadNodeObservation struct {
}

type RolesHeadNodeParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetId *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Username string `json:"username" tf:"username"`

	VirtualNetworkId *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`

	VmSize string `json:"vmSize" tf:"vm_size"`
}

type RolesWorkerNodeObservation struct {
}

type RolesWorkerNodeParameters struct {
	Autoscale []WorkerNodeAutoscaleParameters `json:"autoscale,omitempty" tf:"autoscale"`

	MinInstanceCount *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count"`

	Password *string `json:"password,omitempty" tf:"password"`

	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetId *string `json:"subnetId,omitempty" tf:"subnet_id"`

	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	Username string `json:"username" tf:"username"`

	VirtualNetworkId *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`

	VmSize string `json:"vmSize" tf:"vm_size"`
}

type RolesZookeeperNodeObservation struct {
}

type RolesZookeeperNodeParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetId *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Username string `json:"username" tf:"username"`

	VirtualNetworkId *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`

	VmSize string `json:"vmSize" tf:"vm_size"`
}

type WorkerNodeAutoscaleObservation struct {
}

type WorkerNodeAutoscaleParameters struct {
	Recurrence []AutoscaleRecurrenceParameters `json:"recurrence,omitempty" tf:"recurrence"`
}

// HdinsightHbaseClusterSpec defines the desired state of HdinsightHbaseCluster
type HdinsightHbaseClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HdinsightHbaseClusterParameters `json:"forProvider"`
}

// HdinsightHbaseClusterStatus defines the observed state of HdinsightHbaseCluster.
type HdinsightHbaseClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HdinsightHbaseClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightHbaseCluster is the Schema for the HdinsightHbaseClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HdinsightHbaseCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HdinsightHbaseClusterSpec   `json:"spec"`
	Status            HdinsightHbaseClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightHbaseClusterList contains a list of HdinsightHbaseClusters
type HdinsightHbaseClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HdinsightHbaseCluster `json:"items"`
}

// Repository type metadata.
var (
	HdinsightHbaseClusterKind             = "HdinsightHbaseCluster"
	HdinsightHbaseClusterGroupKind        = schema.GroupKind{Group: Group, Kind: HdinsightHbaseClusterKind}.String()
	HdinsightHbaseClusterKindAPIVersion   = HdinsightHbaseClusterKind + "." + GroupVersion.String()
	HdinsightHbaseClusterGroupVersionKind = GroupVersion.WithKind(HdinsightHbaseClusterKind)
)

func init() {
	SchemeBuilder.Register(&HdinsightHbaseCluster{}, &HdinsightHbaseClusterList{})
}
