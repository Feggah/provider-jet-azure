/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type HdinsightMlServicesClusterGatewayObservation struct {
}

type HdinsightMlServicesClusterGatewayParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type HdinsightMlServicesClusterObservation struct {
	EdgeSSHEndpoint string `json:"edgeSshEndpoint" tf:"edge_ssh_endpoint"`

	HTTPSEndpoint string `json:"httpsEndpoint" tf:"https_endpoint"`

	SSHEndpoint string `json:"sshEndpoint" tf:"ssh_endpoint"`
}

type HdinsightMlServicesClusterParameters struct {
	ClusterVersion string `json:"clusterVersion" tf:"cluster_version"`

	Gateway []HdinsightMlServicesClusterGatewayParameters `json:"gateway" tf:"gateway"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Roles []HdinsightMlServicesClusterRolesParameters `json:"roles" tf:"roles"`

	Rstudio bool `json:"rstudio" tf:"rstudio"`

	StorageAccount []HdinsightMlServicesClusterStorageAccountParameters `json:"storageAccount,omitempty" tf:"storage_account"`

	TLSMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Tier string `json:"tier" tf:"tier"`
}

type HdinsightMlServicesClusterRolesHeadNodeObservation struct {
}

type HdinsightMlServicesClusterRolesHeadNodeParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Username string `json:"username" tf:"username"`

	VMSize string `json:"vmSize" tf:"vm_size"`

	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightMlServicesClusterRolesObservation struct {
}

type HdinsightMlServicesClusterRolesParameters struct {
	EdgeNode []RolesEdgeNodeParameters `json:"edgeNode" tf:"edge_node"`

	HeadNode []HdinsightMlServicesClusterRolesHeadNodeParameters `json:"headNode" tf:"head_node"`

	WorkerNode []HdinsightMlServicesClusterRolesWorkerNodeParameters `json:"workerNode" tf:"worker_node"`

	ZookeeperNode []HdinsightMlServicesClusterRolesZookeeperNodeParameters `json:"zookeeperNode" tf:"zookeeper_node"`
}

type HdinsightMlServicesClusterRolesWorkerNodeObservation struct {
}

type HdinsightMlServicesClusterRolesWorkerNodeParameters struct {
	MinInstanceCount *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count"`

	Password *string `json:"password,omitempty" tf:"password"`

	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	Username string `json:"username" tf:"username"`

	VMSize string `json:"vmSize" tf:"vm_size"`

	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightMlServicesClusterRolesZookeeperNodeObservation struct {
}

type HdinsightMlServicesClusterRolesZookeeperNodeParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Username string `json:"username" tf:"username"`

	VMSize string `json:"vmSize" tf:"vm_size"`

	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightMlServicesClusterStorageAccountObservation struct {
}

type HdinsightMlServicesClusterStorageAccountParameters struct {
	IsDefault bool `json:"isDefault" tf:"is_default"`

	StorageAccountKey string `json:"storageAccountKey" tf:"storage_account_key"`

	StorageContainerID string `json:"storageContainerId" tf:"storage_container_id"`
}

type RolesEdgeNodeObservation struct {
}

type RolesEdgeNodeParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Username string `json:"username" tf:"username"`

	VMSize string `json:"vmSize" tf:"vm_size"`

	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

// HdinsightMlServicesClusterSpec defines the desired state of HdinsightMlServicesCluster
type HdinsightMlServicesClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HdinsightMlServicesClusterParameters `json:"forProvider"`
}

// HdinsightMlServicesClusterStatus defines the observed state of HdinsightMlServicesCluster.
type HdinsightMlServicesClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HdinsightMlServicesClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightMlServicesCluster is the Schema for the HdinsightMlServicesClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HdinsightMlServicesCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HdinsightMlServicesClusterSpec   `json:"spec"`
	Status            HdinsightMlServicesClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightMlServicesClusterList contains a list of HdinsightMlServicesClusters
type HdinsightMlServicesClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HdinsightMlServicesCluster `json:"items"`
}

// Repository type metadata.
var (
	HdinsightMlServicesClusterKind             = "HdinsightMlServicesCluster"
	HdinsightMlServicesClusterGroupKind        = schema.GroupKind{Group: Group, Kind: HdinsightMlServicesClusterKind}.String()
	HdinsightMlServicesClusterKindAPIVersion   = HdinsightMlServicesClusterKind + "." + GroupVersion.String()
	HdinsightMlServicesClusterGroupVersionKind = GroupVersion.WithKind(HdinsightMlServicesClusterKind)
)

func init() {
	SchemeBuilder.Register(&HdinsightMlServicesCluster{}, &HdinsightMlServicesClusterList{})
}
