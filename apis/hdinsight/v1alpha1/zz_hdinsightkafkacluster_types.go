/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type HdinsightKafkaClusterComponentVersionObservation struct {
}

type HdinsightKafkaClusterComponentVersionParameters struct {
	Kafka string `json:"kafka" tf:"kafka"`
}

type HdinsightKafkaClusterGatewayObservation struct {
}

type HdinsightKafkaClusterGatewayParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type HdinsightKafkaClusterMetastoresAmbariObservation struct {
}

type HdinsightKafkaClusterMetastoresAmbariParameters struct {
	DatabaseName string `json:"databaseName" tf:"database_name"`

	Password string `json:"password" tf:"password"`

	Server string `json:"server" tf:"server"`

	Username string `json:"username" tf:"username"`
}

type HdinsightKafkaClusterMetastoresHiveObservation struct {
}

type HdinsightKafkaClusterMetastoresHiveParameters struct {
	DatabaseName string `json:"databaseName" tf:"database_name"`

	Password string `json:"password" tf:"password"`

	Server string `json:"server" tf:"server"`

	Username string `json:"username" tf:"username"`
}

type HdinsightKafkaClusterMetastoresObservation struct {
}

type HdinsightKafkaClusterMetastoresOozieObservation struct {
}

type HdinsightKafkaClusterMetastoresOozieParameters struct {
	DatabaseName string `json:"databaseName" tf:"database_name"`

	Password string `json:"password" tf:"password"`

	Server string `json:"server" tf:"server"`

	Username string `json:"username" tf:"username"`
}

type HdinsightKafkaClusterMetastoresParameters struct {
	Ambari []HdinsightKafkaClusterMetastoresAmbariParameters `json:"ambari,omitempty" tf:"ambari"`

	Hive []HdinsightKafkaClusterMetastoresHiveParameters `json:"hive,omitempty" tf:"hive"`

	Oozie []HdinsightKafkaClusterMetastoresOozieParameters `json:"oozie,omitempty" tf:"oozie"`
}

type HdinsightKafkaClusterMonitorObservation struct {
}

type HdinsightKafkaClusterMonitorParameters struct {
	LogAnalyticsWorkspaceID string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id"`

	PrimaryKey string `json:"primaryKey" tf:"primary_key"`
}

type HdinsightKafkaClusterObservation struct {
	HTTPSEndpoint string `json:"httpsEndpoint" tf:"https_endpoint"`

	KafkaRestProxyEndpoint string `json:"kafkaRestProxyEndpoint" tf:"kafka_rest_proxy_endpoint"`

	SSHEndpoint string `json:"sshEndpoint" tf:"ssh_endpoint"`
}

type HdinsightKafkaClusterParameters struct {
	ClusterVersion string `json:"clusterVersion" tf:"cluster_version"`

	ComponentVersion []HdinsightKafkaClusterComponentVersionParameters `json:"componentVersion" tf:"component_version"`

	EncryptionInTransitEnabled *bool `json:"encryptionInTransitEnabled,omitempty" tf:"encryption_in_transit_enabled"`

	Gateway []HdinsightKafkaClusterGatewayParameters `json:"gateway" tf:"gateway"`

	Location string `json:"location" tf:"location"`

	Metastores []HdinsightKafkaClusterMetastoresParameters `json:"metastores,omitempty" tf:"metastores"`

	Monitor []HdinsightKafkaClusterMonitorParameters `json:"monitor,omitempty" tf:"monitor"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RestProxy []RestProxyParameters `json:"restProxy,omitempty" tf:"rest_proxy"`

	Roles []HdinsightKafkaClusterRolesParameters `json:"roles" tf:"roles"`

	StorageAccount []HdinsightKafkaClusterStorageAccountParameters `json:"storageAccount,omitempty" tf:"storage_account"`

	StorageAccountGen2 []HdinsightKafkaClusterStorageAccountGen2Parameters `json:"storageAccountGen2,omitempty" tf:"storage_account_gen2"`

	TLSMinVersion *string `json:"tlsMinVersion,omitempty" tf:"tls_min_version"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Tier string `json:"tier" tf:"tier"`
}

type HdinsightKafkaClusterRolesHeadNodeObservation struct {
}

type HdinsightKafkaClusterRolesHeadNodeParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Username string `json:"username" tf:"username"`

	VMSize string `json:"vmSize" tf:"vm_size"`

	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightKafkaClusterRolesObservation struct {
}

type HdinsightKafkaClusterRolesParameters struct {
	HeadNode []HdinsightKafkaClusterRolesHeadNodeParameters `json:"headNode" tf:"head_node"`

	KafkaManagementNode []KafkaManagementNodeParameters `json:"kafkaManagementNode,omitempty" tf:"kafka_management_node"`

	WorkerNode []HdinsightKafkaClusterRolesWorkerNodeParameters `json:"workerNode" tf:"worker_node"`

	ZookeeperNode []HdinsightKafkaClusterRolesZookeeperNodeParameters `json:"zookeeperNode" tf:"zookeeper_node"`
}

type HdinsightKafkaClusterRolesWorkerNodeObservation struct {
}

type HdinsightKafkaClusterRolesWorkerNodeParameters struct {
	MinInstanceCount *int64 `json:"minInstanceCount,omitempty" tf:"min_instance_count"`

	NumberOfDisksPerNode int64 `json:"numberOfDisksPerNode" tf:"number_of_disks_per_node"`

	Password *string `json:"password,omitempty" tf:"password"`

	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	TargetInstanceCount int64 `json:"targetInstanceCount" tf:"target_instance_count"`

	Username string `json:"username" tf:"username"`

	VMSize string `json:"vmSize" tf:"vm_size"`

	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightKafkaClusterRolesZookeeperNodeObservation struct {
}

type HdinsightKafkaClusterRolesZookeeperNodeParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Username string `json:"username" tf:"username"`

	VMSize string `json:"vmSize" tf:"vm_size"`

	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type HdinsightKafkaClusterStorageAccountGen2Observation struct {
}

type HdinsightKafkaClusterStorageAccountGen2Parameters struct {
	FilesystemID string `json:"filesystemId" tf:"filesystem_id"`

	IsDefault bool `json:"isDefault" tf:"is_default"`

	ManagedIdentityResourceID string `json:"managedIdentityResourceId" tf:"managed_identity_resource_id"`

	StorageResourceID string `json:"storageResourceId" tf:"storage_resource_id"`
}

type HdinsightKafkaClusterStorageAccountObservation struct {
}

type HdinsightKafkaClusterStorageAccountParameters struct {
	IsDefault bool `json:"isDefault" tf:"is_default"`

	StorageAccountKey string `json:"storageAccountKey" tf:"storage_account_key"`

	StorageContainerID string `json:"storageContainerId" tf:"storage_container_id"`
}

type KafkaManagementNodeObservation struct {
}

type KafkaManagementNodeParameters struct {
	Password *string `json:"password,omitempty" tf:"password"`

	SSHKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Username string `json:"username" tf:"username"`

	VMSize string `json:"vmSize" tf:"vm_size"`

	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`
}

type RestProxyObservation struct {
}

type RestProxyParameters struct {
	SecurityGroupID string `json:"securityGroupId" tf:"security_group_id"`
}

// HdinsightKafkaClusterSpec defines the desired state of HdinsightKafkaCluster
type HdinsightKafkaClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HdinsightKafkaClusterParameters `json:"forProvider"`
}

// HdinsightKafkaClusterStatus defines the observed state of HdinsightKafkaCluster.
type HdinsightKafkaClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HdinsightKafkaClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightKafkaCluster is the Schema for the HdinsightKafkaClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HdinsightKafkaCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HdinsightKafkaClusterSpec   `json:"spec"`
	Status            HdinsightKafkaClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HdinsightKafkaClusterList contains a list of HdinsightKafkaClusters
type HdinsightKafkaClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HdinsightKafkaCluster `json:"items"`
}

// Repository type metadata.
var (
	HdinsightKafkaClusterKind             = "HdinsightKafkaCluster"
	HdinsightKafkaClusterGroupKind        = schema.GroupKind{Group: Group, Kind: HdinsightKafkaClusterKind}.String()
	HdinsightKafkaClusterKindAPIVersion   = HdinsightKafkaClusterKind + "." + GroupVersion.String()
	HdinsightKafkaClusterGroupVersionKind = GroupVersion.WithKind(HdinsightKafkaClusterKind)
)

func init() {
	SchemeBuilder.Register(&HdinsightKafkaCluster{}, &HdinsightKafkaClusterList{})
}
