/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ExpressRouteCircuitPeeringObservation struct {
	AzureAsn int64 `json:"azureAsn" tf:"azure_asn"`

	PrimaryAzurePort string `json:"primaryAzurePort" tf:"primary_azure_port"`

	SecondaryAzurePort string `json:"secondaryAzurePort" tf:"secondary_azure_port"`
}

type ExpressRouteCircuitPeeringParameters struct {
	ExpressRouteCircuitName string `json:"expressRouteCircuitName" tf:"express_route_circuit_name"`

	Ipv6 []Ipv6Parameters `json:"ipv6,omitempty" tf:"ipv6"`

	MicrosoftPeeringConfig []MicrosoftPeeringConfigParameters `json:"microsoftPeeringConfig,omitempty" tf:"microsoft_peering_config"`

	PeerAsn *int64 `json:"peerAsn,omitempty" tf:"peer_asn"`

	PeeringType string `json:"peeringType" tf:"peering_type"`

	PrimaryPeerAddressPrefix string `json:"primaryPeerAddressPrefix" tf:"primary_peer_address_prefix"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RouteFilterId *string `json:"routeFilterId,omitempty" tf:"route_filter_id"`

	SecondaryPeerAddressPrefix string `json:"secondaryPeerAddressPrefix" tf:"secondary_peer_address_prefix"`

	SharedKey *string `json:"sharedKey,omitempty" tf:"shared_key"`

	VlanId int64 `json:"vlanId" tf:"vlan_id"`
}

type Ipv6Observation struct {
}

type Ipv6Parameters struct {
	MicrosoftPeering []MicrosoftPeeringParameters `json:"microsoftPeering" tf:"microsoft_peering"`

	PrimaryPeerAddressPrefix string `json:"primaryPeerAddressPrefix" tf:"primary_peer_address_prefix"`

	RouteFilterId *string `json:"routeFilterId,omitempty" tf:"route_filter_id"`

	SecondaryPeerAddressPrefix string `json:"secondaryPeerAddressPrefix" tf:"secondary_peer_address_prefix"`
}

type MicrosoftPeeringConfigObservation struct {
}

type MicrosoftPeeringConfigParameters struct {
	AdvertisedPublicPrefixes []string `json:"advertisedPublicPrefixes" tf:"advertised_public_prefixes"`

	CustomerAsn *int64 `json:"customerAsn,omitempty" tf:"customer_asn"`

	RoutingRegistryName *string `json:"routingRegistryName,omitempty" tf:"routing_registry_name"`
}

type MicrosoftPeeringObservation struct {
}

type MicrosoftPeeringParameters struct {
	AdvertisedPublicPrefixes []string `json:"advertisedPublicPrefixes,omitempty" tf:"advertised_public_prefixes"`

	CustomerAsn *int64 `json:"customerAsn,omitempty" tf:"customer_asn"`

	RoutingRegistryName *string `json:"routingRegistryName,omitempty" tf:"routing_registry_name"`
}

// ExpressRouteCircuitPeeringSpec defines the desired state of ExpressRouteCircuitPeering
type ExpressRouteCircuitPeeringSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ExpressRouteCircuitPeeringParameters `json:"forProvider"`
}

// ExpressRouteCircuitPeeringStatus defines the observed state of ExpressRouteCircuitPeering.
type ExpressRouteCircuitPeeringStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ExpressRouteCircuitPeeringObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ExpressRouteCircuitPeering is the Schema for the ExpressRouteCircuitPeerings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ExpressRouteCircuitPeering struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExpressRouteCircuitPeeringSpec   `json:"spec"`
	Status            ExpressRouteCircuitPeeringStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExpressRouteCircuitPeeringList contains a list of ExpressRouteCircuitPeerings
type ExpressRouteCircuitPeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExpressRouteCircuitPeering `json:"items"`
}

// Repository type metadata.
var (
	ExpressRouteCircuitPeeringKind             = "ExpressRouteCircuitPeering"
	ExpressRouteCircuitPeeringGroupKind        = schema.GroupKind{Group: Group, Kind: ExpressRouteCircuitPeeringKind}.String()
	ExpressRouteCircuitPeeringKindAPIVersion   = ExpressRouteCircuitPeeringKind + "." + GroupVersion.String()
	ExpressRouteCircuitPeeringGroupVersionKind = GroupVersion.WithKind(ExpressRouteCircuitPeeringKind)
)

func init() {
	SchemeBuilder.Register(&ExpressRouteCircuitPeering{}, &ExpressRouteCircuitPeeringList{})
}
