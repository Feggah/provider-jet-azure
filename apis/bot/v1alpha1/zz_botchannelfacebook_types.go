/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BotChannelFacebookObservation struct {
}

type BotChannelFacebookParameters struct {
	BotName string `json:"botName" tf:"bot_name"`

	FacebookApplicationId string `json:"facebookApplicationId" tf:"facebook_application_id"`

	FacebookApplicationSecret string `json:"facebookApplicationSecret" tf:"facebook_application_secret"`

	Location string `json:"location" tf:"location"`

	Page []PageParameters `json:"page" tf:"page"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`
}

type PageObservation struct {
}

type PageParameters struct {
	AccessToken string `json:"accessToken" tf:"access_token"`

	Id string `json:"id" tf:"id"`
}

// BotChannelFacebookSpec defines the desired state of BotChannelFacebook
type BotChannelFacebookSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BotChannelFacebookParameters `json:"forProvider"`
}

// BotChannelFacebookStatus defines the observed state of BotChannelFacebook.
type BotChannelFacebookStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BotChannelFacebookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelFacebook is the Schema for the BotChannelFacebooks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BotChannelFacebook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BotChannelFacebookSpec   `json:"spec"`
	Status            BotChannelFacebookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotChannelFacebookList contains a list of BotChannelFacebooks
type BotChannelFacebookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BotChannelFacebook `json:"items"`
}

// Repository type metadata.
var (
	BotChannelFacebookKind             = "BotChannelFacebook"
	BotChannelFacebookGroupKind        = schema.GroupKind{Group: Group, Kind: BotChannelFacebookKind}.String()
	BotChannelFacebookKindAPIVersion   = BotChannelFacebookKind + "." + GroupVersion.String()
	BotChannelFacebookGroupVersionKind = GroupVersion.WithKind(BotChannelFacebookKind)
)

func init() {
	SchemeBuilder.Register(&BotChannelFacebook{}, &BotChannelFacebookList{})
}
