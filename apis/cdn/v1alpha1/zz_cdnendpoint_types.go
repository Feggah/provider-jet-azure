/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CacheExpirationActionObservation struct {
}

type CacheExpirationActionParameters struct {
	Behavior string `json:"behavior" tf:"behavior"`

	Duration *string `json:"duration,omitempty" tf:"duration"`
}

type CacheKeyQueryStringActionObservation struct {
}

type CacheKeyQueryStringActionParameters struct {
	Behavior string `json:"behavior" tf:"behavior"`

	Parameters *string `json:"parameters,omitempty" tf:"parameters"`
}

type CdnEndpointObservation struct {
	HostName string `json:"hostName" tf:"host_name"`
}

type CdnEndpointParameters struct {
	ContentTypesToCompress []string `json:"contentTypesToCompress,omitempty" tf:"content_types_to_compress"`

	DeliveryRule []DeliveryRuleParameters `json:"deliveryRule,omitempty" tf:"delivery_rule"`

	GeoFilter []GeoFilterParameters `json:"geoFilter,omitempty" tf:"geo_filter"`

	GlobalDeliveryRule []GlobalDeliveryRuleParameters `json:"globalDeliveryRule,omitempty" tf:"global_delivery_rule"`

	IsCompressionEnabled *bool `json:"isCompressionEnabled,omitempty" tf:"is_compression_enabled"`

	IsHttpAllowed *bool `json:"isHttpAllowed,omitempty" tf:"is_http_allowed"`

	IsHttpsAllowed *bool `json:"isHttpsAllowed,omitempty" tf:"is_https_allowed"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	OptimizationType *string `json:"optimizationType,omitempty" tf:"optimization_type"`

	Origin []OriginParameters `json:"origin" tf:"origin"`

	OriginHostHeader *string `json:"originHostHeader,omitempty" tf:"origin_host_header"`

	OriginPath *string `json:"originPath,omitempty" tf:"origin_path"`

	ProbePath *string `json:"probePath,omitempty" tf:"probe_path"`

	ProfileName string `json:"profileName" tf:"profile_name"`

	QuerystringCachingBehaviour *string `json:"querystringCachingBehaviour,omitempty" tf:"querystring_caching_behaviour"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type CookiesConditionObservation struct {
}

type CookiesConditionParameters struct {
	MatchValues []string `json:"matchValues,omitempty" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator string `json:"operator" tf:"operator"`

	Selector string `json:"selector" tf:"selector"`

	Transforms []string `json:"transforms,omitempty" tf:"transforms"`
}

type DeliveryRuleObservation struct {
}

type DeliveryRuleParameters struct {
	CacheExpirationAction []CacheExpirationActionParameters `json:"cacheExpirationAction,omitempty" tf:"cache_expiration_action"`

	CacheKeyQueryStringAction []CacheKeyQueryStringActionParameters `json:"cacheKeyQueryStringAction,omitempty" tf:"cache_key_query_string_action"`

	CookiesCondition []CookiesConditionParameters `json:"cookiesCondition,omitempty" tf:"cookies_condition"`

	DeviceCondition []DeviceConditionParameters `json:"deviceCondition,omitempty" tf:"device_condition"`

	HttpVersionCondition []HttpVersionConditionParameters `json:"httpVersionCondition,omitempty" tf:"http_version_condition"`

	ModifyRequestHeaderAction []ModifyRequestHeaderActionParameters `json:"modifyRequestHeaderAction,omitempty" tf:"modify_request_header_action"`

	ModifyResponseHeaderAction []ModifyResponseHeaderActionParameters `json:"modifyResponseHeaderAction,omitempty" tf:"modify_response_header_action"`

	Name string `json:"name" tf:"name"`

	Order int64 `json:"order" tf:"order"`

	PostArgCondition []PostArgConditionParameters `json:"postArgCondition,omitempty" tf:"post_arg_condition"`

	QueryStringCondition []QueryStringConditionParameters `json:"queryStringCondition,omitempty" tf:"query_string_condition"`

	RemoteAddressCondition []RemoteAddressConditionParameters `json:"remoteAddressCondition,omitempty" tf:"remote_address_condition"`

	RequestBodyCondition []RequestBodyConditionParameters `json:"requestBodyCondition,omitempty" tf:"request_body_condition"`

	RequestHeaderCondition []RequestHeaderConditionParameters `json:"requestHeaderCondition,omitempty" tf:"request_header_condition"`

	RequestMethodCondition []RequestMethodConditionParameters `json:"requestMethodCondition,omitempty" tf:"request_method_condition"`

	RequestSchemeCondition []RequestSchemeConditionParameters `json:"requestSchemeCondition,omitempty" tf:"request_scheme_condition"`

	RequestUriCondition []RequestUriConditionParameters `json:"requestUriCondition,omitempty" tf:"request_uri_condition"`

	UrlFileExtensionCondition []UrlFileExtensionConditionParameters `json:"urlFileExtensionCondition,omitempty" tf:"url_file_extension_condition"`

	UrlFileNameCondition []UrlFileNameConditionParameters `json:"urlFileNameCondition,omitempty" tf:"url_file_name_condition"`

	UrlPathCondition []UrlPathConditionParameters `json:"urlPathCondition,omitempty" tf:"url_path_condition"`

	UrlRedirectAction []UrlRedirectActionParameters `json:"urlRedirectAction,omitempty" tf:"url_redirect_action"`

	UrlRewriteAction []UrlRewriteActionParameters `json:"urlRewriteAction,omitempty" tf:"url_rewrite_action"`
}

type DeviceConditionObservation struct {
}

type DeviceConditionParameters struct {
	MatchValues []string `json:"matchValues" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator *string `json:"operator,omitempty" tf:"operator"`
}

type GeoFilterObservation struct {
}

type GeoFilterParameters struct {
	Action string `json:"action" tf:"action"`

	CountryCodes []string `json:"countryCodes" tf:"country_codes"`

	RelativePath string `json:"relativePath" tf:"relative_path"`
}

type GlobalDeliveryRuleCacheExpirationActionObservation struct {
}

type GlobalDeliveryRuleCacheExpirationActionParameters struct {
	Behavior string `json:"behavior" tf:"behavior"`

	Duration *string `json:"duration,omitempty" tf:"duration"`
}

type GlobalDeliveryRuleCacheKeyQueryStringActionObservation struct {
}

type GlobalDeliveryRuleCacheKeyQueryStringActionParameters struct {
	Behavior string `json:"behavior" tf:"behavior"`

	Parameters *string `json:"parameters,omitempty" tf:"parameters"`
}

type GlobalDeliveryRuleModifyRequestHeaderActionObservation struct {
}

type GlobalDeliveryRuleModifyRequestHeaderActionParameters struct {
	Action string `json:"action" tf:"action"`

	Name string `json:"name" tf:"name"`

	Value *string `json:"value,omitempty" tf:"value"`
}

type GlobalDeliveryRuleModifyResponseHeaderActionObservation struct {
}

type GlobalDeliveryRuleModifyResponseHeaderActionParameters struct {
	Action string `json:"action" tf:"action"`

	Name string `json:"name" tf:"name"`

	Value *string `json:"value,omitempty" tf:"value"`
}

type GlobalDeliveryRuleObservation struct {
}

type GlobalDeliveryRuleParameters struct {
	CacheExpirationAction []GlobalDeliveryRuleCacheExpirationActionParameters `json:"cacheExpirationAction,omitempty" tf:"cache_expiration_action"`

	CacheKeyQueryStringAction []GlobalDeliveryRuleCacheKeyQueryStringActionParameters `json:"cacheKeyQueryStringAction,omitempty" tf:"cache_key_query_string_action"`

	ModifyRequestHeaderAction []GlobalDeliveryRuleModifyRequestHeaderActionParameters `json:"modifyRequestHeaderAction,omitempty" tf:"modify_request_header_action"`

	ModifyResponseHeaderAction []GlobalDeliveryRuleModifyResponseHeaderActionParameters `json:"modifyResponseHeaderAction,omitempty" tf:"modify_response_header_action"`

	UrlRedirectAction []GlobalDeliveryRuleUrlRedirectActionParameters `json:"urlRedirectAction,omitempty" tf:"url_redirect_action"`

	UrlRewriteAction []GlobalDeliveryRuleUrlRewriteActionParameters `json:"urlRewriteAction,omitempty" tf:"url_rewrite_action"`
}

type GlobalDeliveryRuleUrlRedirectActionObservation struct {
}

type GlobalDeliveryRuleUrlRedirectActionParameters struct {
	Fragment *string `json:"fragment,omitempty" tf:"fragment"`

	Hostname *string `json:"hostname,omitempty" tf:"hostname"`

	Path *string `json:"path,omitempty" tf:"path"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol"`

	QueryString *string `json:"queryString,omitempty" tf:"query_string"`

	RedirectType string `json:"redirectType" tf:"redirect_type"`
}

type GlobalDeliveryRuleUrlRewriteActionObservation struct {
}

type GlobalDeliveryRuleUrlRewriteActionParameters struct {
	Destination string `json:"destination" tf:"destination"`

	PreserveUnmatchedPath *bool `json:"preserveUnmatchedPath,omitempty" tf:"preserve_unmatched_path"`

	SourcePattern string `json:"sourcePattern" tf:"source_pattern"`
}

type HttpVersionConditionObservation struct {
}

type HttpVersionConditionParameters struct {
	MatchValues []string `json:"matchValues" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator *string `json:"operator,omitempty" tf:"operator"`
}

type ModifyRequestHeaderActionObservation struct {
}

type ModifyRequestHeaderActionParameters struct {
	Action string `json:"action" tf:"action"`

	Name string `json:"name" tf:"name"`

	Value *string `json:"value,omitempty" tf:"value"`
}

type ModifyResponseHeaderActionObservation struct {
}

type ModifyResponseHeaderActionParameters struct {
	Action string `json:"action" tf:"action"`

	Name string `json:"name" tf:"name"`

	Value *string `json:"value,omitempty" tf:"value"`
}

type OriginObservation struct {
}

type OriginParameters struct {
	HostName string `json:"hostName" tf:"host_name"`

	HttpPort *int64 `json:"httpPort,omitempty" tf:"http_port"`

	HttpsPort *int64 `json:"httpsPort,omitempty" tf:"https_port"`

	Name string `json:"name" tf:"name"`
}

type PostArgConditionObservation struct {
}

type PostArgConditionParameters struct {
	MatchValues []string `json:"matchValues,omitempty" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator string `json:"operator" tf:"operator"`

	Selector string `json:"selector" tf:"selector"`

	Transforms []string `json:"transforms,omitempty" tf:"transforms"`
}

type QueryStringConditionObservation struct {
}

type QueryStringConditionParameters struct {
	MatchValues []string `json:"matchValues,omitempty" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator string `json:"operator" tf:"operator"`

	Transforms []string `json:"transforms,omitempty" tf:"transforms"`
}

type RemoteAddressConditionObservation struct {
}

type RemoteAddressConditionParameters struct {
	MatchValues []string `json:"matchValues,omitempty" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator string `json:"operator" tf:"operator"`
}

type RequestBodyConditionObservation struct {
}

type RequestBodyConditionParameters struct {
	MatchValues []string `json:"matchValues,omitempty" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator string `json:"operator" tf:"operator"`

	Transforms []string `json:"transforms,omitempty" tf:"transforms"`
}

type RequestHeaderConditionObservation struct {
}

type RequestHeaderConditionParameters struct {
	MatchValues []string `json:"matchValues,omitempty" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator string `json:"operator" tf:"operator"`

	Selector string `json:"selector" tf:"selector"`

	Transforms []string `json:"transforms,omitempty" tf:"transforms"`
}

type RequestMethodConditionObservation struct {
}

type RequestMethodConditionParameters struct {
	MatchValues []string `json:"matchValues" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator *string `json:"operator,omitempty" tf:"operator"`
}

type RequestSchemeConditionObservation struct {
}

type RequestSchemeConditionParameters struct {
	MatchValues []string `json:"matchValues" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator *string `json:"operator,omitempty" tf:"operator"`
}

type RequestUriConditionObservation struct {
}

type RequestUriConditionParameters struct {
	MatchValues []string `json:"matchValues,omitempty" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator string `json:"operator" tf:"operator"`

	Transforms []string `json:"transforms,omitempty" tf:"transforms"`
}

type UrlFileExtensionConditionObservation struct {
}

type UrlFileExtensionConditionParameters struct {
	MatchValues []string `json:"matchValues,omitempty" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator string `json:"operator" tf:"operator"`

	Transforms []string `json:"transforms,omitempty" tf:"transforms"`
}

type UrlFileNameConditionObservation struct {
}

type UrlFileNameConditionParameters struct {
	MatchValues []string `json:"matchValues,omitempty" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator string `json:"operator" tf:"operator"`

	Transforms []string `json:"transforms,omitempty" tf:"transforms"`
}

type UrlPathConditionObservation struct {
}

type UrlPathConditionParameters struct {
	MatchValues []string `json:"matchValues,omitempty" tf:"match_values"`

	NegateCondition *bool `json:"negateCondition,omitempty" tf:"negate_condition"`

	Operator string `json:"operator" tf:"operator"`

	Transforms []string `json:"transforms,omitempty" tf:"transforms"`
}

type UrlRedirectActionObservation struct {
}

type UrlRedirectActionParameters struct {
	Fragment *string `json:"fragment,omitempty" tf:"fragment"`

	Hostname *string `json:"hostname,omitempty" tf:"hostname"`

	Path *string `json:"path,omitempty" tf:"path"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol"`

	QueryString *string `json:"queryString,omitempty" tf:"query_string"`

	RedirectType string `json:"redirectType" tf:"redirect_type"`
}

type UrlRewriteActionObservation struct {
}

type UrlRewriteActionParameters struct {
	Destination string `json:"destination" tf:"destination"`

	PreserveUnmatchedPath *bool `json:"preserveUnmatchedPath,omitempty" tf:"preserve_unmatched_path"`

	SourcePattern string `json:"sourcePattern" tf:"source_pattern"`
}

// CdnEndpointSpec defines the desired state of CdnEndpoint
type CdnEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CdnEndpointParameters `json:"forProvider"`
}

// CdnEndpointStatus defines the observed state of CdnEndpoint.
type CdnEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CdnEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CdnEndpoint is the Schema for the CdnEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CdnEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CdnEndpointSpec   `json:"spec"`
	Status            CdnEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CdnEndpointList contains a list of CdnEndpoints
type CdnEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CdnEndpoint `json:"items"`
}

// Repository type metadata.
var (
	CdnEndpointKind             = "CdnEndpoint"
	CdnEndpointGroupKind        = schema.GroupKind{Group: Group, Kind: CdnEndpointKind}.String()
	CdnEndpointKindAPIVersion   = CdnEndpointKind + "." + GroupVersion.String()
	CdnEndpointGroupVersionKind = GroupVersion.WithKind(CdnEndpointKind)
)

func init() {
	SchemeBuilder.Register(&CdnEndpoint{}, &CdnEndpointList{})
}
