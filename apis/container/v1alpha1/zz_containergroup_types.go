/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ContainerGroupObservation struct {
	Fqdn string `json:"fqdn" tf:"fqdn"`

	IpAddress string `json:"ipAddress" tf:"ip_address"`
}

type ContainerGroupParameters struct {
	Container []ContainerParameters `json:"container" tf:"container"`

	Diagnostics []DiagnosticsParameters `json:"diagnostics,omitempty" tf:"diagnostics"`

	DnsConfig []DnsConfigParameters `json:"dnsConfig,omitempty" tf:"dns_config"`

	DnsNameLabel *string `json:"dnsNameLabel,omitempty" tf:"dns_name_label"`

	ExposedPort []ExposedPortParameters `json:"exposedPort,omitempty" tf:"exposed_port"`

	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	ImageRegistryCredential []ImageRegistryCredentialParameters `json:"imageRegistryCredential,omitempty" tf:"image_registry_credential"`

	IpAddressType *string `json:"ipAddressType,omitempty" tf:"ip_address_type"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	NetworkProfileId *string `json:"networkProfileId,omitempty" tf:"network_profile_id"`

	OsType string `json:"osType" tf:"os_type"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RestartPolicy *string `json:"restartPolicy,omitempty" tf:"restart_policy"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type ContainerObservation struct {
}

type ContainerParameters struct {
	Commands []string `json:"commands,omitempty" tf:"commands"`

	Cpu float64 `json:"cpu" tf:"cpu"`

	EnvironmentVariables map[string]string `json:"environmentVariables,omitempty" tf:"environment_variables"`

	Gpu []GpuParameters `json:"gpu,omitempty" tf:"gpu"`

	Image string `json:"image" tf:"image"`

	LivenessProbe []LivenessProbeParameters `json:"livenessProbe,omitempty" tf:"liveness_probe"`

	Memory float64 `json:"memory" tf:"memory"`

	Name string `json:"name" tf:"name"`

	Ports []PortsParameters `json:"ports,omitempty" tf:"ports"`

	ReadinessProbe []ReadinessProbeParameters `json:"readinessProbe,omitempty" tf:"readiness_probe"`

	SecureEnvironmentVariables map[string]string `json:"secureEnvironmentVariables,omitempty" tf:"secure_environment_variables"`

	Volume []VolumeParameters `json:"volume,omitempty" tf:"volume"`
}

type DiagnosticsObservation struct {
}

type DiagnosticsParameters struct {
	LogAnalytics []LogAnalyticsParameters `json:"logAnalytics" tf:"log_analytics"`
}

type DnsConfigObservation struct {
}

type DnsConfigParameters struct {
	Nameservers []string `json:"nameservers" tf:"nameservers"`

	Options []string `json:"options" tf:"options"`

	SearchDomains []string `json:"searchDomains" tf:"search_domains"`
}

type ExposedPortObservation struct {
}

type ExposedPortParameters struct {
	Port *int64 `json:"port,omitempty" tf:"port"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
}

type GitRepoObservation struct {
}

type GitRepoParameters struct {
	Directory *string `json:"directory,omitempty" tf:"directory"`

	Revision *string `json:"revision,omitempty" tf:"revision"`

	Url string `json:"url" tf:"url"`
}

type GpuObservation struct {
}

type GpuParameters struct {
	Count *int64 `json:"count,omitempty" tf:"count"`

	Sku *string `json:"sku,omitempty" tf:"sku"`
}

type HttpGetObservation struct {
}

type HttpGetParameters struct {
	Path *string `json:"path,omitempty" tf:"path"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	Scheme *string `json:"scheme,omitempty" tf:"scheme"`
}

type IdentityObservation struct {
	PrincipalId string `json:"principalId" tf:"principal_id"`
}

type IdentityParameters struct {
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	Type string `json:"type" tf:"type"`
}

type ImageRegistryCredentialObservation struct {
}

type ImageRegistryCredentialParameters struct {
	Password string `json:"password" tf:"password"`

	Server string `json:"server" tf:"server"`

	Username string `json:"username" tf:"username"`
}

type LivenessProbeObservation struct {
}

type LivenessProbeParameters struct {
	Exec []string `json:"exec,omitempty" tf:"exec"`

	FailureThreshold *int64 `json:"failureThreshold,omitempty" tf:"failure_threshold"`

	HttpGet []HttpGetParameters `json:"httpGet,omitempty" tf:"http_get"`

	InitialDelaySeconds *int64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds"`

	PeriodSeconds *int64 `json:"periodSeconds,omitempty" tf:"period_seconds"`

	SuccessThreshold *int64 `json:"successThreshold,omitempty" tf:"success_threshold"`

	TimeoutSeconds *int64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds"`
}

type LogAnalyticsObservation struct {
}

type LogAnalyticsParameters struct {
	LogType *string `json:"logType,omitempty" tf:"log_type"`

	Metadata map[string]string `json:"metadata,omitempty" tf:"metadata"`

	WorkspaceId string `json:"workspaceId" tf:"workspace_id"`

	WorkspaceKey string `json:"workspaceKey" tf:"workspace_key"`
}

type PortsObservation struct {
}

type PortsParameters struct {
	Port *int64 `json:"port,omitempty" tf:"port"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol"`
}

type ReadinessProbeHttpGetObservation struct {
}

type ReadinessProbeHttpGetParameters struct {
	Path *string `json:"path,omitempty" tf:"path"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	Scheme *string `json:"scheme,omitempty" tf:"scheme"`
}

type ReadinessProbeObservation struct {
}

type ReadinessProbeParameters struct {
	Exec []string `json:"exec,omitempty" tf:"exec"`

	FailureThreshold *int64 `json:"failureThreshold,omitempty" tf:"failure_threshold"`

	HttpGet []ReadinessProbeHttpGetParameters `json:"httpGet,omitempty" tf:"http_get"`

	InitialDelaySeconds *int64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds"`

	PeriodSeconds *int64 `json:"periodSeconds,omitempty" tf:"period_seconds"`

	SuccessThreshold *int64 `json:"successThreshold,omitempty" tf:"success_threshold"`

	TimeoutSeconds *int64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds"`
}

type VolumeObservation struct {
}

type VolumeParameters struct {
	EmptyDir *bool `json:"emptyDir,omitempty" tf:"empty_dir"`

	GitRepo []GitRepoParameters `json:"gitRepo,omitempty" tf:"git_repo"`

	MountPath string `json:"mountPath" tf:"mount_path"`

	Name string `json:"name" tf:"name"`

	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only"`

	Secret map[string]string `json:"secret,omitempty" tf:"secret"`

	ShareName *string `json:"shareName,omitempty" tf:"share_name"`

	StorageAccountKey *string `json:"storageAccountKey,omitempty" tf:"storage_account_key"`

	StorageAccountName *string `json:"storageAccountName,omitempty" tf:"storage_account_name"`
}

// ContainerGroupSpec defines the desired state of ContainerGroup
type ContainerGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ContainerGroupParameters `json:"forProvider"`
}

// ContainerGroupStatus defines the observed state of ContainerGroup.
type ContainerGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ContainerGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerGroup is the Schema for the ContainerGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ContainerGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContainerGroupSpec   `json:"spec"`
	Status            ContainerGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerGroupList contains a list of ContainerGroups
type ContainerGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerGroup `json:"items"`
}

// Repository type metadata.
var (
	ContainerGroupKind             = "ContainerGroup"
	ContainerGroupGroupKind        = schema.GroupKind{Group: Group, Kind: ContainerGroupKind}.String()
	ContainerGroupKindAPIVersion   = ContainerGroupKind + "." + GroupVersion.String()
	ContainerGroupGroupVersionKind = GroupVersion.WithKind(ContainerGroupKind)
)

func init() {
	SchemeBuilder.Register(&ContainerGroup{}, &ContainerGroupList{})
}
