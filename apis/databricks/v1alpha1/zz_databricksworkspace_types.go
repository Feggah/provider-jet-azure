/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CustomParametersObservation struct {
}

type CustomParametersParameters struct {
	MachineLearningWorkspaceId *string `json:"machineLearningWorkspaceId,omitempty" tf:"machine_learning_workspace_id"`

	NatGatewayName *string `json:"natGatewayName,omitempty" tf:"nat_gateway_name"`

	NoPublicIp *bool `json:"noPublicIp,omitempty" tf:"no_public_ip"`

	PrivateSubnetName *string `json:"privateSubnetName,omitempty" tf:"private_subnet_name"`

	PrivateSubnetNetworkSecurityGroupAssociationId *string `json:"privateSubnetNetworkSecurityGroupAssociationId,omitempty" tf:"private_subnet_network_security_group_association_id"`

	PublicIpName *string `json:"publicIpName,omitempty" tf:"public_ip_name"`

	PublicSubnetName *string `json:"publicSubnetName,omitempty" tf:"public_subnet_name"`

	PublicSubnetNetworkSecurityGroupAssociationId *string `json:"publicSubnetNetworkSecurityGroupAssociationId,omitempty" tf:"public_subnet_network_security_group_association_id"`

	StorageAccountName *string `json:"storageAccountName,omitempty" tf:"storage_account_name"`

	StorageAccountSkuName *string `json:"storageAccountSkuName,omitempty" tf:"storage_account_sku_name"`

	VirtualNetworkId *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id"`

	VnetAddressPrefix *string `json:"vnetAddressPrefix,omitempty" tf:"vnet_address_prefix"`
}

type DatabricksWorkspaceObservation struct {
	ManagedResourceGroupId string `json:"managedResourceGroupId" tf:"managed_resource_group_id"`

	StorageAccountIdentity []StorageAccountIdentityObservation `json:"storageAccountIdentity" tf:"storage_account_identity"`

	WorkspaceId string `json:"workspaceId" tf:"workspace_id"`

	WorkspaceUrl string `json:"workspaceUrl" tf:"workspace_url"`
}

type DatabricksWorkspaceParameters struct {
	CustomParameters []CustomParametersParameters `json:"customParameters,omitempty" tf:"custom_parameters"`

	CustomerManagedKeyEnabled *bool `json:"customerManagedKeyEnabled,omitempty" tf:"customer_managed_key_enabled"`

	InfrastructureEncryptionEnabled *bool `json:"infrastructureEncryptionEnabled,omitempty" tf:"infrastructure_encryption_enabled"`

	LoadBalancerBackendAddressPoolId *string `json:"loadBalancerBackendAddressPoolId,omitempty" tf:"load_balancer_backend_address_pool_id"`

	Location string `json:"location" tf:"location"`

	ManagedResourceGroupName *string `json:"managedResourceGroupName,omitempty" tf:"managed_resource_group_name"`

	ManagedServicesCmkKeyVaultKeyId *string `json:"managedServicesCmkKeyVaultKeyId,omitempty" tf:"managed_services_cmk_key_vault_key_id"`

	Name string `json:"name" tf:"name"`

	NetworkSecurityGroupRulesRequired *string `json:"networkSecurityGroupRulesRequired,omitempty" tf:"network_security_group_rules_required"`

	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Sku string `json:"sku" tf:"sku"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type StorageAccountIdentityObservation struct {
	PrincipalId string `json:"principalId" tf:"principal_id"`

	TenantId string `json:"tenantId" tf:"tenant_id"`

	Type string `json:"type" tf:"type"`
}

type StorageAccountIdentityParameters struct {
}

// DatabricksWorkspaceSpec defines the desired state of DatabricksWorkspace
type DatabricksWorkspaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DatabricksWorkspaceParameters `json:"forProvider"`
}

// DatabricksWorkspaceStatus defines the observed state of DatabricksWorkspace.
type DatabricksWorkspaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DatabricksWorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabricksWorkspace is the Schema for the DatabricksWorkspaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DatabricksWorkspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabricksWorkspaceSpec   `json:"spec"`
	Status            DatabricksWorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabricksWorkspaceList contains a list of DatabricksWorkspaces
type DatabricksWorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabricksWorkspace `json:"items"`
}

// Repository type metadata.
var (
	DatabricksWorkspaceKind             = "DatabricksWorkspace"
	DatabricksWorkspaceGroupKind        = schema.GroupKind{Group: Group, Kind: DatabricksWorkspaceKind}.String()
	DatabricksWorkspaceKindAPIVersion   = DatabricksWorkspaceKind + "." + GroupVersion.String()
	DatabricksWorkspaceGroupVersionKind = GroupVersion.WithKind(DatabricksWorkspaceKind)
)

func init() {
	SchemeBuilder.Register(&DatabricksWorkspace{}, &DatabricksWorkspaceList{})
}
