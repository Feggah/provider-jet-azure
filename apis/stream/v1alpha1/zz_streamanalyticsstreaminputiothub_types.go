/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type StreamAnalyticsStreamInputIothubObservation struct {
}

type StreamAnalyticsStreamInputIothubParameters struct {
	Endpoint string `json:"endpoint" tf:"endpoint"`

	EventhubConsumerGroupName string `json:"eventhubConsumerGroupName" tf:"eventhub_consumer_group_name"`

	IothubNamespace string `json:"iothubNamespace" tf:"iothub_namespace"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Serialization []StreamAnalyticsStreamInputIothubSerializationParameters `json:"serialization" tf:"serialization"`

	SharedAccessPolicyKey string `json:"sharedAccessPolicyKey" tf:"shared_access_policy_key"`

	SharedAccessPolicyName string `json:"sharedAccessPolicyName" tf:"shared_access_policy_name"`

	StreamAnalyticsJobName string `json:"streamAnalyticsJobName" tf:"stream_analytics_job_name"`
}

type StreamAnalyticsStreamInputIothubSerializationObservation struct {
}

type StreamAnalyticsStreamInputIothubSerializationParameters struct {
	Encoding *string `json:"encoding,omitempty" tf:"encoding"`

	FieldDelimiter *string `json:"fieldDelimiter,omitempty" tf:"field_delimiter"`

	Type string `json:"type" tf:"type"`
}

// StreamAnalyticsStreamInputIothubSpec defines the desired state of StreamAnalyticsStreamInputIothub
type StreamAnalyticsStreamInputIothubSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StreamAnalyticsStreamInputIothubParameters `json:"forProvider"`
}

// StreamAnalyticsStreamInputIothubStatus defines the observed state of StreamAnalyticsStreamInputIothub.
type StreamAnalyticsStreamInputIothubStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StreamAnalyticsStreamInputIothubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StreamAnalyticsStreamInputIothub is the Schema for the StreamAnalyticsStreamInputIothubs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StreamAnalyticsStreamInputIothub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StreamAnalyticsStreamInputIothubSpec   `json:"spec"`
	Status            StreamAnalyticsStreamInputIothubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamAnalyticsStreamInputIothubList contains a list of StreamAnalyticsStreamInputIothubs
type StreamAnalyticsStreamInputIothubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StreamAnalyticsStreamInputIothub `json:"items"`
}

// Repository type metadata.
var (
	StreamAnalyticsStreamInputIothubKind             = "StreamAnalyticsStreamInputIothub"
	StreamAnalyticsStreamInputIothubGroupKind        = schema.GroupKind{Group: Group, Kind: StreamAnalyticsStreamInputIothubKind}.String()
	StreamAnalyticsStreamInputIothubKindAPIVersion   = StreamAnalyticsStreamInputIothubKind + "." + GroupVersion.String()
	StreamAnalyticsStreamInputIothubGroupVersionKind = GroupVersion.WithKind(StreamAnalyticsStreamInputIothubKind)
)

func init() {
	SchemeBuilder.Register(&StreamAnalyticsStreamInputIothub{}, &StreamAnalyticsStreamInputIothubList{})
}
