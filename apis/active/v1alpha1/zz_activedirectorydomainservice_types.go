/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ActiveDirectoryDomainServiceObservation struct {
	DeploymentId string `json:"deploymentId" tf:"deployment_id"`

	ResourceId string `json:"resourceId" tf:"resource_id"`

	SyncOwner string `json:"syncOwner" tf:"sync_owner"`

	TenantId string `json:"tenantId" tf:"tenant_id"`

	Version int64 `json:"version" tf:"version"`
}

type ActiveDirectoryDomainServiceParameters struct {
	DomainName string `json:"domainName" tf:"domain_name"`

	FilteredSyncEnabled *bool `json:"filteredSyncEnabled,omitempty" tf:"filtered_sync_enabled"`

	InitialReplicaSet []InitialReplicaSetParameters `json:"initialReplicaSet" tf:"initial_replica_set"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	Notifications []NotificationsParameters `json:"notifications,omitempty" tf:"notifications"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SecureLdap []SecureLdapParameters `json:"secureLdap,omitempty" tf:"secure_ldap"`

	Security []SecurityParameters `json:"security,omitempty" tf:"security"`

	Sku string `json:"sku" tf:"sku"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type InitialReplicaSetObservation struct {
	DomainControllerIpAddresses []string `json:"domainControllerIpAddresses" tf:"domain_controller_ip_addresses"`

	ExternalAccessIpAddress string `json:"externalAccessIpAddress" tf:"external_access_ip_address"`

	Id string `json:"id" tf:"id"`

	Location string `json:"location" tf:"location"`

	ServiceStatus string `json:"serviceStatus" tf:"service_status"`
}

type InitialReplicaSetParameters struct {
	SubnetId string `json:"subnetId" tf:"subnet_id"`
}

type NotificationsObservation struct {
}

type NotificationsParameters struct {
	AdditionalRecipients []string `json:"additionalRecipients,omitempty" tf:"additional_recipients"`

	NotifyDcAdmins *bool `json:"notifyDcAdmins,omitempty" tf:"notify_dc_admins"`

	NotifyGlobalAdmins *bool `json:"notifyGlobalAdmins,omitempty" tf:"notify_global_admins"`
}

type SecureLdapObservation struct {
	CertificateExpiry string `json:"certificateExpiry" tf:"certificate_expiry"`

	CertificateThumbprint string `json:"certificateThumbprint" tf:"certificate_thumbprint"`

	PublicCertificate string `json:"publicCertificate" tf:"public_certificate"`
}

type SecureLdapParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	ExternalAccessEnabled *bool `json:"externalAccessEnabled,omitempty" tf:"external_access_enabled"`

	PfxCertificate string `json:"pfxCertificate" tf:"pfx_certificate"`

	PfxCertificatePassword string `json:"pfxCertificatePassword" tf:"pfx_certificate_password"`
}

type SecurityObservation struct {
}

type SecurityParameters struct {
	NtlmV1Enabled *bool `json:"ntlmV1Enabled,omitempty" tf:"ntlm_v1_enabled"`

	SyncKerberosPasswords *bool `json:"syncKerberosPasswords,omitempty" tf:"sync_kerberos_passwords"`

	SyncNtlmPasswords *bool `json:"syncNtlmPasswords,omitempty" tf:"sync_ntlm_passwords"`

	SyncOnPremPasswords *bool `json:"syncOnPremPasswords,omitempty" tf:"sync_on_prem_passwords"`

	TlsV1Enabled *bool `json:"tlsV1Enabled,omitempty" tf:"tls_v1_enabled"`
}

// ActiveDirectoryDomainServiceSpec defines the desired state of ActiveDirectoryDomainService
type ActiveDirectoryDomainServiceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ActiveDirectoryDomainServiceParameters `json:"forProvider"`
}

// ActiveDirectoryDomainServiceStatus defines the observed state of ActiveDirectoryDomainService.
type ActiveDirectoryDomainServiceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ActiveDirectoryDomainServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ActiveDirectoryDomainService is the Schema for the ActiveDirectoryDomainServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ActiveDirectoryDomainService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ActiveDirectoryDomainServiceSpec   `json:"spec"`
	Status            ActiveDirectoryDomainServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActiveDirectoryDomainServiceList contains a list of ActiveDirectoryDomainServices
type ActiveDirectoryDomainServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ActiveDirectoryDomainService `json:"items"`
}

// Repository type metadata.
var (
	ActiveDirectoryDomainServiceKind             = "ActiveDirectoryDomainService"
	ActiveDirectoryDomainServiceGroupKind        = schema.GroupKind{Group: Group, Kind: ActiveDirectoryDomainServiceKind}.String()
	ActiveDirectoryDomainServiceKindAPIVersion   = ActiveDirectoryDomainServiceKind + "." + GroupVersion.String()
	ActiveDirectoryDomainServiceGroupVersionKind = GroupVersion.WithKind(ActiveDirectoryDomainServiceKind)
)

func init() {
	SchemeBuilder.Register(&ActiveDirectoryDomainService{}, &ActiveDirectoryDomainServiceList{})
}
