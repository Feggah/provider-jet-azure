/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AclAccessPolicyObservation struct {
}

type AclAccessPolicyParameters struct {
	Expiry string `json:"expiry" tf:"expiry"`

	Permissions string `json:"permissions" tf:"permissions"`

	Start string `json:"start" tf:"start"`
}

type StorageTableAclObservation struct {
}

type StorageTableAclParameters struct {
	AccessPolicy []AclAccessPolicyParameters `json:"accessPolicy,omitempty" tf:"access_policy"`

	Id string `json:"id" tf:"id"`
}

type StorageTableObservation struct {
}

type StorageTableParameters struct {
	Acl []StorageTableAclParameters `json:"acl,omitempty" tf:"acl"`

	Name string `json:"name" tf:"name"`

	StorageAccountName string `json:"storageAccountName" tf:"storage_account_name"`
}

// StorageTableSpec defines the desired state of StorageTable
type StorageTableSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StorageTableParameters `json:"forProvider"`
}

// StorageTableStatus defines the observed state of StorageTable.
type StorageTableStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StorageTableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageTable is the Schema for the StorageTables API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type StorageTable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageTableSpec   `json:"spec"`
	Status            StorageTableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageTableList contains a list of StorageTables
type StorageTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageTable `json:"items"`
}

// Repository type metadata.
var (
	StorageTableKind             = "StorageTable"
	StorageTableGroupKind        = schema.GroupKind{Group: Group, Kind: StorageTableKind}.String()
	StorageTableKindAPIVersion   = StorageTableKind + "." + GroupVersion.String()
	StorageTableGroupVersionKind = GroupVersion.WithKind(StorageTableKind)
)

func init() {
	SchemeBuilder.Register(&StorageTable{}, &StorageTableList{})
}
