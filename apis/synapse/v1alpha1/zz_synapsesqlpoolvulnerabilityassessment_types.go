/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecurringScansObservation struct {
}

type RecurringScansParameters struct {

	// +kubebuilder:validation:Optional
	EmailSubscriptionAdminsEnabled *bool `json:"emailSubscriptionAdminsEnabled,omitempty" tf:"email_subscription_admins_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Emails []*string `json:"emails,omitempty" tf:"emails,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type SynapseSqlPoolVulnerabilityAssessmentObservation struct {
}

type SynapseSqlPoolVulnerabilityAssessmentParameters struct {

	// +kubebuilder:validation:Optional
	RecurringScans []RecurringScansParameters `json:"recurringScans,omitempty" tf:"recurring_scans,omitempty"`

	// +kubebuilder:validation:Required
	SQLPoolSecurityAlertPolicyID *string `json:"sqlPoolSecurityAlertPolicyId" tf:"sql_pool_security_alert_policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountAccessKeySecretRef v1.SecretKeySelector `json:"storageAccountAccessKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	StorageContainerPath *string `json:"storageContainerPath" tf:"storage_container_path,omitempty"`

	// +kubebuilder:validation:Optional
	StorageContainerSasKeySecretRef v1.SecretKeySelector `json:"storageContainerSasKeySecretRef,omitempty" tf:"-"`
}

// SynapseSqlPoolVulnerabilityAssessmentSpec defines the desired state of SynapseSqlPoolVulnerabilityAssessment
type SynapseSqlPoolVulnerabilityAssessmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SynapseSqlPoolVulnerabilityAssessmentParameters `json:"forProvider"`
}

// SynapseSqlPoolVulnerabilityAssessmentStatus defines the observed state of SynapseSqlPoolVulnerabilityAssessment.
type SynapseSqlPoolVulnerabilityAssessmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SynapseSqlPoolVulnerabilityAssessmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseSqlPoolVulnerabilityAssessment is the Schema for the SynapseSqlPoolVulnerabilityAssessments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SynapseSqlPoolVulnerabilityAssessment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SynapseSqlPoolVulnerabilityAssessmentSpec   `json:"spec"`
	Status            SynapseSqlPoolVulnerabilityAssessmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseSqlPoolVulnerabilityAssessmentList contains a list of SynapseSqlPoolVulnerabilityAssessments
type SynapseSqlPoolVulnerabilityAssessmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SynapseSqlPoolVulnerabilityAssessment `json:"items"`
}

// Repository type metadata.
var (
	SynapseSqlPoolVulnerabilityAssessmentKind             = "SynapseSqlPoolVulnerabilityAssessment"
	SynapseSqlPoolVulnerabilityAssessmentGroupKind        = schema.GroupKind{Group: Group, Kind: SynapseSqlPoolVulnerabilityAssessmentKind}.String()
	SynapseSqlPoolVulnerabilityAssessmentKindAPIVersion   = SynapseSqlPoolVulnerabilityAssessmentKind + "." + GroupVersion.String()
	SynapseSqlPoolVulnerabilityAssessmentGroupVersionKind = GroupVersion.WithKind(SynapseSqlPoolVulnerabilityAssessmentKind)
)

func init() {
	SchemeBuilder.Register(&SynapseSqlPoolVulnerabilityAssessment{}, &SynapseSqlPoolVulnerabilityAssessmentList{})
}
