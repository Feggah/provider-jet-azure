/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SynapseIntegrationRuntimeAzureObservation struct {
}

type SynapseIntegrationRuntimeAzureParameters struct {

	// +kubebuilder:validation:Optional
	ComputeType *string `json:"computeType,omitempty" tf:"compute_type,omitempty"`

	// +kubebuilder:validation:Optional
	CoreCount *int64 `json:"coreCount,omitempty" tf:"core_count,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	SynapseWorkspaceID *string `json:"synapseWorkspaceId" tf:"synapse_workspace_id,omitempty"`

	// +kubebuilder:validation:Optional
	TimeToLiveMin *int64 `json:"timeToLiveMin,omitempty" tf:"time_to_live_min,omitempty"`
}

// SynapseIntegrationRuntimeAzureSpec defines the desired state of SynapseIntegrationRuntimeAzure
type SynapseIntegrationRuntimeAzureSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SynapseIntegrationRuntimeAzureParameters `json:"forProvider"`
}

// SynapseIntegrationRuntimeAzureStatus defines the observed state of SynapseIntegrationRuntimeAzure.
type SynapseIntegrationRuntimeAzureStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SynapseIntegrationRuntimeAzureObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseIntegrationRuntimeAzure is the Schema for the SynapseIntegrationRuntimeAzures API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SynapseIntegrationRuntimeAzure struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SynapseIntegrationRuntimeAzureSpec   `json:"spec"`
	Status            SynapseIntegrationRuntimeAzureStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseIntegrationRuntimeAzureList contains a list of SynapseIntegrationRuntimeAzures
type SynapseIntegrationRuntimeAzureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SynapseIntegrationRuntimeAzure `json:"items"`
}

// Repository type metadata.
var (
	SynapseIntegrationRuntimeAzureKind             = "SynapseIntegrationRuntimeAzure"
	SynapseIntegrationRuntimeAzureGroupKind        = schema.GroupKind{Group: Group, Kind: SynapseIntegrationRuntimeAzureKind}.String()
	SynapseIntegrationRuntimeAzureKindAPIVersion   = SynapseIntegrationRuntimeAzureKind + "." + GroupVersion.String()
	SynapseIntegrationRuntimeAzureGroupVersionKind = GroupVersion.WithKind(SynapseIntegrationRuntimeAzureKind)
)

func init() {
	SchemeBuilder.Register(&SynapseIntegrationRuntimeAzure{}, &SynapseIntegrationRuntimeAzureList{})
}
