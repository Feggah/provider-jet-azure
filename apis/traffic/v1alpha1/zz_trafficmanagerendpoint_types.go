/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CustomHeaderObservation struct {
}

type CustomHeaderParameters struct {
	Name string `json:"name" tf:"name"`

	Value string `json:"value" tf:"value"`
}

type SubnetObservation struct {
}

type SubnetParameters struct {
	First string `json:"first" tf:"first"`

	Last *string `json:"last,omitempty" tf:"last"`

	Scope *int64 `json:"scope,omitempty" tf:"scope"`
}

type TrafficManagerEndpointObservation struct {
	EndpointMonitorStatus string `json:"endpointMonitorStatus" tf:"endpoint_monitor_status"`
}

type TrafficManagerEndpointParameters struct {
	CustomHeader []CustomHeaderParameters `json:"customHeader,omitempty" tf:"custom_header"`

	EndpointLocation *string `json:"endpointLocation,omitempty" tf:"endpoint_location"`

	EndpointStatus *string `json:"endpointStatus,omitempty" tf:"endpoint_status"`

	GeoMappings []string `json:"geoMappings,omitempty" tf:"geo_mappings"`

	MinChildEndpoints *int64 `json:"minChildEndpoints,omitempty" tf:"min_child_endpoints"`

	MinimumRequiredChildEndpointsIpv4 *int64 `json:"minimumRequiredChildEndpointsIpv4,omitempty" tf:"minimum_required_child_endpoints_ipv4"`

	MinimumRequiredChildEndpointsIpv6 *int64 `json:"minimumRequiredChildEndpointsIpv6,omitempty" tf:"minimum_required_child_endpoints_ipv6"`

	Name string `json:"name" tf:"name"`

	Priority *int64 `json:"priority,omitempty" tf:"priority"`

	ProfileName string `json:"profileName" tf:"profile_name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Subnet []SubnetParameters `json:"subnet,omitempty" tf:"subnet"`

	Target *string `json:"target,omitempty" tf:"target"`

	TargetResourceId *string `json:"targetResourceId,omitempty" tf:"target_resource_id"`

	Type string `json:"type" tf:"type"`

	Weight *int64 `json:"weight,omitempty" tf:"weight"`
}

// TrafficManagerEndpointSpec defines the desired state of TrafficManagerEndpoint
type TrafficManagerEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TrafficManagerEndpointParameters `json:"forProvider"`
}

// TrafficManagerEndpointStatus defines the observed state of TrafficManagerEndpoint.
type TrafficManagerEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TrafficManagerEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficManagerEndpoint is the Schema for the TrafficManagerEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type TrafficManagerEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrafficManagerEndpointSpec   `json:"spec"`
	Status            TrafficManagerEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficManagerEndpointList contains a list of TrafficManagerEndpoints
type TrafficManagerEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrafficManagerEndpoint `json:"items"`
}

// Repository type metadata.
var (
	TrafficManagerEndpointKind             = "TrafficManagerEndpoint"
	TrafficManagerEndpointGroupKind        = schema.GroupKind{Group: Group, Kind: TrafficManagerEndpointKind}.String()
	TrafficManagerEndpointKindAPIVersion   = TrafficManagerEndpointKind + "." + GroupVersion.String()
	TrafficManagerEndpointGroupVersionKind = GroupVersion.WithKind(TrafficManagerEndpointKind)
)

func init() {
	SchemeBuilder.Register(&TrafficManagerEndpoint{}, &TrafficManagerEndpointList{})
}
