/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ConfigServerGitSettingObservation struct {
}

type ConfigServerGitSettingParameters struct {
	HTTPBasicAuth []HTTPBasicAuthParameters `json:"httpBasicAuth,omitempty" tf:"http_basic_auth"`

	Label *string `json:"label,omitempty" tf:"label"`

	Repository []RepositoryParameters `json:"repository,omitempty" tf:"repository"`

	SSHAuth []ConfigServerGitSettingSSHAuthParameters `json:"sshAuth,omitempty" tf:"ssh_auth"`

	SearchPaths []string `json:"searchPaths,omitempty" tf:"search_paths"`

	URI string `json:"uri" tf:"uri"`
}

type ConfigServerGitSettingSSHAuthObservation struct {
}

type ConfigServerGitSettingSSHAuthParameters struct {
	HostKey *string `json:"hostKey,omitempty" tf:"host_key"`

	HostKeyAlgorithm *string `json:"hostKeyAlgorithm,omitempty" tf:"host_key_algorithm"`

	PrivateKey string `json:"privateKey" tf:"private_key"`

	StrictHostKeyCheckingEnabled *bool `json:"strictHostKeyCheckingEnabled,omitempty" tf:"strict_host_key_checking_enabled"`
}

type HTTPBasicAuthObservation struct {
}

type HTTPBasicAuthParameters struct {
	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type NetworkObservation struct {
}

type NetworkParameters struct {
	AppNetworkResourceGroup *string `json:"appNetworkResourceGroup,omitempty" tf:"app_network_resource_group"`

	AppSubnetID string `json:"appSubnetId" tf:"app_subnet_id"`

	CidrRanges []string `json:"cidrRanges" tf:"cidr_ranges"`

	ServiceRuntimeNetworkResourceGroup *string `json:"serviceRuntimeNetworkResourceGroup,omitempty" tf:"service_runtime_network_resource_group"`

	ServiceRuntimeSubnetID string `json:"serviceRuntimeSubnetId" tf:"service_runtime_subnet_id"`
}

type RepositoryHTTPBasicAuthObservation struct {
}

type RepositoryHTTPBasicAuthParameters struct {
	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type RepositoryObservation struct {
}

type RepositoryParameters struct {
	HTTPBasicAuth []RepositoryHTTPBasicAuthParameters `json:"httpBasicAuth,omitempty" tf:"http_basic_auth"`

	Label *string `json:"label,omitempty" tf:"label"`

	Name string `json:"name" tf:"name"`

	Pattern []string `json:"pattern,omitempty" tf:"pattern"`

	SSHAuth []SSHAuthParameters `json:"sshAuth,omitempty" tf:"ssh_auth"`

	SearchPaths []string `json:"searchPaths,omitempty" tf:"search_paths"`

	URI string `json:"uri" tf:"uri"`
}

type RequiredNetworkTrafficRulesObservation struct {
	Direction string `json:"direction" tf:"direction"`

	Fqdns []string `json:"fqdns" tf:"fqdns"`

	IPAddresses []string `json:"ipAddresses" tf:"ip_addresses"`

	Port int64 `json:"port" tf:"port"`

	Protocol string `json:"protocol" tf:"protocol"`
}

type RequiredNetworkTrafficRulesParameters struct {
}

type SSHAuthObservation struct {
}

type SSHAuthParameters struct {
	HostKey *string `json:"hostKey,omitempty" tf:"host_key"`

	HostKeyAlgorithm *string `json:"hostKeyAlgorithm,omitempty" tf:"host_key_algorithm"`

	PrivateKey string `json:"privateKey" tf:"private_key"`

	StrictHostKeyCheckingEnabled *bool `json:"strictHostKeyCheckingEnabled,omitempty" tf:"strict_host_key_checking_enabled"`
}

type SpringCloudServiceObservation struct {
	OutboundPublicIPAddresses []string `json:"outboundPublicIpAddresses" tf:"outbound_public_ip_addresses"`

	RequiredNetworkTrafficRules []RequiredNetworkTrafficRulesObservation `json:"requiredNetworkTrafficRules" tf:"required_network_traffic_rules"`
}

type SpringCloudServiceParameters struct {
	ConfigServerGitSetting []ConfigServerGitSettingParameters `json:"configServerGitSetting,omitempty" tf:"config_server_git_setting"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	Network []NetworkParameters `json:"network,omitempty" tf:"network"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SkuName *string `json:"skuName,omitempty" tf:"sku_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Trace []TraceParameters `json:"trace,omitempty" tf:"trace"`
}

type TraceObservation struct {
}

type TraceParameters struct {
	InstrumentationKey string `json:"instrumentationKey" tf:"instrumentation_key"`

	SampleRate *float64 `json:"sampleRate,omitempty" tf:"sample_rate"`
}

// SpringCloudServiceSpec defines the desired state of SpringCloudService
type SpringCloudServiceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SpringCloudServiceParameters `json:"forProvider"`
}

// SpringCloudServiceStatus defines the observed state of SpringCloudService.
type SpringCloudServiceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SpringCloudServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudService is the Schema for the SpringCloudServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SpringCloudService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SpringCloudServiceSpec   `json:"spec"`
	Status            SpringCloudServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudServiceList contains a list of SpringCloudServices
type SpringCloudServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SpringCloudService `json:"items"`
}

// Repository type metadata.
var (
	SpringCloudServiceKind             = "SpringCloudService"
	SpringCloudServiceGroupKind        = schema.GroupKind{Group: Group, Kind: SpringCloudServiceKind}.String()
	SpringCloudServiceKindAPIVersion   = SpringCloudServiceKind + "." + GroupVersion.String()
	SpringCloudServiceGroupVersionKind = GroupVersion.WithKind(SpringCloudServiceKind)
)

func init() {
	SchemeBuilder.Register(&SpringCloudService{}, &SpringCloudServiceList{})
}
