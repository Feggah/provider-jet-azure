/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LogicAppWorkflowObservation struct {
	AccessEndpoint string `json:"accessEndpoint" tf:"access_endpoint"`

	ConnectorEndpointIpAddresses []string `json:"connectorEndpointIpAddresses" tf:"connector_endpoint_ip_addresses"`

	ConnectorOutboundIpAddresses []string `json:"connectorOutboundIpAddresses" tf:"connector_outbound_ip_addresses"`

	WorkflowEndpointIpAddresses []string `json:"workflowEndpointIpAddresses" tf:"workflow_endpoint_ip_addresses"`

	WorkflowOutboundIpAddresses []string `json:"workflowOutboundIpAddresses" tf:"workflow_outbound_ip_addresses"`
}

type LogicAppWorkflowParameters struct {
	IntegrationServiceEnvironmentId *string `json:"integrationServiceEnvironmentId,omitempty" tf:"integration_service_environment_id"`

	Location string `json:"location" tf:"location"`

	LogicAppIntegrationAccountId *string `json:"logicAppIntegrationAccountId,omitempty" tf:"logic_app_integration_account_id"`

	Name string `json:"name" tf:"name"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	WorkflowParameters map[string]string `json:"workflowParameters,omitempty" tf:"workflow_parameters"`

	WorkflowSchema *string `json:"workflowSchema,omitempty" tf:"workflow_schema"`

	WorkflowVersion *string `json:"workflowVersion,omitempty" tf:"workflow_version"`
}

// LogicAppWorkflowSpec defines the desired state of LogicAppWorkflow
type LogicAppWorkflowSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LogicAppWorkflowParameters `json:"forProvider"`
}

// LogicAppWorkflowStatus defines the observed state of LogicAppWorkflow.
type LogicAppWorkflowStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LogicAppWorkflowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogicAppWorkflow is the Schema for the LogicAppWorkflows API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LogicAppWorkflow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogicAppWorkflowSpec   `json:"spec"`
	Status            LogicAppWorkflowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicAppWorkflowList contains a list of LogicAppWorkflows
type LogicAppWorkflowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicAppWorkflow `json:"items"`
}

// Repository type metadata.
var (
	LogicAppWorkflowKind             = "LogicAppWorkflow"
	LogicAppWorkflowGroupKind        = schema.GroupKind{Group: Group, Kind: LogicAppWorkflowKind}.String()
	LogicAppWorkflowKindAPIVersion   = LogicAppWorkflowKind + "." + GroupVersion.String()
	LogicAppWorkflowGroupVersionKind = GroupVersion.WithKind(LogicAppWorkflowKind)
)

func init() {
	SchemeBuilder.Register(&LogicAppWorkflow{}, &LogicAppWorkflowList{})
}
