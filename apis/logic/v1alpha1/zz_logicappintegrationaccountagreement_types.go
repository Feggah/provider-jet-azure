/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GuestIdentityObservation struct {
}

type GuestIdentityParameters struct {

	// +kubebuilder:validation:Required
	Qualifier *string `json:"qualifier" tf:"qualifier,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type HostIdentityObservation struct {
}

type HostIdentityParameters struct {

	// +kubebuilder:validation:Required
	Qualifier *string `json:"qualifier" tf:"qualifier,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type LogicAppIntegrationAccountAgreementObservation struct {
}

type LogicAppIntegrationAccountAgreementParameters struct {

	// +kubebuilder:validation:Required
	AgreementType *string `json:"agreementType" tf:"agreement_type,omitempty"`

	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// +kubebuilder:validation:Required
	GuestIdentity []GuestIdentityParameters `json:"guestIdentity" tf:"guest_identity,omitempty"`

	// +kubebuilder:validation:Required
	GuestPartnerName *string `json:"guestPartnerName" tf:"guest_partner_name,omitempty"`

	// +kubebuilder:validation:Required
	HostIdentity []HostIdentityParameters `json:"hostIdentity" tf:"host_identity,omitempty"`

	// +kubebuilder:validation:Required
	HostPartnerName *string `json:"hostPartnerName" tf:"host_partner_name,omitempty"`

	// +kubebuilder:validation:Required
	IntegrationAccountName *string `json:"integrationAccountName" tf:"integration_account_name,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// LogicAppIntegrationAccountAgreementSpec defines the desired state of LogicAppIntegrationAccountAgreement
type LogicAppIntegrationAccountAgreementSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogicAppIntegrationAccountAgreementParameters `json:"forProvider"`
}

// LogicAppIntegrationAccountAgreementStatus defines the observed state of LogicAppIntegrationAccountAgreement.
type LogicAppIntegrationAccountAgreementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogicAppIntegrationAccountAgreementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogicAppIntegrationAccountAgreement is the Schema for the LogicAppIntegrationAccountAgreements API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LogicAppIntegrationAccountAgreement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogicAppIntegrationAccountAgreementSpec   `json:"spec"`
	Status            LogicAppIntegrationAccountAgreementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicAppIntegrationAccountAgreementList contains a list of LogicAppIntegrationAccountAgreements
type LogicAppIntegrationAccountAgreementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicAppIntegrationAccountAgreement `json:"items"`
}

// Repository type metadata.
var (
	LogicAppIntegrationAccountAgreementKind             = "LogicAppIntegrationAccountAgreement"
	LogicAppIntegrationAccountAgreementGroupKind        = schema.GroupKind{Group: Group, Kind: LogicAppIntegrationAccountAgreementKind}.String()
	LogicAppIntegrationAccountAgreementKindAPIVersion   = LogicAppIntegrationAccountAgreementKind + "." + GroupVersion.String()
	LogicAppIntegrationAccountAgreementGroupVersionKind = GroupVersion.WithKind(LogicAppIntegrationAccountAgreementKind)
)

func init() {
	SchemeBuilder.Register(&LogicAppIntegrationAccountAgreement{}, &LogicAppIntegrationAccountAgreementList{})
}
