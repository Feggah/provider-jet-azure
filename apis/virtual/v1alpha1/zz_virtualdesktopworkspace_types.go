/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VirtualDesktopWorkspaceObservation struct {
}

type VirtualDesktopWorkspaceParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags"`
}

// VirtualDesktopWorkspaceSpec defines the desired state of VirtualDesktopWorkspace
type VirtualDesktopWorkspaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualDesktopWorkspaceParameters `json:"forProvider"`
}

// VirtualDesktopWorkspaceStatus defines the observed state of VirtualDesktopWorkspace.
type VirtualDesktopWorkspaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualDesktopWorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopWorkspace is the Schema for the VirtualDesktopWorkspaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualDesktopWorkspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualDesktopWorkspaceSpec   `json:"spec"`
	Status            VirtualDesktopWorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopWorkspaceList contains a list of VirtualDesktopWorkspaces
type VirtualDesktopWorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualDesktopWorkspace `json:"items"`
}

// Repository type metadata.
var (
	VirtualDesktopWorkspaceKind             = "VirtualDesktopWorkspace"
	VirtualDesktopWorkspaceGroupKind        = schema.GroupKind{Group: Group, Kind: VirtualDesktopWorkspaceKind}.String()
	VirtualDesktopWorkspaceKindAPIVersion   = VirtualDesktopWorkspaceKind + "." + GroupVersion.String()
	VirtualDesktopWorkspaceGroupVersionKind = GroupVersion.WithKind(VirtualDesktopWorkspaceKind)
)

func init() {
	SchemeBuilder.Register(&VirtualDesktopWorkspace{}, &VirtualDesktopWorkspaceList{})
}
