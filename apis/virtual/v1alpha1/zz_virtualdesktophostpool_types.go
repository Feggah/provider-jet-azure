/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type RegistrationInfoObservation struct {
	ResetToken bool `json:"resetToken" tf:"reset_token"`

	Token string `json:"token" tf:"token"`
}

type RegistrationInfoParameters struct {
	ExpirationDate string `json:"expirationDate" tf:"expiration_date"`
}

type VirtualDesktopHostPoolObservation struct {
}

type VirtualDesktopHostPoolParameters struct {
	CustomRdpProperties *string `json:"customRdpProperties,omitempty" tf:"custom_rdp_properties"`

	Description *string `json:"description,omitempty" tf:"description"`

	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name"`

	LoadBalancerType string `json:"loadBalancerType" tf:"load_balancer_type"`

	Location string `json:"location" tf:"location"`

	MaximumSessionsAllowed *int64 `json:"maximumSessionsAllowed,omitempty" tf:"maximum_sessions_allowed"`

	Name string `json:"name" tf:"name"`

	PersonalDesktopAssignmentType *string `json:"personalDesktopAssignmentType,omitempty" tf:"personal_desktop_assignment_type"`

	PreferredAppGroupType *string `json:"preferredAppGroupType,omitempty" tf:"preferred_app_group_type"`

	RegistrationInfo []RegistrationInfoParameters `json:"registrationInfo,omitempty" tf:"registration_info"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	StartVmOnConnect *bool `json:"startVmOnConnect,omitempty" tf:"start_vm_on_connect"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Type string `json:"type" tf:"type"`

	ValidateEnvironment *bool `json:"validateEnvironment,omitempty" tf:"validate_environment"`
}

// VirtualDesktopHostPoolSpec defines the desired state of VirtualDesktopHostPool
type VirtualDesktopHostPoolSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VirtualDesktopHostPoolParameters `json:"forProvider"`
}

// VirtualDesktopHostPoolStatus defines the observed state of VirtualDesktopHostPool.
type VirtualDesktopHostPoolStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VirtualDesktopHostPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopHostPool is the Schema for the VirtualDesktopHostPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualDesktopHostPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualDesktopHostPoolSpec   `json:"spec"`
	Status            VirtualDesktopHostPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopHostPoolList contains a list of VirtualDesktopHostPools
type VirtualDesktopHostPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualDesktopHostPool `json:"items"`
}

// Repository type metadata.
var (
	VirtualDesktopHostPoolKind             = "VirtualDesktopHostPool"
	VirtualDesktopHostPoolGroupKind        = schema.GroupKind{Group: Group, Kind: VirtualDesktopHostPoolKind}.String()
	VirtualDesktopHostPoolKindAPIVersion   = VirtualDesktopHostPoolKind + "." + GroupVersion.String()
	VirtualDesktopHostPoolGroupVersionKind = GroupVersion.WithKind(VirtualDesktopHostPoolKind)
)

func init() {
	SchemeBuilder.Register(&VirtualDesktopHostPool{}, &VirtualDesktopHostPoolList{})
}
