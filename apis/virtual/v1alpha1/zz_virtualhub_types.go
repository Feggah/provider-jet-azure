/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type RouteObservation struct {
}

type RouteParameters struct {
	AddressPrefixes []string `json:"addressPrefixes" tf:"address_prefixes"`

	NextHopIPAddress string `json:"nextHopIpAddress" tf:"next_hop_ip_address"`
}

type VirtualHubObservation struct {
}

type VirtualHubParameters struct {
	AddressPrefix *string `json:"addressPrefix,omitempty" tf:"address_prefix"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Route []RouteParameters `json:"route,omitempty" tf:"route"`

	Sku *string `json:"sku,omitempty" tf:"sku"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	VirtualWanID *string `json:"virtualWanId,omitempty" tf:"virtual_wan_id"`
}

// VirtualHubSpec defines the desired state of VirtualHub
type VirtualHubSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VirtualHubParameters `json:"forProvider"`
}

// VirtualHubStatus defines the observed state of VirtualHub.
type VirtualHubStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VirtualHubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualHub is the Schema for the VirtualHubs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualHub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualHubSpec   `json:"spec"`
	Status            VirtualHubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualHubList contains a list of VirtualHubs
type VirtualHubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualHub `json:"items"`
}

// Repository type metadata.
var (
	VirtualHubKind             = "VirtualHub"
	VirtualHubGroupKind        = schema.GroupKind{Group: Group, Kind: VirtualHubKind}.String()
	VirtualHubKindAPIVersion   = VirtualHubKind + "." + GroupVersion.String()
	VirtualHubGroupVersionKind = GroupVersion.WithKind(VirtualHubKind)
)

func init() {
	SchemeBuilder.Register(&VirtualHub{}, &VirtualHubList{})
}
