/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VirtualDesktopApplicationObservation struct {
}

type VirtualDesktopApplicationParameters struct {

	// +kubebuilder:validation:Required
	ApplicationGroupID string `json:"applicationGroupId" tf:"application_group_id"`

	// +kubebuilder:validation:Required
	CommandLineArgumentPolicy string `json:"commandLineArgumentPolicy" tf:"command_line_argument_policy"`

	// +kubebuilder:validation:Optional
	CommandLineArguments *string `json:"commandLineArguments,omitempty" tf:"command_line_arguments"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name"`

	// +kubebuilder:validation:Optional
	IconIndex *int64 `json:"iconIndex,omitempty" tf:"icon_index"`

	// +kubebuilder:validation:Optional
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Path string `json:"path" tf:"path"`

	// +kubebuilder:validation:Optional
	ShowInPortal *bool `json:"showInPortal,omitempty" tf:"show_in_portal"`
}

// VirtualDesktopApplicationSpec defines the desired state of VirtualDesktopApplication
type VirtualDesktopApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualDesktopApplicationParameters `json:"forProvider"`
}

// VirtualDesktopApplicationStatus defines the observed state of VirtualDesktopApplication.
type VirtualDesktopApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualDesktopApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopApplication is the Schema for the VirtualDesktopApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualDesktopApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualDesktopApplicationSpec   `json:"spec"`
	Status            VirtualDesktopApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopApplicationList contains a list of VirtualDesktopApplications
type VirtualDesktopApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualDesktopApplication `json:"items"`
}

// Repository type metadata.
var (
	VirtualDesktopApplicationKind             = "VirtualDesktopApplication"
	VirtualDesktopApplicationGroupKind        = schema.GroupKind{Group: Group, Kind: VirtualDesktopApplicationKind}.String()
	VirtualDesktopApplicationKindAPIVersion   = VirtualDesktopApplicationKind + "." + GroupVersion.String()
	VirtualDesktopApplicationGroupVersionKind = GroupVersion.WithKind(VirtualDesktopApplicationKind)
)

func init() {
	SchemeBuilder.Register(&VirtualDesktopApplication{}, &VirtualDesktopApplicationList{})
}
