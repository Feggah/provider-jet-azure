/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DesktopHostPoolObservation struct {
}

type DesktopHostPoolParameters struct {

	// +kubebuilder:validation:Optional
	CustomRdpProperties *string `json:"customRdpProperties,omitempty" tf:"custom_rdp_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// +kubebuilder:validation:Required
	LoadBalancerType *string `json:"loadBalancerType" tf:"load_balancer_type,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumSessionsAllowed *int64 `json:"maximumSessionsAllowed,omitempty" tf:"maximum_sessions_allowed,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PersonalDesktopAssignmentType *string `json:"personalDesktopAssignmentType,omitempty" tf:"personal_desktop_assignment_type,omitempty"`

	// Preferred App Group type to display
	// +kubebuilder:validation:Optional
	PreferredAppGroupType *string `json:"preferredAppGroupType,omitempty" tf:"preferred_app_group_type,omitempty"`

	// +kubebuilder:validation:Optional
	RegistrationInfo []RegistrationInfoParameters `json:"registrationInfo,omitempty" tf:"registration_info,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tf-azure/apis/resource/v1alpha1.ResourceGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-tf-azure/apis/rconfig.ExtractResourceName()
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StartVMOnConnect *bool `json:"startVmOnConnect,omitempty" tf:"start_vm_on_connect,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	ValidateEnvironment *bool `json:"validateEnvironment,omitempty" tf:"validate_environment,omitempty"`
}

type RegistrationInfoObservation struct {
	ResetToken *bool `json:"resetToken,omitempty" tf:"reset_token,omitempty"`
}

type RegistrationInfoParameters struct {

	// +kubebuilder:validation:Required
	ExpirationDate *string `json:"expirationDate" tf:"expiration_date,omitempty"`
}

// DesktopHostPoolSpec defines the desired state of DesktopHostPool
type DesktopHostPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DesktopHostPoolParameters `json:"forProvider"`
}

// DesktopHostPoolStatus defines the observed state of DesktopHostPool.
type DesktopHostPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DesktopHostPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DesktopHostPool is the Schema for the DesktopHostPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfazure}
type DesktopHostPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DesktopHostPoolSpec   `json:"spec"`
	Status            DesktopHostPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DesktopHostPoolList contains a list of DesktopHostPools
type DesktopHostPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DesktopHostPool `json:"items"`
}

// Repository type metadata.
var (
	DesktopHostPoolKind             = "DesktopHostPool"
	DesktopHostPoolGroupKind        = schema.GroupKind{Group: Group, Kind: DesktopHostPoolKind}.String()
	DesktopHostPoolKindAPIVersion   = DesktopHostPoolKind + "." + GroupVersion.String()
	DesktopHostPoolGroupVersionKind = GroupVersion.WithKind(DesktopHostPoolKind)
)

func init() {
	SchemeBuilder.Register(&DesktopHostPool{}, &DesktopHostPoolList{})
}
