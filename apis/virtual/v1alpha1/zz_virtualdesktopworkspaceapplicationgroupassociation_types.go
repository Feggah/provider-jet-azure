/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type VirtualDesktopWorkspaceApplicationGroupAssociationObservation struct {
}

type VirtualDesktopWorkspaceApplicationGroupAssociationParameters struct {
	ApplicationGroupId string `json:"applicationGroupId" tf:"application_group_id"`

	WorkspaceId string `json:"workspaceId" tf:"workspace_id"`
}

// VirtualDesktopWorkspaceApplicationGroupAssociationSpec defines the desired state of VirtualDesktopWorkspaceApplicationGroupAssociation
type VirtualDesktopWorkspaceApplicationGroupAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VirtualDesktopWorkspaceApplicationGroupAssociationParameters `json:"forProvider"`
}

// VirtualDesktopWorkspaceApplicationGroupAssociationStatus defines the observed state of VirtualDesktopWorkspaceApplicationGroupAssociation.
type VirtualDesktopWorkspaceApplicationGroupAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VirtualDesktopWorkspaceApplicationGroupAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopWorkspaceApplicationGroupAssociation is the Schema for the VirtualDesktopWorkspaceApplicationGroupAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualDesktopWorkspaceApplicationGroupAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualDesktopWorkspaceApplicationGroupAssociationSpec   `json:"spec"`
	Status            VirtualDesktopWorkspaceApplicationGroupAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualDesktopWorkspaceApplicationGroupAssociationList contains a list of VirtualDesktopWorkspaceApplicationGroupAssociations
type VirtualDesktopWorkspaceApplicationGroupAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualDesktopWorkspaceApplicationGroupAssociation `json:"items"`
}

// Repository type metadata.
var (
	VirtualDesktopWorkspaceApplicationGroupAssociationKind             = "VirtualDesktopWorkspaceApplicationGroupAssociation"
	VirtualDesktopWorkspaceApplicationGroupAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: VirtualDesktopWorkspaceApplicationGroupAssociationKind}.String()
	VirtualDesktopWorkspaceApplicationGroupAssociationKindAPIVersion   = VirtualDesktopWorkspaceApplicationGroupAssociationKind + "." + GroupVersion.String()
	VirtualDesktopWorkspaceApplicationGroupAssociationGroupVersionKind = GroupVersion.WithKind(VirtualDesktopWorkspaceApplicationGroupAssociationKind)
)

func init() {
	SchemeBuilder.Register(&VirtualDesktopWorkspaceApplicationGroupAssociation{}, &VirtualDesktopWorkspaceApplicationGroupAssociationList{})
}
