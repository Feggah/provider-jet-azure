/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type VirtualMachineExtensionObservation struct {
}

type VirtualMachineExtensionParameters struct {
	AutoUpgradeMinorVersion *bool `json:"autoUpgradeMinorVersion,omitempty" tf:"auto_upgrade_minor_version"`

	Name string `json:"name" tf:"name"`

	ProtectedSettings *string `json:"protectedSettings,omitempty" tf:"protected_settings"`

	Publisher string `json:"publisher" tf:"publisher"`

	Settings *string `json:"settings,omitempty" tf:"settings"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Type string `json:"type" tf:"type"`

	TypeHandlerVersion string `json:"typeHandlerVersion" tf:"type_handler_version"`

	VirtualMachineId string `json:"virtualMachineId" tf:"virtual_machine_id"`
}

// VirtualMachineExtensionSpec defines the desired state of VirtualMachineExtension
type VirtualMachineExtensionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VirtualMachineExtensionParameters `json:"forProvider"`
}

// VirtualMachineExtensionStatus defines the observed state of VirtualMachineExtension.
type VirtualMachineExtensionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VirtualMachineExtensionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualMachineExtension is the Schema for the VirtualMachineExtensions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualMachineExtension struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualMachineExtensionSpec   `json:"spec"`
	Status            VirtualMachineExtensionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualMachineExtensionList contains a list of VirtualMachineExtensions
type VirtualMachineExtensionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualMachineExtension `json:"items"`
}

// Repository type metadata.
var (
	VirtualMachineExtensionKind             = "VirtualMachineExtension"
	VirtualMachineExtensionGroupKind        = schema.GroupKind{Group: Group, Kind: VirtualMachineExtensionKind}.String()
	VirtualMachineExtensionKindAPIVersion   = VirtualMachineExtensionKind + "." + GroupVersion.String()
	VirtualMachineExtensionGroupVersionKind = GroupVersion.WithKind(VirtualMachineExtensionKind)
)

func init() {
	SchemeBuilder.Register(&VirtualMachineExtension{}, &VirtualMachineExtensionList{})
}
