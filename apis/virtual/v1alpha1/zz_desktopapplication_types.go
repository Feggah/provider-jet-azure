/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DesktopApplicationObservation struct {
}

type DesktopApplicationParameters struct {

	// +kubebuilder:validation:Required
	ApplicationGroupID *string `json:"applicationGroupId" tf:"application_group_id,omitempty"`

	// +kubebuilder:validation:Required
	CommandLineArgumentPolicy *string `json:"commandLineArgumentPolicy" tf:"command_line_argument_policy,omitempty"`

	// +kubebuilder:validation:Optional
	CommandLineArguments *string `json:"commandLineArguments,omitempty" tf:"command_line_arguments,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// +kubebuilder:validation:Optional
	IconIndex *int64 `json:"iconIndex,omitempty" tf:"icon_index,omitempty"`

	// +kubebuilder:validation:Optional
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// +kubebuilder:validation:Optional
	ShowInPortal *bool `json:"showInPortal,omitempty" tf:"show_in_portal,omitempty"`
}

// DesktopApplicationSpec defines the desired state of DesktopApplication
type DesktopApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DesktopApplicationParameters `json:"forProvider"`
}

// DesktopApplicationStatus defines the observed state of DesktopApplication.
type DesktopApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DesktopApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DesktopApplication is the Schema for the DesktopApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfazure}
type DesktopApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DesktopApplicationSpec   `json:"spec"`
	Status            DesktopApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DesktopApplicationList contains a list of DesktopApplications
type DesktopApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DesktopApplication `json:"items"`
}

// Repository type metadata.
var (
	DesktopApplicationKind             = "DesktopApplication"
	DesktopApplicationGroupKind        = schema.GroupKind{Group: Group, Kind: DesktopApplicationKind}.String()
	DesktopApplicationKindAPIVersion   = DesktopApplicationKind + "." + GroupVersion.String()
	DesktopApplicationGroupVersionKind = GroupVersion.WithKind(DesktopApplicationKind)
)

func init() {
	SchemeBuilder.Register(&DesktopApplication{}, &DesktopApplicationList{})
}
