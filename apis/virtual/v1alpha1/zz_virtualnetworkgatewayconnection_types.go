/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IpsecPolicyObservation struct {
}

type IpsecPolicyParameters struct {
	DhGroup string `json:"dhGroup" tf:"dh_group"`

	IkeEncryption string `json:"ikeEncryption" tf:"ike_encryption"`

	IkeIntegrity string `json:"ikeIntegrity" tf:"ike_integrity"`

	IpsecEncryption string `json:"ipsecEncryption" tf:"ipsec_encryption"`

	IpsecIntegrity string `json:"ipsecIntegrity" tf:"ipsec_integrity"`

	PfsGroup string `json:"pfsGroup" tf:"pfs_group"`

	SaDatasize *int64 `json:"saDatasize,omitempty" tf:"sa_datasize"`

	SaLifetime *int64 `json:"saLifetime,omitempty" tf:"sa_lifetime"`
}

type TrafficSelectorPolicyObservation struct {
}

type TrafficSelectorPolicyParameters struct {
	LocalAddressCidrs []string `json:"localAddressCidrs" tf:"local_address_cidrs"`

	RemoteAddressCidrs []string `json:"remoteAddressCidrs" tf:"remote_address_cidrs"`
}

type VirtualNetworkGatewayConnectionObservation struct {
}

type VirtualNetworkGatewayConnectionParameters struct {
	AuthorizationKey *string `json:"authorizationKey,omitempty" tf:"authorization_key"`

	ConnectionProtocol *string `json:"connectionProtocol,omitempty" tf:"connection_protocol"`

	DpdTimeoutSeconds *int64 `json:"dpdTimeoutSeconds,omitempty" tf:"dpd_timeout_seconds"`

	EnableBgp *bool `json:"enableBgp,omitempty" tf:"enable_bgp"`

	ExpressRouteCircuitID *string `json:"expressRouteCircuitId,omitempty" tf:"express_route_circuit_id"`

	ExpressRouteGatewayBypass *bool `json:"expressRouteGatewayBypass,omitempty" tf:"express_route_gateway_bypass"`

	IpsecPolicy []IpsecPolicyParameters `json:"ipsecPolicy,omitempty" tf:"ipsec_policy"`

	LocalAzureIPAddressEnabled *bool `json:"localAzureIpAddressEnabled,omitempty" tf:"local_azure_ip_address_enabled"`

	LocalNetworkGatewayID *string `json:"localNetworkGatewayId,omitempty" tf:"local_network_gateway_id"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	PeerVirtualNetworkGatewayID *string `json:"peerVirtualNetworkGatewayId,omitempty" tf:"peer_virtual_network_gateway_id"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RoutingWeight *int64 `json:"routingWeight,omitempty" tf:"routing_weight"`

	SharedKey *string `json:"sharedKey,omitempty" tf:"shared_key"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TrafficSelectorPolicy []TrafficSelectorPolicyParameters `json:"trafficSelectorPolicy,omitempty" tf:"traffic_selector_policy"`

	Type string `json:"type" tf:"type"`

	UsePolicyBasedTrafficSelectors *bool `json:"usePolicyBasedTrafficSelectors,omitempty" tf:"use_policy_based_traffic_selectors"`

	VirtualNetworkGatewayID string `json:"virtualNetworkGatewayId" tf:"virtual_network_gateway_id"`
}

// VirtualNetworkGatewayConnectionSpec defines the desired state of VirtualNetworkGatewayConnection
type VirtualNetworkGatewayConnectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VirtualNetworkGatewayConnectionParameters `json:"forProvider"`
}

// VirtualNetworkGatewayConnectionStatus defines the observed state of VirtualNetworkGatewayConnection.
type VirtualNetworkGatewayConnectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VirtualNetworkGatewayConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualNetworkGatewayConnection is the Schema for the VirtualNetworkGatewayConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualNetworkGatewayConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworkGatewayConnectionSpec   `json:"spec"`
	Status            VirtualNetworkGatewayConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualNetworkGatewayConnectionList contains a list of VirtualNetworkGatewayConnections
type VirtualNetworkGatewayConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetworkGatewayConnection `json:"items"`
}

// Repository type metadata.
var (
	VirtualNetworkGatewayConnectionKind             = "VirtualNetworkGatewayConnection"
	VirtualNetworkGatewayConnectionGroupKind        = schema.GroupKind{Group: Group, Kind: VirtualNetworkGatewayConnectionKind}.String()
	VirtualNetworkGatewayConnectionKindAPIVersion   = VirtualNetworkGatewayConnectionKind + "." + GroupVersion.String()
	VirtualNetworkGatewayConnectionGroupVersionKind = GroupVersion.WithKind(VirtualNetworkGatewayConnectionKind)
)

func init() {
	SchemeBuilder.Register(&VirtualNetworkGatewayConnection{}, &VirtualNetworkGatewayConnectionList{})
}
