/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DNSSettingsObservation struct {
}

type DNSSettingsParameters struct {
	DNSServers []string `json:"dnsServers" tf:"dns_servers"`
}

type ExtensionObservation struct {
}

type ExtensionParameters struct {
	AutoUpgradeMinorVersion *bool `json:"autoUpgradeMinorVersion,omitempty" tf:"auto_upgrade_minor_version"`

	Name string `json:"name" tf:"name"`

	ProtectedSettings *string `json:"protectedSettings,omitempty" tf:"protected_settings"`

	ProvisionAfterExtensions []string `json:"provisionAfterExtensions,omitempty" tf:"provision_after_extensions"`

	Publisher string `json:"publisher" tf:"publisher"`

	Settings *string `json:"settings,omitempty" tf:"settings"`

	Type string `json:"type" tf:"type"`

	TypeHandlerVersion string `json:"typeHandlerVersion" tf:"type_handler_version"`
}

type IPConfigurationObservation struct {
}

type IPConfigurationParameters struct {
	ApplicationGatewayBackendAddressPoolIds []string `json:"applicationGatewayBackendAddressPoolIds,omitempty" tf:"application_gateway_backend_address_pool_ids"`

	ApplicationSecurityGroupIds []string `json:"applicationSecurityGroupIds,omitempty" tf:"application_security_group_ids"`

	LoadBalancerBackendAddressPoolIds []string `json:"loadBalancerBackendAddressPoolIds,omitempty" tf:"load_balancer_backend_address_pool_ids"`

	LoadBalancerInboundNatRulesIds []string `json:"loadBalancerInboundNatRulesIds,omitempty" tf:"load_balancer_inbound_nat_rules_ids"`

	Name string `json:"name" tf:"name"`

	Primary bool `json:"primary" tf:"primary"`

	PublicIPAddressConfiguration []PublicIPAddressConfigurationParameters `json:"publicIpAddressConfiguration,omitempty" tf:"public_ip_address_configuration"`

	SubnetID string `json:"subnetId" tf:"subnet_id"`
}

type NetworkProfileObservation struct {
}

type NetworkProfileParameters struct {
	AcceleratedNetworking *bool `json:"acceleratedNetworking,omitempty" tf:"accelerated_networking"`

	DNSSettings []DNSSettingsParameters `json:"dnsSettings,omitempty" tf:"dns_settings"`

	IPConfiguration []IPConfigurationParameters `json:"ipConfiguration" tf:"ip_configuration"`

	IPForwarding *bool `json:"ipForwarding,omitempty" tf:"ip_forwarding"`

	Name string `json:"name" tf:"name"`

	NetworkSecurityGroupID *string `json:"networkSecurityGroupId,omitempty" tf:"network_security_group_id"`

	Primary bool `json:"primary" tf:"primary"`
}

type OsProfileLinuxConfigSSHKeysObservation struct {
}

type OsProfileLinuxConfigSSHKeysParameters struct {
	KeyData *string `json:"keyData,omitempty" tf:"key_data"`

	Path string `json:"path" tf:"path"`
}

type OsProfileSecretsVaultCertificatesObservation struct {
}

type OsProfileSecretsVaultCertificatesParameters struct {
	CertificateStore *string `json:"certificateStore,omitempty" tf:"certificate_store"`

	CertificateURL string `json:"certificateUrl" tf:"certificate_url"`
}

type OsProfileWindowsConfigAdditionalUnattendConfigObservation struct {
}

type OsProfileWindowsConfigAdditionalUnattendConfigParameters struct {
	Component string `json:"component" tf:"component"`

	Content string `json:"content" tf:"content"`

	Pass string `json:"pass" tf:"pass"`

	SettingName string `json:"settingName" tf:"setting_name"`
}

type OsProfileWindowsConfigWinrmObservation struct {
}

type OsProfileWindowsConfigWinrmParameters struct {
	CertificateURL *string `json:"certificateUrl,omitempty" tf:"certificate_url"`

	Protocol string `json:"protocol" tf:"protocol"`
}

type PublicIPAddressConfigurationObservation struct {
}

type PublicIPAddressConfigurationParameters struct {
	DomainNameLabel string `json:"domainNameLabel" tf:"domain_name_label"`

	IdleTimeout int64 `json:"idleTimeout" tf:"idle_timeout"`

	Name string `json:"name" tf:"name"`
}

type RollingUpgradePolicyObservation struct {
}

type RollingUpgradePolicyParameters struct {
	MaxBatchInstancePercent *int64 `json:"maxBatchInstancePercent,omitempty" tf:"max_batch_instance_percent"`

	MaxUnhealthyInstancePercent *int64 `json:"maxUnhealthyInstancePercent,omitempty" tf:"max_unhealthy_instance_percent"`

	MaxUnhealthyUpgradedInstancePercent *int64 `json:"maxUnhealthyUpgradedInstancePercent,omitempty" tf:"max_unhealthy_upgraded_instance_percent"`

	PauseTimeBetweenBatches *string `json:"pauseTimeBetweenBatches,omitempty" tf:"pause_time_between_batches"`
}

type SkuObservation struct {
}

type SkuParameters struct {
	Capacity int64 `json:"capacity" tf:"capacity"`

	Name string `json:"name" tf:"name"`

	Tier *string `json:"tier,omitempty" tf:"tier"`
}

type StorageProfileDataDiskObservation struct {
}

type StorageProfileDataDiskParameters struct {
	Caching *string `json:"caching,omitempty" tf:"caching"`

	CreateOption string `json:"createOption" tf:"create_option"`

	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`

	Lun int64 `json:"lun" tf:"lun"`

	ManagedDiskType *string `json:"managedDiskType,omitempty" tf:"managed_disk_type"`
}

type StorageProfileImageReferenceObservation struct {
}

type StorageProfileImageReferenceParameters struct {
	ID *string `json:"id,omitempty" tf:"id"`

	Offer *string `json:"offer,omitempty" tf:"offer"`

	Publisher *string `json:"publisher,omitempty" tf:"publisher"`

	Sku *string `json:"sku,omitempty" tf:"sku"`

	Version *string `json:"version,omitempty" tf:"version"`
}

type StorageProfileOsDiskObservation struct {
}

type StorageProfileOsDiskParameters struct {
	Caching *string `json:"caching,omitempty" tf:"caching"`

	CreateOption string `json:"createOption" tf:"create_option"`

	Image *string `json:"image,omitempty" tf:"image"`

	ManagedDiskType *string `json:"managedDiskType,omitempty" tf:"managed_disk_type"`

	Name *string `json:"name,omitempty" tf:"name"`

	OsType *string `json:"osType,omitempty" tf:"os_type"`

	VhdContainers []string `json:"vhdContainers,omitempty" tf:"vhd_containers"`
}

type VirtualMachineScaleSetBootDiagnosticsObservation struct {
}

type VirtualMachineScaleSetBootDiagnosticsParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	StorageURI string `json:"storageUri" tf:"storage_uri"`
}

type VirtualMachineScaleSetIdentityObservation struct {
	PrincipalID string `json:"principalId" tf:"principal_id"`
}

type VirtualMachineScaleSetIdentityParameters struct {
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	Type string `json:"type" tf:"type"`
}

type VirtualMachineScaleSetObservation struct {
}

type VirtualMachineScaleSetOsProfileLinuxConfigObservation struct {
}

type VirtualMachineScaleSetOsProfileLinuxConfigParameters struct {
	DisablePasswordAuthentication *bool `json:"disablePasswordAuthentication,omitempty" tf:"disable_password_authentication"`

	SSHKeys []OsProfileLinuxConfigSSHKeysParameters `json:"sshKeys,omitempty" tf:"ssh_keys"`
}

type VirtualMachineScaleSetOsProfileObservation struct {
}

type VirtualMachineScaleSetOsProfileParameters struct {
	AdminPassword *string `json:"adminPassword,omitempty" tf:"admin_password"`

	AdminUsername string `json:"adminUsername" tf:"admin_username"`

	ComputerNamePrefix string `json:"computerNamePrefix" tf:"computer_name_prefix"`

	CustomData *string `json:"customData,omitempty" tf:"custom_data"`
}

type VirtualMachineScaleSetOsProfileSecretsObservation struct {
}

type VirtualMachineScaleSetOsProfileSecretsParameters struct {
	SourceVaultID string `json:"sourceVaultId" tf:"source_vault_id"`

	VaultCertificates []OsProfileSecretsVaultCertificatesParameters `json:"vaultCertificates,omitempty" tf:"vault_certificates"`
}

type VirtualMachineScaleSetOsProfileWindowsConfigObservation struct {
}

type VirtualMachineScaleSetOsProfileWindowsConfigParameters struct {
	AdditionalUnattendConfig []OsProfileWindowsConfigAdditionalUnattendConfigParameters `json:"additionalUnattendConfig,omitempty" tf:"additional_unattend_config"`

	EnableAutomaticUpgrades *bool `json:"enableAutomaticUpgrades,omitempty" tf:"enable_automatic_upgrades"`

	ProvisionVMAgent *bool `json:"provisionVmAgent,omitempty" tf:"provision_vm_agent"`

	Winrm []OsProfileWindowsConfigWinrmParameters `json:"winrm,omitempty" tf:"winrm"`
}

type VirtualMachineScaleSetParameters struct {
	AutomaticOsUpgrade *bool `json:"automaticOsUpgrade,omitempty" tf:"automatic_os_upgrade"`

	BootDiagnostics []VirtualMachineScaleSetBootDiagnosticsParameters `json:"bootDiagnostics,omitempty" tf:"boot_diagnostics"`

	EvictionPolicy *string `json:"evictionPolicy,omitempty" tf:"eviction_policy"`

	Extension []ExtensionParameters `json:"extension,omitempty" tf:"extension"`

	HealthProbeID *string `json:"healthProbeId,omitempty" tf:"health_probe_id"`

	Identity []VirtualMachineScaleSetIdentityParameters `json:"identity,omitempty" tf:"identity"`

	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	NetworkProfile []NetworkProfileParameters `json:"networkProfile" tf:"network_profile"`

	OsProfile []VirtualMachineScaleSetOsProfileParameters `json:"osProfile" tf:"os_profile"`

	OsProfileLinuxConfig []VirtualMachineScaleSetOsProfileLinuxConfigParameters `json:"osProfileLinuxConfig,omitempty" tf:"os_profile_linux_config"`

	OsProfileSecrets []VirtualMachineScaleSetOsProfileSecretsParameters `json:"osProfileSecrets,omitempty" tf:"os_profile_secrets"`

	OsProfileWindowsConfig []VirtualMachineScaleSetOsProfileWindowsConfigParameters `json:"osProfileWindowsConfig,omitempty" tf:"os_profile_windows_config"`

	Overprovision *bool `json:"overprovision,omitempty" tf:"overprovision"`

	Plan []VirtualMachineScaleSetPlanParameters `json:"plan,omitempty" tf:"plan"`

	Priority *string `json:"priority,omitempty" tf:"priority"`

	ProximityPlacementGroupID *string `json:"proximityPlacementGroupId,omitempty" tf:"proximity_placement_group_id"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RollingUpgradePolicy []RollingUpgradePolicyParameters `json:"rollingUpgradePolicy,omitempty" tf:"rolling_upgrade_policy"`

	SinglePlacementGroup *bool `json:"singlePlacementGroup,omitempty" tf:"single_placement_group"`

	Sku []SkuParameters `json:"sku" tf:"sku"`

	StorageProfileDataDisk []StorageProfileDataDiskParameters `json:"storageProfileDataDisk,omitempty" tf:"storage_profile_data_disk"`

	StorageProfileImageReference []StorageProfileImageReferenceParameters `json:"storageProfileImageReference,omitempty" tf:"storage_profile_image_reference"`

	StorageProfileOsDisk []StorageProfileOsDiskParameters `json:"storageProfileOsDisk" tf:"storage_profile_os_disk"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	UpgradePolicyMode string `json:"upgradePolicyMode" tf:"upgrade_policy_mode"`

	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type VirtualMachineScaleSetPlanObservation struct {
}

type VirtualMachineScaleSetPlanParameters struct {
	Name string `json:"name" tf:"name"`

	Product string `json:"product" tf:"product"`

	Publisher string `json:"publisher" tf:"publisher"`
}

// VirtualMachineScaleSetSpec defines the desired state of VirtualMachineScaleSet
type VirtualMachineScaleSetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VirtualMachineScaleSetParameters `json:"forProvider"`
}

// VirtualMachineScaleSetStatus defines the observed state of VirtualMachineScaleSet.
type VirtualMachineScaleSetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VirtualMachineScaleSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualMachineScaleSet is the Schema for the VirtualMachineScaleSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualMachineScaleSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualMachineScaleSetSpec   `json:"spec"`
	Status            VirtualMachineScaleSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualMachineScaleSetList contains a list of VirtualMachineScaleSets
type VirtualMachineScaleSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualMachineScaleSet `json:"items"`
}

// Repository type metadata.
var (
	VirtualMachineScaleSetKind             = "VirtualMachineScaleSet"
	VirtualMachineScaleSetGroupKind        = schema.GroupKind{Group: Group, Kind: VirtualMachineScaleSetKind}.String()
	VirtualMachineScaleSetKindAPIVersion   = VirtualMachineScaleSetKind + "." + GroupVersion.String()
	VirtualMachineScaleSetGroupVersionKind = GroupVersion.WithKind(VirtualMachineScaleSetKind)
)

func init() {
	SchemeBuilder.Register(&VirtualMachineScaleSet{}, &VirtualMachineScaleSetList{})
}
