/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AdditionalCapabilitiesObservation struct {
}

type AdditionalCapabilitiesParameters struct {
	UltraSsdEnabled bool `json:"ultraSsdEnabled" tf:"ultra_ssd_enabled"`
}

type AdditionalUnattendConfigObservation struct {
}

type AdditionalUnattendConfigParameters struct {
	Component string `json:"component" tf:"component"`

	Content string `json:"content" tf:"content"`

	Pass string `json:"pass" tf:"pass"`

	SettingName string `json:"settingName" tf:"setting_name"`
}

type BootDiagnosticsObservation struct {
}

type BootDiagnosticsParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	StorageUri string `json:"storageUri" tf:"storage_uri"`
}

type IdentityObservation struct {
	PrincipalId string `json:"principalId" tf:"principal_id"`
}

type IdentityParameters struct {
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	Type string `json:"type" tf:"type"`
}

type OsProfileLinuxConfigObservation struct {
}

type OsProfileLinuxConfigParameters struct {
	DisablePasswordAuthentication bool `json:"disablePasswordAuthentication" tf:"disable_password_authentication"`

	SshKeys []SshKeysParameters `json:"sshKeys,omitempty" tf:"ssh_keys"`
}

type OsProfileObservation struct {
}

type OsProfileParameters struct {
	AdminPassword *string `json:"adminPassword,omitempty" tf:"admin_password"`

	AdminUsername string `json:"adminUsername" tf:"admin_username"`

	ComputerName string `json:"computerName" tf:"computer_name"`

	CustomData *string `json:"customData,omitempty" tf:"custom_data"`
}

type OsProfileSecretsObservation struct {
}

type OsProfileSecretsParameters struct {
	SourceVaultId string `json:"sourceVaultId" tf:"source_vault_id"`

	VaultCertificates []VaultCertificatesParameters `json:"vaultCertificates,omitempty" tf:"vault_certificates"`
}

type OsProfileWindowsConfigObservation struct {
}

type OsProfileWindowsConfigParameters struct {
	AdditionalUnattendConfig []AdditionalUnattendConfigParameters `json:"additionalUnattendConfig,omitempty" tf:"additional_unattend_config"`

	EnableAutomaticUpgrades *bool `json:"enableAutomaticUpgrades,omitempty" tf:"enable_automatic_upgrades"`

	ProvisionVmAgent *bool `json:"provisionVmAgent,omitempty" tf:"provision_vm_agent"`

	Timezone *string `json:"timezone,omitempty" tf:"timezone"`

	Winrm []WinrmParameters `json:"winrm,omitempty" tf:"winrm"`
}

type PlanObservation struct {
}

type PlanParameters struct {
	Name string `json:"name" tf:"name"`

	Product string `json:"product" tf:"product"`

	Publisher string `json:"publisher" tf:"publisher"`
}

type SshKeysObservation struct {
}

type SshKeysParameters struct {
	KeyData string `json:"keyData" tf:"key_data"`

	Path string `json:"path" tf:"path"`
}

type StorageDataDiskObservation struct {
}

type StorageDataDiskParameters struct {
	Caching *string `json:"caching,omitempty" tf:"caching"`

	CreateOption string `json:"createOption" tf:"create_option"`

	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`

	Lun int64 `json:"lun" tf:"lun"`

	ManagedDiskId *string `json:"managedDiskId,omitempty" tf:"managed_disk_id"`

	ManagedDiskType *string `json:"managedDiskType,omitempty" tf:"managed_disk_type"`

	Name string `json:"name" tf:"name"`

	VhdUri *string `json:"vhdUri,omitempty" tf:"vhd_uri"`

	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

type StorageImageReferenceObservation struct {
}

type StorageImageReferenceParameters struct {
	Id *string `json:"id,omitempty" tf:"id"`

	Offer *string `json:"offer,omitempty" tf:"offer"`

	Publisher *string `json:"publisher,omitempty" tf:"publisher"`

	Sku *string `json:"sku,omitempty" tf:"sku"`

	Version *string `json:"version,omitempty" tf:"version"`
}

type StorageOsDiskObservation struct {
}

type StorageOsDiskParameters struct {
	Caching *string `json:"caching,omitempty" tf:"caching"`

	CreateOption string `json:"createOption" tf:"create_option"`

	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`

	ImageUri *string `json:"imageUri,omitempty" tf:"image_uri"`

	ManagedDiskId *string `json:"managedDiskId,omitempty" tf:"managed_disk_id"`

	ManagedDiskType *string `json:"managedDiskType,omitempty" tf:"managed_disk_type"`

	Name string `json:"name" tf:"name"`

	OsType *string `json:"osType,omitempty" tf:"os_type"`

	VhdUri *string `json:"vhdUri,omitempty" tf:"vhd_uri"`

	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

type VaultCertificatesObservation struct {
}

type VaultCertificatesParameters struct {
	CertificateStore *string `json:"certificateStore,omitempty" tf:"certificate_store"`

	CertificateUrl string `json:"certificateUrl" tf:"certificate_url"`
}

type VirtualMachineObservation struct {
}

type VirtualMachineParameters struct {
	AdditionalCapabilities []AdditionalCapabilitiesParameters `json:"additionalCapabilities,omitempty" tf:"additional_capabilities"`

	AvailabilitySetId *string `json:"availabilitySetId,omitempty" tf:"availability_set_id"`

	BootDiagnostics []BootDiagnosticsParameters `json:"bootDiagnostics,omitempty" tf:"boot_diagnostics"`

	DeleteDataDisksOnTermination *bool `json:"deleteDataDisksOnTermination,omitempty" tf:"delete_data_disks_on_termination"`

	DeleteOsDiskOnTermination *bool `json:"deleteOsDiskOnTermination,omitempty" tf:"delete_os_disk_on_termination"`

	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	NetworkInterfaceIds []string `json:"networkInterfaceIds" tf:"network_interface_ids"`

	OsProfile []OsProfileParameters `json:"osProfile,omitempty" tf:"os_profile"`

	OsProfileLinuxConfig []OsProfileLinuxConfigParameters `json:"osProfileLinuxConfig,omitempty" tf:"os_profile_linux_config"`

	OsProfileSecrets []OsProfileSecretsParameters `json:"osProfileSecrets,omitempty" tf:"os_profile_secrets"`

	OsProfileWindowsConfig []OsProfileWindowsConfigParameters `json:"osProfileWindowsConfig,omitempty" tf:"os_profile_windows_config"`

	Plan []PlanParameters `json:"plan,omitempty" tf:"plan"`

	PrimaryNetworkInterfaceId *string `json:"primaryNetworkInterfaceId,omitempty" tf:"primary_network_interface_id"`

	ProximityPlacementGroupId *string `json:"proximityPlacementGroupId,omitempty" tf:"proximity_placement_group_id"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	StorageDataDisk []StorageDataDiskParameters `json:"storageDataDisk,omitempty" tf:"storage_data_disk"`

	StorageImageReference []StorageImageReferenceParameters `json:"storageImageReference,omitempty" tf:"storage_image_reference"`

	StorageOsDisk []StorageOsDiskParameters `json:"storageOsDisk" tf:"storage_os_disk"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	VmSize string `json:"vmSize" tf:"vm_size"`

	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type WinrmObservation struct {
}

type WinrmParameters struct {
	CertificateUrl *string `json:"certificateUrl,omitempty" tf:"certificate_url"`

	Protocol string `json:"protocol" tf:"protocol"`
}

// VirtualMachineSpec defines the desired state of VirtualMachine
type VirtualMachineSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VirtualMachineParameters `json:"forProvider"`
}

// VirtualMachineStatus defines the observed state of VirtualMachine.
type VirtualMachineStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VirtualMachineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualMachine is the Schema for the VirtualMachines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualMachine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualMachineSpec   `json:"spec"`
	Status            VirtualMachineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualMachineList contains a list of VirtualMachines
type VirtualMachineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualMachine `json:"items"`
}

// Repository type metadata.
var (
	VirtualMachineKind             = "VirtualMachine"
	VirtualMachineGroupKind        = schema.GroupKind{Group: Group, Kind: VirtualMachineKind}.String()
	VirtualMachineKindAPIVersion   = VirtualMachineKind + "." + GroupVersion.String()
	VirtualMachineGroupVersionKind = GroupVersion.WithKind(VirtualMachineKind)
)

func init() {
	SchemeBuilder.Register(&VirtualMachine{}, &VirtualMachineList{})
}
