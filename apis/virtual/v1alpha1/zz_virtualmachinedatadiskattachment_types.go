/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VirtualMachineDataDiskAttachmentObservation struct {
}

type VirtualMachineDataDiskAttachmentParameters struct {

	// +kubebuilder:validation:Required
	Caching string `json:"caching" tf:"caching"`

	// +kubebuilder:validation:Optional
	CreateOption *string `json:"createOption,omitempty" tf:"create_option"`

	// +kubebuilder:validation:Required
	Lun int64 `json:"lun" tf:"lun"`

	// +kubebuilder:validation:Required
	ManagedDiskID string `json:"managedDiskId" tf:"managed_disk_id"`

	// +kubebuilder:validation:Required
	VirtualMachineID string `json:"virtualMachineId" tf:"virtual_machine_id"`

	// +kubebuilder:validation:Optional
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

// VirtualMachineDataDiskAttachmentSpec defines the desired state of VirtualMachineDataDiskAttachment
type VirtualMachineDataDiskAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualMachineDataDiskAttachmentParameters `json:"forProvider"`
}

// VirtualMachineDataDiskAttachmentStatus defines the observed state of VirtualMachineDataDiskAttachment.
type VirtualMachineDataDiskAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualMachineDataDiskAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualMachineDataDiskAttachment is the Schema for the VirtualMachineDataDiskAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type VirtualMachineDataDiskAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualMachineDataDiskAttachmentSpec   `json:"spec"`
	Status            VirtualMachineDataDiskAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualMachineDataDiskAttachmentList contains a list of VirtualMachineDataDiskAttachments
type VirtualMachineDataDiskAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualMachineDataDiskAttachment `json:"items"`
}

// Repository type metadata.
var (
	VirtualMachineDataDiskAttachmentKind             = "VirtualMachineDataDiskAttachment"
	VirtualMachineDataDiskAttachmentGroupKind        = schema.GroupKind{Group: Group, Kind: VirtualMachineDataDiskAttachmentKind}.String()
	VirtualMachineDataDiskAttachmentKindAPIVersion   = VirtualMachineDataDiskAttachmentKind + "." + GroupVersion.String()
	VirtualMachineDataDiskAttachmentGroupVersionKind = GroupVersion.WithKind(VirtualMachineDataDiskAttachmentKind)
)

func init() {
	SchemeBuilder.Register(&VirtualMachineDataDiskAttachment{}, &VirtualMachineDataDiskAttachmentList{})
}
