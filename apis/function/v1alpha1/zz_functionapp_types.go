/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ActiveDirectoryObservation struct {
}

type ActiveDirectoryParameters struct {
	AllowedAudiences []string `json:"allowedAudiences,omitempty" tf:"allowed_audiences"`

	ClientID string `json:"clientId" tf:"client_id"`

	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret"`
}

type AuthSettingsObservation struct {
}

type AuthSettingsParameters struct {
	ActiveDirectory []ActiveDirectoryParameters `json:"activeDirectory,omitempty" tf:"active_directory"`

	AdditionalLoginParams map[string]string `json:"additionalLoginParams,omitempty" tf:"additional_login_params"`

	AllowedExternalRedirectUrls []string `json:"allowedExternalRedirectUrls,omitempty" tf:"allowed_external_redirect_urls"`

	DefaultProvider *string `json:"defaultProvider,omitempty" tf:"default_provider"`

	Enabled bool `json:"enabled" tf:"enabled"`

	Facebook []FacebookParameters `json:"facebook,omitempty" tf:"facebook"`

	Google []GoogleParameters `json:"google,omitempty" tf:"google"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer"`

	Microsoft []MicrosoftParameters `json:"microsoft,omitempty" tf:"microsoft"`

	RuntimeVersion *string `json:"runtimeVersion,omitempty" tf:"runtime_version"`

	TokenRefreshExtensionHours *float64 `json:"tokenRefreshExtensionHours,omitempty" tf:"token_refresh_extension_hours"`

	TokenStoreEnabled *bool `json:"tokenStoreEnabled,omitempty" tf:"token_store_enabled"`

	Twitter []TwitterParameters `json:"twitter,omitempty" tf:"twitter"`

	UnauthenticatedClientAction *string `json:"unauthenticatedClientAction,omitempty" tf:"unauthenticated_client_action"`
}

type ConnectionStringObservation struct {
}

type ConnectionStringParameters struct {
	Name string `json:"name" tf:"name"`

	Type string `json:"type" tf:"type"`

	Value string `json:"value" tf:"value"`
}

type CorsObservation struct {
}

type CorsParameters struct {
	AllowedOrigins []string `json:"allowedOrigins" tf:"allowed_origins"`

	SupportCredentials *bool `json:"supportCredentials,omitempty" tf:"support_credentials"`
}

type FacebookObservation struct {
}

type FacebookParameters struct {
	AppID string `json:"appId" tf:"app_id"`

	AppSecret string `json:"appSecret" tf:"app_secret"`

	OauthScopes []string `json:"oauthScopes,omitempty" tf:"oauth_scopes"`
}

type FunctionAppObservation struct {
	CustomDomainVerificationID string `json:"customDomainVerificationId" tf:"custom_domain_verification_id"`

	DefaultHostname string `json:"defaultHostname" tf:"default_hostname"`

	Kind string `json:"kind" tf:"kind"`

	OutboundIPAddresses string `json:"outboundIpAddresses" tf:"outbound_ip_addresses"`

	PossibleOutboundIPAddresses string `json:"possibleOutboundIpAddresses" tf:"possible_outbound_ip_addresses"`

	SiteCredential []SiteCredentialObservation `json:"siteCredential" tf:"site_credential"`
}

type FunctionAppParameters struct {
	AppServicePlanID string `json:"appServicePlanId" tf:"app_service_plan_id"`

	AppSettings map[string]string `json:"appSettings,omitempty" tf:"app_settings"`

	AuthSettings []AuthSettingsParameters `json:"authSettings,omitempty" tf:"auth_settings"`

	ClientAffinityEnabled *bool `json:"clientAffinityEnabled,omitempty" tf:"client_affinity_enabled"`

	ClientCertMode *string `json:"clientCertMode,omitempty" tf:"client_cert_mode"`

	ConnectionString []ConnectionStringParameters `json:"connectionString,omitempty" tf:"connection_string"`

	DailyMemoryTimeQuota *int64 `json:"dailyMemoryTimeQuota,omitempty" tf:"daily_memory_time_quota"`

	EnableBuiltinLogging *bool `json:"enableBuiltinLogging,omitempty" tf:"enable_builtin_logging"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	HTTPSOnly *bool `json:"httpsOnly,omitempty" tf:"https_only"`

	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	OsType *string `json:"osType,omitempty" tf:"os_type"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SiteConfig []SiteConfigParameters `json:"siteConfig,omitempty" tf:"site_config"`

	SourceControl []SourceControlParameters `json:"sourceControl,omitempty" tf:"source_control"`

	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty" tf:"storage_account_access_key"`

	StorageAccountName *string `json:"storageAccountName,omitempty" tf:"storage_account_name"`

	StorageConnectionString *string `json:"storageConnectionString,omitempty" tf:"storage_connection_string"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Version *string `json:"version,omitempty" tf:"version"`
}

type GoogleObservation struct {
}

type GoogleParameters struct {
	ClientID string `json:"clientId" tf:"client_id"`

	ClientSecret string `json:"clientSecret" tf:"client_secret"`

	OauthScopes []string `json:"oauthScopes,omitempty" tf:"oauth_scopes"`
}

type HeadersObservation struct {
}

type HeadersParameters struct {
	XAzureFdid []string `json:"xAzureFdid,omitempty" tf:"x_azure_fdid"`

	XFdHealthProbe []string `json:"xFdHealthProbe,omitempty" tf:"x_fd_health_probe"`

	XForwardedFor []string `json:"xForwardedFor,omitempty" tf:"x_forwarded_for"`

	XForwardedHost []string `json:"xForwardedHost,omitempty" tf:"x_forwarded_host"`
}

type IPRestrictionObservation struct {
}

type IPRestrictionParameters struct {
	Action *string `json:"action,omitempty" tf:"action"`

	Headers []HeadersParameters `json:"headers,omitempty" tf:"headers"`

	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`

	Name *string `json:"name,omitempty" tf:"name"`

	Priority *int64 `json:"priority,omitempty" tf:"priority"`

	ServiceTag *string `json:"serviceTag,omitempty" tf:"service_tag"`

	VirtualNetworkSubnetID *string `json:"virtualNetworkSubnetId,omitempty" tf:"virtual_network_subnet_id"`
}

type IdentityObservation struct {
	PrincipalID string `json:"principalId" tf:"principal_id"`

	TenantID string `json:"tenantId" tf:"tenant_id"`
}

type IdentityParameters struct {
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	Type string `json:"type" tf:"type"`
}

type MicrosoftObservation struct {
}

type MicrosoftParameters struct {
	ClientID string `json:"clientId" tf:"client_id"`

	ClientSecret string `json:"clientSecret" tf:"client_secret"`

	OauthScopes []string `json:"oauthScopes,omitempty" tf:"oauth_scopes"`
}

type ScmIPRestrictionHeadersObservation struct {
}

type ScmIPRestrictionHeadersParameters struct {
	XAzureFdid []string `json:"xAzureFdid,omitempty" tf:"x_azure_fdid"`

	XFdHealthProbe []string `json:"xFdHealthProbe,omitempty" tf:"x_fd_health_probe"`

	XForwardedFor []string `json:"xForwardedFor,omitempty" tf:"x_forwarded_for"`

	XForwardedHost []string `json:"xForwardedHost,omitempty" tf:"x_forwarded_host"`
}

type ScmIPRestrictionObservation struct {
}

type ScmIPRestrictionParameters struct {
	Action *string `json:"action,omitempty" tf:"action"`

	Headers []ScmIPRestrictionHeadersParameters `json:"headers,omitempty" tf:"headers"`

	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`

	Name *string `json:"name,omitempty" tf:"name"`

	Priority *int64 `json:"priority,omitempty" tf:"priority"`

	ServiceTag *string `json:"serviceTag,omitempty" tf:"service_tag"`

	VirtualNetworkSubnetID *string `json:"virtualNetworkSubnetId,omitempty" tf:"virtual_network_subnet_id"`
}

type SiteConfigObservation struct {
}

type SiteConfigParameters struct {
	AlwaysOn *bool `json:"alwaysOn,omitempty" tf:"always_on"`

	AppScaleLimit *int64 `json:"appScaleLimit,omitempty" tf:"app_scale_limit"`

	AutoSwapSlotName *string `json:"autoSwapSlotName,omitempty" tf:"auto_swap_slot_name"`

	Cors []CorsParameters `json:"cors,omitempty" tf:"cors"`

	DotnetFrameworkVersion *string `json:"dotnetFrameworkVersion,omitempty" tf:"dotnet_framework_version"`

	ElasticInstanceMinimum *int64 `json:"elasticInstanceMinimum,omitempty" tf:"elastic_instance_minimum"`

	FtpsState *string `json:"ftpsState,omitempty" tf:"ftps_state"`

	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path"`

	Http2Enabled *bool `json:"http2Enabled,omitempty" tf:"http2_enabled"`

	IPRestriction []IPRestrictionParameters `json:"ipRestriction,omitempty" tf:"ip_restriction"`

	JavaVersion *string `json:"javaVersion,omitempty" tf:"java_version"`

	LinuxFxVersion *string `json:"linuxFxVersion,omitempty" tf:"linux_fx_version"`

	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version"`

	PreWarmedInstanceCount *int64 `json:"preWarmedInstanceCount,omitempty" tf:"pre_warmed_instance_count"`

	RuntimeScaleMonitoringEnabled *bool `json:"runtimeScaleMonitoringEnabled,omitempty" tf:"runtime_scale_monitoring_enabled"`

	ScmIPRestriction []ScmIPRestrictionParameters `json:"scmIpRestriction,omitempty" tf:"scm_ip_restriction"`

	ScmType *string `json:"scmType,omitempty" tf:"scm_type"`

	ScmUseMainIPRestriction *bool `json:"scmUseMainIpRestriction,omitempty" tf:"scm_use_main_ip_restriction"`

	Use32BitWorkerProcess *bool `json:"use32BitWorkerProcess,omitempty" tf:"use_32_bit_worker_process"`

	WebsocketsEnabled *bool `json:"websocketsEnabled,omitempty" tf:"websockets_enabled"`
}

type SiteCredentialObservation struct {
	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type SiteCredentialParameters struct {
}

type SourceControlObservation struct {
}

type SourceControlParameters struct {
	Branch *string `json:"branch,omitempty" tf:"branch"`

	ManualIntegration *bool `json:"manualIntegration,omitempty" tf:"manual_integration"`

	RepoURL *string `json:"repoUrl,omitempty" tf:"repo_url"`

	RollbackEnabled *bool `json:"rollbackEnabled,omitempty" tf:"rollback_enabled"`

	UseMercurial *bool `json:"useMercurial,omitempty" tf:"use_mercurial"`
}

type TwitterObservation struct {
}

type TwitterParameters struct {
	ConsumerKey string `json:"consumerKey" tf:"consumer_key"`

	ConsumerSecret string `json:"consumerSecret" tf:"consumer_secret"`
}

// FunctionAppSpec defines the desired state of FunctionApp
type FunctionAppSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       FunctionAppParameters `json:"forProvider"`
}

// FunctionAppStatus defines the observed state of FunctionApp.
type FunctionAppStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          FunctionAppObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionApp is the Schema for the FunctionApps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type FunctionApp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FunctionAppSpec   `json:"spec"`
	Status            FunctionAppStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionAppList contains a list of FunctionApps
type FunctionAppList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FunctionApp `json:"items"`
}

// Repository type metadata.
var (
	FunctionAppKind             = "FunctionApp"
	FunctionAppGroupKind        = schema.GroupKind{Group: Group, Kind: FunctionAppKind}.String()
	FunctionAppKindAPIVersion   = FunctionAppKind + "." + GroupVersion.String()
	FunctionAppGroupVersionKind = GroupVersion.WithKind(FunctionAppKind)
)

func init() {
	SchemeBuilder.Register(&FunctionApp{}, &FunctionAppList{})
}
