/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ServicebusTopicAuthorizationRuleObservation struct {
	PrimaryConnectionString string `json:"primaryConnectionString" tf:"primary_connection_string"`

	PrimaryConnectionStringAlias string `json:"primaryConnectionStringAlias" tf:"primary_connection_string_alias"`

	PrimaryKey string `json:"primaryKey" tf:"primary_key"`

	SecondaryConnectionString string `json:"secondaryConnectionString" tf:"secondary_connection_string"`

	SecondaryConnectionStringAlias string `json:"secondaryConnectionStringAlias" tf:"secondary_connection_string_alias"`

	SecondaryKey string `json:"secondaryKey" tf:"secondary_key"`
}

type ServicebusTopicAuthorizationRuleParameters struct {
	Listen *bool `json:"listen,omitempty" tf:"listen"`

	Manage *bool `json:"manage,omitempty" tf:"manage"`

	Name string `json:"name" tf:"name"`

	NamespaceName string `json:"namespaceName" tf:"namespace_name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Send *bool `json:"send,omitempty" tf:"send"`

	TopicName string `json:"topicName" tf:"topic_name"`
}

// ServicebusTopicAuthorizationRuleSpec defines the desired state of ServicebusTopicAuthorizationRule
type ServicebusTopicAuthorizationRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServicebusTopicAuthorizationRuleParameters `json:"forProvider"`
}

// ServicebusTopicAuthorizationRuleStatus defines the observed state of ServicebusTopicAuthorizationRule.
type ServicebusTopicAuthorizationRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServicebusTopicAuthorizationRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServicebusTopicAuthorizationRule is the Schema for the ServicebusTopicAuthorizationRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ServicebusTopicAuthorizationRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicebusTopicAuthorizationRuleSpec   `json:"spec"`
	Status            ServicebusTopicAuthorizationRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicebusTopicAuthorizationRuleList contains a list of ServicebusTopicAuthorizationRules
type ServicebusTopicAuthorizationRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicebusTopicAuthorizationRule `json:"items"`
}

// Repository type metadata.
var (
	ServicebusTopicAuthorizationRuleKind             = "ServicebusTopicAuthorizationRule"
	ServicebusTopicAuthorizationRuleGroupKind        = schema.GroupKind{Group: Group, Kind: ServicebusTopicAuthorizationRuleKind}.String()
	ServicebusTopicAuthorizationRuleKindAPIVersion   = ServicebusTopicAuthorizationRuleKind + "." + GroupVersion.String()
	ServicebusTopicAuthorizationRuleGroupVersionKind = GroupVersion.WithKind(ServicebusTopicAuthorizationRuleKind)
)

func init() {
	SchemeBuilder.Register(&ServicebusTopicAuthorizationRule{}, &ServicebusTopicAuthorizationRuleList{})
}
