/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServicebusNamespaceObservation struct {
}

type ServicebusNamespaceParameters struct {

	// +kubebuilder:validation:Optional
	Capacity *int64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	Sku *string `json:"sku" tf:"sku,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant,omitempty"`
}

// ServicebusNamespaceSpec defines the desired state of ServicebusNamespace
type ServicebusNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServicebusNamespaceParameters `json:"forProvider"`
}

// ServicebusNamespaceStatus defines the observed state of ServicebusNamespace.
type ServicebusNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServicebusNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServicebusNamespace is the Schema for the ServicebusNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ServicebusNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicebusNamespaceSpec   `json:"spec"`
	Status            ServicebusNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicebusNamespaceList contains a list of ServicebusNamespaces
type ServicebusNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicebusNamespace `json:"items"`
}

// Repository type metadata.
var (
	ServicebusNamespaceKind             = "ServicebusNamespace"
	ServicebusNamespaceGroupKind        = schema.GroupKind{Group: Group, Kind: ServicebusNamespaceKind}.String()
	ServicebusNamespaceKindAPIVersion   = ServicebusNamespaceKind + "." + GroupVersion.String()
	ServicebusNamespaceGroupVersionKind = GroupVersion.WithKind(ServicebusNamespaceKind)
)

func init() {
	SchemeBuilder.Register(&ServicebusNamespace{}, &ServicebusNamespaceList{})
}
