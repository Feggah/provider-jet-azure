/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomaticInstanceRepairObservation struct {
}

type AutomaticInstanceRepairParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	GracePeriod *string `json:"gracePeriod,omitempty" tf:"grace_period"`
}

type AutomaticOsUpgradePolicyObservation struct {
}

type AutomaticOsUpgradePolicyParameters struct {
	DisableAutomaticRollback bool `json:"disableAutomaticRollback" tf:"disable_automatic_rollback"`

	EnableAutomaticOsUpgrade bool `json:"enableAutomaticOsUpgrade" tf:"enable_automatic_os_upgrade"`
}

type DataDiskObservation struct {
}

type DataDiskParameters struct {
	Caching string `json:"caching" tf:"caching"`

	CreateOption *string `json:"createOption,omitempty" tf:"create_option"`

	DiskEncryptionSetID *string `json:"diskEncryptionSetId,omitempty" tf:"disk_encryption_set_id"`

	DiskIopsReadWrite *int64 `json:"diskIopsReadWrite,omitempty" tf:"disk_iops_read_write"`

	DiskMbpsReadWrite *int64 `json:"diskMbpsReadWrite,omitempty" tf:"disk_mbps_read_write"`

	DiskSizeGb int64 `json:"diskSizeGb" tf:"disk_size_gb"`

	Lun int64 `json:"lun" tf:"lun"`

	StorageAccountType string `json:"storageAccountType" tf:"storage_account_type"`

	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

type ExtensionObservation struct {
}

type ExtensionParameters struct {
	AutoUpgradeMinorVersion *bool `json:"autoUpgradeMinorVersion,omitempty" tf:"auto_upgrade_minor_version"`

	ForceUpdateTag *string `json:"forceUpdateTag,omitempty" tf:"force_update_tag"`

	Name string `json:"name" tf:"name"`

	ProtectedSettings *string `json:"protectedSettings,omitempty" tf:"protected_settings"`

	ProvisionAfterExtensions []string `json:"provisionAfterExtensions,omitempty" tf:"provision_after_extensions"`

	Publisher string `json:"publisher" tf:"publisher"`

	Settings *string `json:"settings,omitempty" tf:"settings"`

	Type string `json:"type" tf:"type"`

	TypeHandlerVersion string `json:"typeHandlerVersion" tf:"type_handler_version"`
}

type IPConfigurationObservation struct {
}

type IPConfigurationParameters struct {
	ApplicationGatewayBackendAddressPoolIds []string `json:"applicationGatewayBackendAddressPoolIds,omitempty" tf:"application_gateway_backend_address_pool_ids"`

	ApplicationSecurityGroupIds []string `json:"applicationSecurityGroupIds,omitempty" tf:"application_security_group_ids"`

	LoadBalancerBackendAddressPoolIds []string `json:"loadBalancerBackendAddressPoolIds,omitempty" tf:"load_balancer_backend_address_pool_ids"`

	LoadBalancerInboundNatRulesIds []string `json:"loadBalancerInboundNatRulesIds,omitempty" tf:"load_balancer_inbound_nat_rules_ids"`

	Name string `json:"name" tf:"name"`

	Primary *bool `json:"primary,omitempty" tf:"primary"`

	PublicIPAddress []PublicIPAddressParameters `json:"publicIpAddress,omitempty" tf:"public_ip_address"`

	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Version *string `json:"version,omitempty" tf:"version"`
}

type IPTagObservation struct {
}

type IPTagParameters struct {
	Tag string `json:"tag" tf:"tag"`

	Type string `json:"type" tf:"type"`
}

type LinuxVirtualMachineScaleSetAdditionalCapabilitiesObservation struct {
}

type LinuxVirtualMachineScaleSetAdditionalCapabilitiesParameters struct {
	UltraSsdEnabled *bool `json:"ultraSsdEnabled,omitempty" tf:"ultra_ssd_enabled"`
}

type LinuxVirtualMachineScaleSetAdminSSHKeyObservation struct {
}

type LinuxVirtualMachineScaleSetAdminSSHKeyParameters struct {
	PublicKey string `json:"publicKey" tf:"public_key"`

	Username string `json:"username" tf:"username"`
}

type LinuxVirtualMachineScaleSetBootDiagnosticsObservation struct {
}

type LinuxVirtualMachineScaleSetBootDiagnosticsParameters struct {
	StorageAccountURI *string `json:"storageAccountUri,omitempty" tf:"storage_account_uri"`
}

type LinuxVirtualMachineScaleSetIdentityObservation struct {
	PrincipalID string `json:"principalId" tf:"principal_id"`
}

type LinuxVirtualMachineScaleSetIdentityParameters struct {
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	Type string `json:"type" tf:"type"`
}

type LinuxVirtualMachineScaleSetObservation struct {
	UniqueID string `json:"uniqueId" tf:"unique_id"`
}

type LinuxVirtualMachineScaleSetOsDiskObservation struct {
}

type LinuxVirtualMachineScaleSetOsDiskParameters struct {
	Caching string `json:"caching" tf:"caching"`

	DiffDiskSettings []OsDiskDiffDiskSettingsParameters `json:"diffDiskSettings,omitempty" tf:"diff_disk_settings"`

	DiskEncryptionSetID *string `json:"diskEncryptionSetId,omitempty" tf:"disk_encryption_set_id"`

	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`

	StorageAccountType string `json:"storageAccountType" tf:"storage_account_type"`

	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

type LinuxVirtualMachineScaleSetParameters struct {
	AdditionalCapabilities []LinuxVirtualMachineScaleSetAdditionalCapabilitiesParameters `json:"additionalCapabilities,omitempty" tf:"additional_capabilities"`

	AdminPassword *string `json:"adminPassword,omitempty" tf:"admin_password"`

	AdminSSHKey []LinuxVirtualMachineScaleSetAdminSSHKeyParameters `json:"adminSshKey,omitempty" tf:"admin_ssh_key"`

	AdminUsername string `json:"adminUsername" tf:"admin_username"`

	AutomaticInstanceRepair []AutomaticInstanceRepairParameters `json:"automaticInstanceRepair,omitempty" tf:"automatic_instance_repair"`

	AutomaticOsUpgradePolicy []AutomaticOsUpgradePolicyParameters `json:"automaticOsUpgradePolicy,omitempty" tf:"automatic_os_upgrade_policy"`

	BootDiagnostics []LinuxVirtualMachineScaleSetBootDiagnosticsParameters `json:"bootDiagnostics,omitempty" tf:"boot_diagnostics"`

	ComputerNamePrefix *string `json:"computerNamePrefix,omitempty" tf:"computer_name_prefix"`

	CustomData *string `json:"customData,omitempty" tf:"custom_data"`

	DataDisk []DataDiskParameters `json:"dataDisk,omitempty" tf:"data_disk"`

	DisablePasswordAuthentication *bool `json:"disablePasswordAuthentication,omitempty" tf:"disable_password_authentication"`

	DoNotRunExtensionsOnOverprovisionedMachines *bool `json:"doNotRunExtensionsOnOverprovisionedMachines,omitempty" tf:"do_not_run_extensions_on_overprovisioned_machines"`

	EncryptionAtHostEnabled *bool `json:"encryptionAtHostEnabled,omitempty" tf:"encryption_at_host_enabled"`

	EvictionPolicy *string `json:"evictionPolicy,omitempty" tf:"eviction_policy"`

	Extension []ExtensionParameters `json:"extension,omitempty" tf:"extension"`

	ExtensionsTimeBudget *string `json:"extensionsTimeBudget,omitempty" tf:"extensions_time_budget"`

	HealthProbeID *string `json:"healthProbeId,omitempty" tf:"health_probe_id"`

	Identity []LinuxVirtualMachineScaleSetIdentityParameters `json:"identity,omitempty" tf:"identity"`

	Instances int64 `json:"instances" tf:"instances"`

	Location string `json:"location" tf:"location"`

	MaxBidPrice *float64 `json:"maxBidPrice,omitempty" tf:"max_bid_price"`

	Name string `json:"name" tf:"name"`

	NetworkInterface []NetworkInterfaceParameters `json:"networkInterface" tf:"network_interface"`

	OsDisk []LinuxVirtualMachineScaleSetOsDiskParameters `json:"osDisk" tf:"os_disk"`

	Overprovision *bool `json:"overprovision,omitempty" tf:"overprovision"`

	Plan []LinuxVirtualMachineScaleSetPlanParameters `json:"plan,omitempty" tf:"plan"`

	PlatformFaultDomainCount *int64 `json:"platformFaultDomainCount,omitempty" tf:"platform_fault_domain_count"`

	Priority *string `json:"priority,omitempty" tf:"priority"`

	ProvisionVMAgent *bool `json:"provisionVmAgent,omitempty" tf:"provision_vm_agent"`

	ProximityPlacementGroupID *string `json:"proximityPlacementGroupId,omitempty" tf:"proximity_placement_group_id"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RollingUpgradePolicy []RollingUpgradePolicyParameters `json:"rollingUpgradePolicy,omitempty" tf:"rolling_upgrade_policy"`

	ScaleInPolicy *string `json:"scaleInPolicy,omitempty" tf:"scale_in_policy"`

	Secret []LinuxVirtualMachineScaleSetSecretParameters `json:"secret,omitempty" tf:"secret"`

	SinglePlacementGroup *bool `json:"singlePlacementGroup,omitempty" tf:"single_placement_group"`

	Sku string `json:"sku" tf:"sku"`

	SourceImageID *string `json:"sourceImageId,omitempty" tf:"source_image_id"`

	SourceImageReference []LinuxVirtualMachineScaleSetSourceImageReferenceParameters `json:"sourceImageReference,omitempty" tf:"source_image_reference"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TerminateNotification []TerminateNotificationParameters `json:"terminateNotification,omitempty" tf:"terminate_notification"`

	UpgradeMode *string `json:"upgradeMode,omitempty" tf:"upgrade_mode"`

	ZoneBalance *bool `json:"zoneBalance,omitempty" tf:"zone_balance"`

	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type LinuxVirtualMachineScaleSetPlanObservation struct {
}

type LinuxVirtualMachineScaleSetPlanParameters struct {
	Name string `json:"name" tf:"name"`

	Product string `json:"product" tf:"product"`

	Publisher string `json:"publisher" tf:"publisher"`
}

type LinuxVirtualMachineScaleSetSecretObservation struct {
}

type LinuxVirtualMachineScaleSetSecretParameters struct {
	Certificate []SecretCertificateParameters `json:"certificate" tf:"certificate"`

	KeyVaultID string `json:"keyVaultId" tf:"key_vault_id"`
}

type LinuxVirtualMachineScaleSetSourceImageReferenceObservation struct {
}

type LinuxVirtualMachineScaleSetSourceImageReferenceParameters struct {
	Offer string `json:"offer" tf:"offer"`

	Publisher string `json:"publisher" tf:"publisher"`

	Sku string `json:"sku" tf:"sku"`

	Version string `json:"version" tf:"version"`
}

type NetworkInterfaceObservation struct {
}

type NetworkInterfaceParameters struct {
	DNSServers []string `json:"dnsServers,omitempty" tf:"dns_servers"`

	EnableAcceleratedNetworking *bool `json:"enableAcceleratedNetworking,omitempty" tf:"enable_accelerated_networking"`

	EnableIPForwarding *bool `json:"enableIpForwarding,omitempty" tf:"enable_ip_forwarding"`

	IPConfiguration []IPConfigurationParameters `json:"ipConfiguration" tf:"ip_configuration"`

	Name string `json:"name" tf:"name"`

	NetworkSecurityGroupID *string `json:"networkSecurityGroupId,omitempty" tf:"network_security_group_id"`

	Primary *bool `json:"primary,omitempty" tf:"primary"`
}

type OsDiskDiffDiskSettingsObservation struct {
}

type OsDiskDiffDiskSettingsParameters struct {
	Option string `json:"option" tf:"option"`
}

type PublicIPAddressObservation struct {
}

type PublicIPAddressParameters struct {
	DomainNameLabel *string `json:"domainNameLabel,omitempty" tf:"domain_name_label"`

	IPTag []IPTagParameters `json:"ipTag,omitempty" tf:"ip_tag"`

	IdleTimeoutInMinutes *int64 `json:"idleTimeoutInMinutes,omitempty" tf:"idle_timeout_in_minutes"`

	Name string `json:"name" tf:"name"`

	PublicIPPrefixID *string `json:"publicIpPrefixId,omitempty" tf:"public_ip_prefix_id"`
}

type RollingUpgradePolicyObservation struct {
}

type RollingUpgradePolicyParameters struct {
	MaxBatchInstancePercent int64 `json:"maxBatchInstancePercent" tf:"max_batch_instance_percent"`

	MaxUnhealthyInstancePercent int64 `json:"maxUnhealthyInstancePercent" tf:"max_unhealthy_instance_percent"`

	MaxUnhealthyUpgradedInstancePercent int64 `json:"maxUnhealthyUpgradedInstancePercent" tf:"max_unhealthy_upgraded_instance_percent"`

	PauseTimeBetweenBatches string `json:"pauseTimeBetweenBatches" tf:"pause_time_between_batches"`
}

type SecretCertificateObservation struct {
}

type SecretCertificateParameters struct {
	URL string `json:"url" tf:"url"`
}

type TerminateNotificationObservation struct {
}

type TerminateNotificationParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	Timeout *string `json:"timeout,omitempty" tf:"timeout"`
}

// LinuxVirtualMachineScaleSetSpec defines the desired state of LinuxVirtualMachineScaleSet
type LinuxVirtualMachineScaleSetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LinuxVirtualMachineScaleSetParameters `json:"forProvider"`
}

// LinuxVirtualMachineScaleSetStatus defines the observed state of LinuxVirtualMachineScaleSet.
type LinuxVirtualMachineScaleSetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LinuxVirtualMachineScaleSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LinuxVirtualMachineScaleSet is the Schema for the LinuxVirtualMachineScaleSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LinuxVirtualMachineScaleSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LinuxVirtualMachineScaleSetSpec   `json:"spec"`
	Status            LinuxVirtualMachineScaleSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LinuxVirtualMachineScaleSetList contains a list of LinuxVirtualMachineScaleSets
type LinuxVirtualMachineScaleSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LinuxVirtualMachineScaleSet `json:"items"`
}

// Repository type metadata.
var (
	LinuxVirtualMachineScaleSetKind             = "LinuxVirtualMachineScaleSet"
	LinuxVirtualMachineScaleSetGroupKind        = schema.GroupKind{Group: Group, Kind: LinuxVirtualMachineScaleSetKind}.String()
	LinuxVirtualMachineScaleSetKindAPIVersion   = LinuxVirtualMachineScaleSetKind + "." + GroupVersion.String()
	LinuxVirtualMachineScaleSetGroupVersionKind = GroupVersion.WithKind(LinuxVirtualMachineScaleSetKind)
)

func init() {
	SchemeBuilder.Register(&LinuxVirtualMachineScaleSet{}, &LinuxVirtualMachineScaleSetList{})
}
