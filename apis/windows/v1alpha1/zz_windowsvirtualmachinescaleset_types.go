/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomaticInstanceRepairObservation struct {
}

type AutomaticInstanceRepairParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	GracePeriod *string `json:"gracePeriod,omitempty" tf:"grace_period"`
}

type AutomaticOsUpgradePolicyObservation struct {
}

type AutomaticOsUpgradePolicyParameters struct {
	DisableAutomaticRollback bool `json:"disableAutomaticRollback" tf:"disable_automatic_rollback"`

	EnableAutomaticOsUpgrade bool `json:"enableAutomaticOsUpgrade" tf:"enable_automatic_os_upgrade"`
}

type DataDiskObservation struct {
}

type DataDiskParameters struct {
	Caching string `json:"caching" tf:"caching"`

	CreateOption *string `json:"createOption,omitempty" tf:"create_option"`

	DiskEncryptionSetId *string `json:"diskEncryptionSetId,omitempty" tf:"disk_encryption_set_id"`

	DiskIopsReadWrite *int64 `json:"diskIopsReadWrite,omitempty" tf:"disk_iops_read_write"`

	DiskMbpsReadWrite *int64 `json:"diskMbpsReadWrite,omitempty" tf:"disk_mbps_read_write"`

	DiskSizeGb int64 `json:"diskSizeGb" tf:"disk_size_gb"`

	Lun int64 `json:"lun" tf:"lun"`

	StorageAccountType string `json:"storageAccountType" tf:"storage_account_type"`

	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

type ExtensionObservation struct {
}

type ExtensionParameters struct {
	AutoUpgradeMinorVersion *bool `json:"autoUpgradeMinorVersion,omitempty" tf:"auto_upgrade_minor_version"`

	ForceUpdateTag *string `json:"forceUpdateTag,omitempty" tf:"force_update_tag"`

	Name string `json:"name" tf:"name"`

	ProtectedSettings *string `json:"protectedSettings,omitempty" tf:"protected_settings"`

	ProvisionAfterExtensions []string `json:"provisionAfterExtensions,omitempty" tf:"provision_after_extensions"`

	Publisher string `json:"publisher" tf:"publisher"`

	Settings *string `json:"settings,omitempty" tf:"settings"`

	Type string `json:"type" tf:"type"`

	TypeHandlerVersion string `json:"typeHandlerVersion" tf:"type_handler_version"`
}

type IpConfigurationObservation struct {
}

type IpConfigurationParameters struct {
	ApplicationGatewayBackendAddressPoolIds []string `json:"applicationGatewayBackendAddressPoolIds,omitempty" tf:"application_gateway_backend_address_pool_ids"`

	ApplicationSecurityGroupIds []string `json:"applicationSecurityGroupIds,omitempty" tf:"application_security_group_ids"`

	LoadBalancerBackendAddressPoolIds []string `json:"loadBalancerBackendAddressPoolIds,omitempty" tf:"load_balancer_backend_address_pool_ids"`

	LoadBalancerInboundNatRulesIds []string `json:"loadBalancerInboundNatRulesIds,omitempty" tf:"load_balancer_inbound_nat_rules_ids"`

	Name string `json:"name" tf:"name"`

	Primary *bool `json:"primary,omitempty" tf:"primary"`

	PublicIpAddress []PublicIpAddressParameters `json:"publicIpAddress,omitempty" tf:"public_ip_address"`

	SubnetId *string `json:"subnetId,omitempty" tf:"subnet_id"`

	Version *string `json:"version,omitempty" tf:"version"`
}

type IpTagObservation struct {
}

type IpTagParameters struct {
	Tag string `json:"tag" tf:"tag"`

	Type string `json:"type" tf:"type"`
}

type NetworkInterfaceObservation struct {
}

type NetworkInterfaceParameters struct {
	DnsServers []string `json:"dnsServers,omitempty" tf:"dns_servers"`

	EnableAcceleratedNetworking *bool `json:"enableAcceleratedNetworking,omitempty" tf:"enable_accelerated_networking"`

	EnableIpForwarding *bool `json:"enableIpForwarding,omitempty" tf:"enable_ip_forwarding"`

	IpConfiguration []IpConfigurationParameters `json:"ipConfiguration" tf:"ip_configuration"`

	Name string `json:"name" tf:"name"`

	NetworkSecurityGroupId *string `json:"networkSecurityGroupId,omitempty" tf:"network_security_group_id"`

	Primary *bool `json:"primary,omitempty" tf:"primary"`
}

type OsDiskDiffDiskSettingsObservation struct {
}

type OsDiskDiffDiskSettingsParameters struct {
	Option string `json:"option" tf:"option"`
}

type PublicIpAddressObservation struct {
}

type PublicIpAddressParameters struct {
	DomainNameLabel *string `json:"domainNameLabel,omitempty" tf:"domain_name_label"`

	IdleTimeoutInMinutes *int64 `json:"idleTimeoutInMinutes,omitempty" tf:"idle_timeout_in_minutes"`

	IpTag []IpTagParameters `json:"ipTag,omitempty" tf:"ip_tag"`

	Name string `json:"name" tf:"name"`

	PublicIpPrefixId *string `json:"publicIpPrefixId,omitempty" tf:"public_ip_prefix_id"`
}

type RollingUpgradePolicyObservation struct {
}

type RollingUpgradePolicyParameters struct {
	MaxBatchInstancePercent int64 `json:"maxBatchInstancePercent" tf:"max_batch_instance_percent"`

	MaxUnhealthyInstancePercent int64 `json:"maxUnhealthyInstancePercent" tf:"max_unhealthy_instance_percent"`

	MaxUnhealthyUpgradedInstancePercent int64 `json:"maxUnhealthyUpgradedInstancePercent" tf:"max_unhealthy_upgraded_instance_percent"`

	PauseTimeBetweenBatches string `json:"pauseTimeBetweenBatches" tf:"pause_time_between_batches"`
}

type SecretCertificateObservation struct {
}

type SecretCertificateParameters struct {
	Store string `json:"store" tf:"store"`

	Url string `json:"url" tf:"url"`
}

type TerminateNotificationObservation struct {
}

type TerminateNotificationParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	Timeout *string `json:"timeout,omitempty" tf:"timeout"`
}

type WindowsVirtualMachineScaleSetAdditionalCapabilitiesObservation struct {
}

type WindowsVirtualMachineScaleSetAdditionalCapabilitiesParameters struct {
	UltraSsdEnabled *bool `json:"ultraSsdEnabled,omitempty" tf:"ultra_ssd_enabled"`
}

type WindowsVirtualMachineScaleSetAdditionalUnattendContentObservation struct {
}

type WindowsVirtualMachineScaleSetAdditionalUnattendContentParameters struct {
	Content string `json:"content" tf:"content"`

	Setting string `json:"setting" tf:"setting"`
}

type WindowsVirtualMachineScaleSetBootDiagnosticsObservation struct {
}

type WindowsVirtualMachineScaleSetBootDiagnosticsParameters struct {
	StorageAccountUri *string `json:"storageAccountUri,omitempty" tf:"storage_account_uri"`
}

type WindowsVirtualMachineScaleSetIdentityObservation struct {
	PrincipalId string `json:"principalId" tf:"principal_id"`
}

type WindowsVirtualMachineScaleSetIdentityParameters struct {
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	Type string `json:"type" tf:"type"`
}

type WindowsVirtualMachineScaleSetObservation struct {
	UniqueId string `json:"uniqueId" tf:"unique_id"`
}

type WindowsVirtualMachineScaleSetOsDiskObservation struct {
}

type WindowsVirtualMachineScaleSetOsDiskParameters struct {
	Caching string `json:"caching" tf:"caching"`

	DiffDiskSettings []OsDiskDiffDiskSettingsParameters `json:"diffDiskSettings,omitempty" tf:"diff_disk_settings"`

	DiskEncryptionSetId *string `json:"diskEncryptionSetId,omitempty" tf:"disk_encryption_set_id"`

	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`

	StorageAccountType string `json:"storageAccountType" tf:"storage_account_type"`

	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

type WindowsVirtualMachineScaleSetParameters struct {
	AdditionalCapabilities []WindowsVirtualMachineScaleSetAdditionalCapabilitiesParameters `json:"additionalCapabilities,omitempty" tf:"additional_capabilities"`

	AdditionalUnattendContent []WindowsVirtualMachineScaleSetAdditionalUnattendContentParameters `json:"additionalUnattendContent,omitempty" tf:"additional_unattend_content"`

	AdminPassword string `json:"adminPassword" tf:"admin_password"`

	AdminUsername string `json:"adminUsername" tf:"admin_username"`

	AutomaticInstanceRepair []AutomaticInstanceRepairParameters `json:"automaticInstanceRepair,omitempty" tf:"automatic_instance_repair"`

	AutomaticOsUpgradePolicy []AutomaticOsUpgradePolicyParameters `json:"automaticOsUpgradePolicy,omitempty" tf:"automatic_os_upgrade_policy"`

	BootDiagnostics []WindowsVirtualMachineScaleSetBootDiagnosticsParameters `json:"bootDiagnostics,omitempty" tf:"boot_diagnostics"`

	ComputerNamePrefix *string `json:"computerNamePrefix,omitempty" tf:"computer_name_prefix"`

	CustomData *string `json:"customData,omitempty" tf:"custom_data"`

	DataDisk []DataDiskParameters `json:"dataDisk,omitempty" tf:"data_disk"`

	DoNotRunExtensionsOnOverprovisionedMachines *bool `json:"doNotRunExtensionsOnOverprovisionedMachines,omitempty" tf:"do_not_run_extensions_on_overprovisioned_machines"`

	EnableAutomaticUpdates *bool `json:"enableAutomaticUpdates,omitempty" tf:"enable_automatic_updates"`

	EncryptionAtHostEnabled *bool `json:"encryptionAtHostEnabled,omitempty" tf:"encryption_at_host_enabled"`

	EvictionPolicy *string `json:"evictionPolicy,omitempty" tf:"eviction_policy"`

	Extension []ExtensionParameters `json:"extension,omitempty" tf:"extension"`

	ExtensionsTimeBudget *string `json:"extensionsTimeBudget,omitempty" tf:"extensions_time_budget"`

	HealthProbeId *string `json:"healthProbeId,omitempty" tf:"health_probe_id"`

	Identity []WindowsVirtualMachineScaleSetIdentityParameters `json:"identity,omitempty" tf:"identity"`

	Instances int64 `json:"instances" tf:"instances"`

	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`

	Location string `json:"location" tf:"location"`

	MaxBidPrice *float64 `json:"maxBidPrice,omitempty" tf:"max_bid_price"`

	Name string `json:"name" tf:"name"`

	NetworkInterface []NetworkInterfaceParameters `json:"networkInterface" tf:"network_interface"`

	OsDisk []WindowsVirtualMachineScaleSetOsDiskParameters `json:"osDisk" tf:"os_disk"`

	Overprovision *bool `json:"overprovision,omitempty" tf:"overprovision"`

	Plan []WindowsVirtualMachineScaleSetPlanParameters `json:"plan,omitempty" tf:"plan"`

	PlatformFaultDomainCount *int64 `json:"platformFaultDomainCount,omitempty" tf:"platform_fault_domain_count"`

	Priority *string `json:"priority,omitempty" tf:"priority"`

	ProvisionVmAgent *bool `json:"provisionVmAgent,omitempty" tf:"provision_vm_agent"`

	ProximityPlacementGroupId *string `json:"proximityPlacementGroupId,omitempty" tf:"proximity_placement_group_id"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RollingUpgradePolicy []RollingUpgradePolicyParameters `json:"rollingUpgradePolicy,omitempty" tf:"rolling_upgrade_policy"`

	ScaleInPolicy *string `json:"scaleInPolicy,omitempty" tf:"scale_in_policy"`

	Secret []WindowsVirtualMachineScaleSetSecretParameters `json:"secret,omitempty" tf:"secret"`

	SinglePlacementGroup *bool `json:"singlePlacementGroup,omitempty" tf:"single_placement_group"`

	Sku string `json:"sku" tf:"sku"`

	SourceImageId *string `json:"sourceImageId,omitempty" tf:"source_image_id"`

	SourceImageReference []WindowsVirtualMachineScaleSetSourceImageReferenceParameters `json:"sourceImageReference,omitempty" tf:"source_image_reference"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TerminateNotification []TerminateNotificationParameters `json:"terminateNotification,omitempty" tf:"terminate_notification"`

	Timezone *string `json:"timezone,omitempty" tf:"timezone"`

	UpgradeMode *string `json:"upgradeMode,omitempty" tf:"upgrade_mode"`

	WinrmListener []WindowsVirtualMachineScaleSetWinrmListenerParameters `json:"winrmListener,omitempty" tf:"winrm_listener"`

	ZoneBalance *bool `json:"zoneBalance,omitempty" tf:"zone_balance"`

	Zones []string `json:"zones,omitempty" tf:"zones"`
}

type WindowsVirtualMachineScaleSetPlanObservation struct {
}

type WindowsVirtualMachineScaleSetPlanParameters struct {
	Name string `json:"name" tf:"name"`

	Product string `json:"product" tf:"product"`

	Publisher string `json:"publisher" tf:"publisher"`
}

type WindowsVirtualMachineScaleSetSecretObservation struct {
}

type WindowsVirtualMachineScaleSetSecretParameters struct {
	Certificate []SecretCertificateParameters `json:"certificate" tf:"certificate"`

	KeyVaultId string `json:"keyVaultId" tf:"key_vault_id"`
}

type WindowsVirtualMachineScaleSetSourceImageReferenceObservation struct {
}

type WindowsVirtualMachineScaleSetSourceImageReferenceParameters struct {
	Offer string `json:"offer" tf:"offer"`

	Publisher string `json:"publisher" tf:"publisher"`

	Sku string `json:"sku" tf:"sku"`

	Version string `json:"version" tf:"version"`
}

type WindowsVirtualMachineScaleSetWinrmListenerObservation struct {
}

type WindowsVirtualMachineScaleSetWinrmListenerParameters struct {
	CertificateUrl *string `json:"certificateUrl,omitempty" tf:"certificate_url"`

	Protocol string `json:"protocol" tf:"protocol"`
}

// WindowsVirtualMachineScaleSetSpec defines the desired state of WindowsVirtualMachineScaleSet
type WindowsVirtualMachineScaleSetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WindowsVirtualMachineScaleSetParameters `json:"forProvider"`
}

// WindowsVirtualMachineScaleSetStatus defines the observed state of WindowsVirtualMachineScaleSet.
type WindowsVirtualMachineScaleSetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WindowsVirtualMachineScaleSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WindowsVirtualMachineScaleSet is the Schema for the WindowsVirtualMachineScaleSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type WindowsVirtualMachineScaleSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WindowsVirtualMachineScaleSetSpec   `json:"spec"`
	Status            WindowsVirtualMachineScaleSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WindowsVirtualMachineScaleSetList contains a list of WindowsVirtualMachineScaleSets
type WindowsVirtualMachineScaleSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WindowsVirtualMachineScaleSet `json:"items"`
}

// Repository type metadata.
var (
	WindowsVirtualMachineScaleSetKind             = "WindowsVirtualMachineScaleSet"
	WindowsVirtualMachineScaleSetGroupKind        = schema.GroupKind{Group: Group, Kind: WindowsVirtualMachineScaleSetKind}.String()
	WindowsVirtualMachineScaleSetKindAPIVersion   = WindowsVirtualMachineScaleSetKind + "." + GroupVersion.String()
	WindowsVirtualMachineScaleSetGroupVersionKind = GroupVersion.WithKind(WindowsVirtualMachineScaleSetKind)
)

func init() {
	SchemeBuilder.Register(&WindowsVirtualMachineScaleSet{}, &WindowsVirtualMachineScaleSetList{})
}
