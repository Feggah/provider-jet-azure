/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AdditionalCapabilitiesObservation struct {
}

type AdditionalCapabilitiesParameters struct {
	UltraSsdEnabled *bool `json:"ultraSsdEnabled,omitempty" tf:"ultra_ssd_enabled"`
}

type AdditionalUnattendContentObservation struct {
}

type AdditionalUnattendContentParameters struct {
	Content string `json:"content" tf:"content"`

	Setting string `json:"setting" tf:"setting"`
}

type BootDiagnosticsObservation struct {
}

type BootDiagnosticsParameters struct {
	StorageAccountUri *string `json:"storageAccountUri,omitempty" tf:"storage_account_uri"`
}

type CertificateObservation struct {
}

type CertificateParameters struct {
	Store string `json:"store" tf:"store"`

	Url string `json:"url" tf:"url"`
}

type DiffDiskSettingsObservation struct {
}

type DiffDiskSettingsParameters struct {
	Option string `json:"option" tf:"option"`
}

type IdentityObservation struct {
	PrincipalId string `json:"principalId" tf:"principal_id"`

	TenantId string `json:"tenantId" tf:"tenant_id"`
}

type IdentityParameters struct {
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	Type string `json:"type" tf:"type"`
}

type OsDiskObservation struct {
}

type OsDiskParameters struct {
	Caching string `json:"caching" tf:"caching"`

	DiffDiskSettings []DiffDiskSettingsParameters `json:"diffDiskSettings,omitempty" tf:"diff_disk_settings"`

	DiskEncryptionSetId *string `json:"diskEncryptionSetId,omitempty" tf:"disk_encryption_set_id"`

	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`

	Name *string `json:"name,omitempty" tf:"name"`

	StorageAccountType string `json:"storageAccountType" tf:"storage_account_type"`

	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty" tf:"write_accelerator_enabled"`
}

type PlanObservation struct {
}

type PlanParameters struct {
	Name string `json:"name" tf:"name"`

	Product string `json:"product" tf:"product"`

	Publisher string `json:"publisher" tf:"publisher"`
}

type SecretObservation struct {
}

type SecretParameters struct {
	Certificate []CertificateParameters `json:"certificate" tf:"certificate"`

	KeyVaultId string `json:"keyVaultId" tf:"key_vault_id"`
}

type SourceImageReferenceObservation struct {
}

type SourceImageReferenceParameters struct {
	Offer string `json:"offer" tf:"offer"`

	Publisher string `json:"publisher" tf:"publisher"`

	Sku string `json:"sku" tf:"sku"`

	Version string `json:"version" tf:"version"`
}

type WindowsVirtualMachineObservation struct {
	PrivateIpAddress string `json:"privateIpAddress" tf:"private_ip_address"`

	PrivateIpAddresses []string `json:"privateIpAddresses" tf:"private_ip_addresses"`

	PublicIpAddress string `json:"publicIpAddress" tf:"public_ip_address"`

	PublicIpAddresses []string `json:"publicIpAddresses" tf:"public_ip_addresses"`

	VirtualMachineId string `json:"virtualMachineId" tf:"virtual_machine_id"`
}

type WindowsVirtualMachineParameters struct {
	AdditionalCapabilities []AdditionalCapabilitiesParameters `json:"additionalCapabilities,omitempty" tf:"additional_capabilities"`

	AdditionalUnattendContent []AdditionalUnattendContentParameters `json:"additionalUnattendContent,omitempty" tf:"additional_unattend_content"`

	AdminPassword string `json:"adminPassword" tf:"admin_password"`

	AdminUsername string `json:"adminUsername" tf:"admin_username"`

	AllowExtensionOperations *bool `json:"allowExtensionOperations,omitempty" tf:"allow_extension_operations"`

	AvailabilitySetId *string `json:"availabilitySetId,omitempty" tf:"availability_set_id"`

	BootDiagnostics []BootDiagnosticsParameters `json:"bootDiagnostics,omitempty" tf:"boot_diagnostics"`

	ComputerName *string `json:"computerName,omitempty" tf:"computer_name"`

	CustomData *string `json:"customData,omitempty" tf:"custom_data"`

	DedicatedHostId *string `json:"dedicatedHostId,omitempty" tf:"dedicated_host_id"`

	EnableAutomaticUpdates *bool `json:"enableAutomaticUpdates,omitempty" tf:"enable_automatic_updates"`

	EncryptionAtHostEnabled *bool `json:"encryptionAtHostEnabled,omitempty" tf:"encryption_at_host_enabled"`

	EvictionPolicy *string `json:"evictionPolicy,omitempty" tf:"eviction_policy"`

	ExtensionsTimeBudget *string `json:"extensionsTimeBudget,omitempty" tf:"extensions_time_budget"`

	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`

	Location string `json:"location" tf:"location"`

	MaxBidPrice *float64 `json:"maxBidPrice,omitempty" tf:"max_bid_price"`

	Name string `json:"name" tf:"name"`

	NetworkInterfaceIds []string `json:"networkInterfaceIds" tf:"network_interface_ids"`

	OsDisk []OsDiskParameters `json:"osDisk" tf:"os_disk"`

	PatchMode *string `json:"patchMode,omitempty" tf:"patch_mode"`

	Plan []PlanParameters `json:"plan,omitempty" tf:"plan"`

	PlatformFaultDomain *int64 `json:"platformFaultDomain,omitempty" tf:"platform_fault_domain"`

	Priority *string `json:"priority,omitempty" tf:"priority"`

	ProvisionVmAgent *bool `json:"provisionVmAgent,omitempty" tf:"provision_vm_agent"`

	ProximityPlacementGroupId *string `json:"proximityPlacementGroupId,omitempty" tf:"proximity_placement_group_id"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Secret []SecretParameters `json:"secret,omitempty" tf:"secret"`

	Size string `json:"size" tf:"size"`

	SourceImageId *string `json:"sourceImageId,omitempty" tf:"source_image_id"`

	SourceImageReference []SourceImageReferenceParameters `json:"sourceImageReference,omitempty" tf:"source_image_reference"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Timezone *string `json:"timezone,omitempty" tf:"timezone"`

	VirtualMachineScaleSetId *string `json:"virtualMachineScaleSetId,omitempty" tf:"virtual_machine_scale_set_id"`

	WinrmListener []WinrmListenerParameters `json:"winrmListener,omitempty" tf:"winrm_listener"`

	Zone *string `json:"zone,omitempty" tf:"zone"`
}

type WinrmListenerObservation struct {
}

type WinrmListenerParameters struct {
	CertificateUrl *string `json:"certificateUrl,omitempty" tf:"certificate_url"`

	Protocol string `json:"protocol" tf:"protocol"`
}

// WindowsVirtualMachineSpec defines the desired state of WindowsVirtualMachine
type WindowsVirtualMachineSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WindowsVirtualMachineParameters `json:"forProvider"`
}

// WindowsVirtualMachineStatus defines the observed state of WindowsVirtualMachine.
type WindowsVirtualMachineStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WindowsVirtualMachineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WindowsVirtualMachine is the Schema for the WindowsVirtualMachines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type WindowsVirtualMachine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WindowsVirtualMachineSpec   `json:"spec"`
	Status            WindowsVirtualMachineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WindowsVirtualMachineList contains a list of WindowsVirtualMachines
type WindowsVirtualMachineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WindowsVirtualMachine `json:"items"`
}

// Repository type metadata.
var (
	WindowsVirtualMachineKind             = "WindowsVirtualMachine"
	WindowsVirtualMachineGroupKind        = schema.GroupKind{Group: Group, Kind: WindowsVirtualMachineKind}.String()
	WindowsVirtualMachineKindAPIVersion   = WindowsVirtualMachineKind + "." + GroupVersion.String()
	WindowsVirtualMachineGroupVersionKind = GroupVersion.WithKind(WindowsVirtualMachineKind)
)

func init() {
	SchemeBuilder.Register(&WindowsVirtualMachine{}, &WindowsVirtualMachineList{})
}
