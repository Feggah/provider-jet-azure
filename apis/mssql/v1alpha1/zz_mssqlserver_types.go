/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AzureadAdministratorObservation struct {
}

type AzureadAdministratorParameters struct {
	LoginUsername string `json:"loginUsername" tf:"login_username"`

	ObjectId string `json:"objectId" tf:"object_id"`

	TenantId *string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type IdentityObservation struct {
	PrincipalId string `json:"principalId" tf:"principal_id"`

	TenantId string `json:"tenantId" tf:"tenant_id"`
}

type IdentityParameters struct {
	Type string `json:"type" tf:"type"`
}

type MssqlServerExtendedAuditingPolicyObservation struct {
}

type MssqlServerExtendedAuditingPolicyParameters struct {
	LogMonitoringEnabled *bool `json:"logMonitoringEnabled,omitempty" tf:"log_monitoring_enabled"`

	RetentionInDays *int64 `json:"retentionInDays,omitempty" tf:"retention_in_days"`

	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty" tf:"storage_account_access_key"`

	StorageAccountAccessKeyIsSecondary *bool `json:"storageAccountAccessKeyIsSecondary,omitempty" tf:"storage_account_access_key_is_secondary"`

	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint"`
}

type MssqlServerObservation struct {
	FullyQualifiedDomainName string `json:"fullyQualifiedDomainName" tf:"fully_qualified_domain_name"`

	RestorableDroppedDatabaseIds []string `json:"restorableDroppedDatabaseIds" tf:"restorable_dropped_database_ids"`
}

type MssqlServerParameters struct {
	AdministratorLogin string `json:"administratorLogin" tf:"administrator_login"`

	AdministratorLoginPassword string `json:"administratorLoginPassword" tf:"administrator_login_password"`

	AzureadAdministrator []AzureadAdministratorParameters `json:"azureadAdministrator,omitempty" tf:"azuread_administrator"`

	ConnectionPolicy *string `json:"connectionPolicy,omitempty" tf:"connection_policy"`

	ExtendedAuditingPolicy []MssqlServerExtendedAuditingPolicyParameters `json:"extendedAuditingPolicy,omitempty" tf:"extended_auditing_policy"`

	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	Location string `json:"location" tf:"location"`

	MinimumTlsVersion *string `json:"minimumTlsVersion,omitempty" tf:"minimum_tls_version"`

	Name string `json:"name" tf:"name"`

	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Version string `json:"version" tf:"version"`
}

// MssqlServerSpec defines the desired state of MssqlServer
type MssqlServerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MssqlServerParameters `json:"forProvider"`
}

// MssqlServerStatus defines the observed state of MssqlServer.
type MssqlServerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MssqlServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MssqlServer is the Schema for the MssqlServers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MssqlServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MssqlServerSpec   `json:"spec"`
	Status            MssqlServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MssqlServerList contains a list of MssqlServers
type MssqlServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MssqlServer `json:"items"`
}

// Repository type metadata.
var (
	MssqlServerKind             = "MssqlServer"
	MssqlServerGroupKind        = schema.GroupKind{Group: Group, Kind: MssqlServerKind}.String()
	MssqlServerKindAPIVersion   = MssqlServerKind + "." + GroupVersion.String()
	MssqlServerGroupVersionKind = GroupVersion.WithKind(MssqlServerKind)
)

func init() {
	SchemeBuilder.Register(&MssqlServer{}, &MssqlServerList{})
}
