/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ExtendedAuditingPolicyObservation struct {
}

type ExtendedAuditingPolicyParameters struct {
	LogMonitoringEnabled *bool `json:"logMonitoringEnabled,omitempty" tf:"log_monitoring_enabled"`

	RetentionInDays *int64 `json:"retentionInDays,omitempty" tf:"retention_in_days"`

	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty" tf:"storage_account_access_key"`

	StorageAccountAccessKeyIsSecondary *bool `json:"storageAccountAccessKeyIsSecondary,omitempty" tf:"storage_account_access_key_is_secondary"`

	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint"`
}

type LongTermRetentionPolicyObservation struct {
}

type LongTermRetentionPolicyParameters struct {
	MonthlyRetention *string `json:"monthlyRetention,omitempty" tf:"monthly_retention"`

	WeekOfYear *int64 `json:"weekOfYear,omitempty" tf:"week_of_year"`

	WeeklyRetention *string `json:"weeklyRetention,omitempty" tf:"weekly_retention"`

	YearlyRetention *string `json:"yearlyRetention,omitempty" tf:"yearly_retention"`
}

type MssqlDatabaseObservation struct {
}

type MssqlDatabaseParameters struct {
	AutoPauseDelayInMinutes *int64 `json:"autoPauseDelayInMinutes,omitempty" tf:"auto_pause_delay_in_minutes"`

	Collation *string `json:"collation,omitempty" tf:"collation"`

	CreateMode *string `json:"createMode,omitempty" tf:"create_mode"`

	CreationSourceDatabaseId *string `json:"creationSourceDatabaseId,omitempty" tf:"creation_source_database_id"`

	ElasticPoolId *string `json:"elasticPoolId,omitempty" tf:"elastic_pool_id"`

	ExtendedAuditingPolicy []ExtendedAuditingPolicyParameters `json:"extendedAuditingPolicy,omitempty" tf:"extended_auditing_policy"`

	GeoBackupEnabled *bool `json:"geoBackupEnabled,omitempty" tf:"geo_backup_enabled"`

	LicenseType *string `json:"licenseType,omitempty" tf:"license_type"`

	LongTermRetentionPolicy []LongTermRetentionPolicyParameters `json:"longTermRetentionPolicy,omitempty" tf:"long_term_retention_policy"`

	MaxSizeGb *int64 `json:"maxSizeGb,omitempty" tf:"max_size_gb"`

	MinCapacity *float64 `json:"minCapacity,omitempty" tf:"min_capacity"`

	Name string `json:"name" tf:"name"`

	ReadReplicaCount *int64 `json:"readReplicaCount,omitempty" tf:"read_replica_count"`

	ReadScale *bool `json:"readScale,omitempty" tf:"read_scale"`

	RecoverDatabaseId *string `json:"recoverDatabaseId,omitempty" tf:"recover_database_id"`

	RestoreDroppedDatabaseId *string `json:"restoreDroppedDatabaseId,omitempty" tf:"restore_dropped_database_id"`

	RestorePointInTime *string `json:"restorePointInTime,omitempty" tf:"restore_point_in_time"`

	SampleName *string `json:"sampleName,omitempty" tf:"sample_name"`

	ServerId string `json:"serverId" tf:"server_id"`

	ShortTermRetentionPolicy []ShortTermRetentionPolicyParameters `json:"shortTermRetentionPolicy,omitempty" tf:"short_term_retention_policy"`

	SkuName *string `json:"skuName,omitempty" tf:"sku_name"`

	StorageAccountType *string `json:"storageAccountType,omitempty" tf:"storage_account_type"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	ThreatDetectionPolicy []ThreatDetectionPolicyParameters `json:"threatDetectionPolicy,omitempty" tf:"threat_detection_policy"`

	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant"`
}

type ShortTermRetentionPolicyObservation struct {
}

type ShortTermRetentionPolicyParameters struct {
	RetentionDays int64 `json:"retentionDays" tf:"retention_days"`
}

type ThreatDetectionPolicyObservation struct {
}

type ThreatDetectionPolicyParameters struct {
	DisabledAlerts []string `json:"disabledAlerts,omitempty" tf:"disabled_alerts"`

	EmailAccountAdmins *string `json:"emailAccountAdmins,omitempty" tf:"email_account_admins"`

	EmailAddresses []string `json:"emailAddresses,omitempty" tf:"email_addresses"`

	RetentionDays *int64 `json:"retentionDays,omitempty" tf:"retention_days"`

	State *string `json:"state,omitempty" tf:"state"`

	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty" tf:"storage_account_access_key"`

	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint"`

	UseServerDefault *string `json:"useServerDefault,omitempty" tf:"use_server_default"`
}

// MssqlDatabaseSpec defines the desired state of MssqlDatabase
type MssqlDatabaseSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MssqlDatabaseParameters `json:"forProvider"`
}

// MssqlDatabaseStatus defines the observed state of MssqlDatabase.
type MssqlDatabaseStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MssqlDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MssqlDatabase is the Schema for the MssqlDatabases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MssqlDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MssqlDatabaseSpec   `json:"spec"`
	Status            MssqlDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MssqlDatabaseList contains a list of MssqlDatabases
type MssqlDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MssqlDatabase `json:"items"`
}

// Repository type metadata.
var (
	MssqlDatabaseKind             = "MssqlDatabase"
	MssqlDatabaseGroupKind        = schema.GroupKind{Group: Group, Kind: MssqlDatabaseKind}.String()
	MssqlDatabaseKindAPIVersion   = MssqlDatabaseKind + "." + GroupVersion.String()
	MssqlDatabaseGroupVersionKind = GroupVersion.WithKind(MssqlDatabaseKind)
)

func init() {
	SchemeBuilder.Register(&MssqlDatabase{}, &MssqlDatabaseList{})
}
