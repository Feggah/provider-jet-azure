/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MssqlServerSecurityAlertPolicyObservation struct {
}

type MssqlServerSecurityAlertPolicyParameters struct {

	// +kubebuilder:validation:Optional
	DisabledAlerts []*string `json:"disabledAlerts,omitempty" tf:"disabled_alerts,omitempty"`

	// +kubebuilder:validation:Optional
	EmailAccountAdmins *bool `json:"emailAccountAdmins,omitempty" tf:"email_account_admins,omitempty"`

	// +kubebuilder:validation:Optional
	EmailAddresses []*string `json:"emailAddresses,omitempty" tf:"email_addresses,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionDays *int64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// +kubebuilder:validation:Required
	ServerName *string `json:"serverName" tf:"server_name,omitempty"`

	// +kubebuilder:validation:Required
	State *string `json:"state" tf:"state,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountAccessKeySecretRef v1.SecretKeySelector `json:"storageAccountAccessKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StorageEndpoint *string `json:"storageEndpoint,omitempty" tf:"storage_endpoint,omitempty"`
}

// MssqlServerSecurityAlertPolicySpec defines the desired state of MssqlServerSecurityAlertPolicy
type MssqlServerSecurityAlertPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MssqlServerSecurityAlertPolicyParameters `json:"forProvider"`
}

// MssqlServerSecurityAlertPolicyStatus defines the observed state of MssqlServerSecurityAlertPolicy.
type MssqlServerSecurityAlertPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MssqlServerSecurityAlertPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MssqlServerSecurityAlertPolicy is the Schema for the MssqlServerSecurityAlertPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MssqlServerSecurityAlertPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MssqlServerSecurityAlertPolicySpec   `json:"spec"`
	Status            MssqlServerSecurityAlertPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MssqlServerSecurityAlertPolicyList contains a list of MssqlServerSecurityAlertPolicys
type MssqlServerSecurityAlertPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MssqlServerSecurityAlertPolicy `json:"items"`
}

// Repository type metadata.
var (
	MssqlServerSecurityAlertPolicyKind             = "MssqlServerSecurityAlertPolicy"
	MssqlServerSecurityAlertPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: MssqlServerSecurityAlertPolicyKind}.String()
	MssqlServerSecurityAlertPolicyKindAPIVersion   = MssqlServerSecurityAlertPolicyKind + "." + GroupVersion.String()
	MssqlServerSecurityAlertPolicyGroupVersionKind = GroupVersion.WithKind(MssqlServerSecurityAlertPolicyKind)
)

func init() {
	SchemeBuilder.Register(&MssqlServerSecurityAlertPolicy{}, &MssqlServerSecurityAlertPolicyList{})
}
