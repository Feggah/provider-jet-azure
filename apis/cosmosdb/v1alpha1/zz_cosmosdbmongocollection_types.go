/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CosmosdbMongoCollectionAutoscaleSettingsObservation struct {
}

type CosmosdbMongoCollectionAutoscaleSettingsParameters struct {
	MaxThroughput *int64 `json:"maxThroughput,omitempty" tf:"max_throughput"`
}

type CosmosdbMongoCollectionIndexObservation struct {
}

type CosmosdbMongoCollectionIndexParameters struct {
	Keys []string `json:"keys" tf:"keys"`

	Unique *bool `json:"unique,omitempty" tf:"unique"`
}

type CosmosdbMongoCollectionObservation struct {
	SystemIndexes []SystemIndexesObservation `json:"systemIndexes" tf:"system_indexes"`
}

type CosmosdbMongoCollectionParameters struct {
	AccountName string `json:"accountName" tf:"account_name"`

	AnalyticalStorageTTL *int64 `json:"analyticalStorageTtl,omitempty" tf:"analytical_storage_ttl"`

	AutoscaleSettings []CosmosdbMongoCollectionAutoscaleSettingsParameters `json:"autoscaleSettings,omitempty" tf:"autoscale_settings"`

	DatabaseName string `json:"databaseName" tf:"database_name"`

	DefaultTTLSeconds *int64 `json:"defaultTtlSeconds,omitempty" tf:"default_ttl_seconds"`

	Index []CosmosdbMongoCollectionIndexParameters `json:"index,omitempty" tf:"index"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	ShardKey *string `json:"shardKey,omitempty" tf:"shard_key"`

	Throughput *int64 `json:"throughput,omitempty" tf:"throughput"`
}

type SystemIndexesObservation struct {
	Keys []string `json:"keys" tf:"keys"`

	Unique bool `json:"unique" tf:"unique"`
}

type SystemIndexesParameters struct {
}

// CosmosdbMongoCollectionSpec defines the desired state of CosmosdbMongoCollection
type CosmosdbMongoCollectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CosmosdbMongoCollectionParameters `json:"forProvider"`
}

// CosmosdbMongoCollectionStatus defines the observed state of CosmosdbMongoCollection.
type CosmosdbMongoCollectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CosmosdbMongoCollectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbMongoCollection is the Schema for the CosmosdbMongoCollections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CosmosdbMongoCollection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CosmosdbMongoCollectionSpec   `json:"spec"`
	Status            CosmosdbMongoCollectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbMongoCollectionList contains a list of CosmosdbMongoCollections
type CosmosdbMongoCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CosmosdbMongoCollection `json:"items"`
}

// Repository type metadata.
var (
	CosmosdbMongoCollectionKind             = "CosmosdbMongoCollection"
	CosmosdbMongoCollectionGroupKind        = schema.GroupKind{Group: Group, Kind: CosmosdbMongoCollectionKind}.String()
	CosmosdbMongoCollectionKindAPIVersion   = CosmosdbMongoCollectionKind + "." + GroupVersion.String()
	CosmosdbMongoCollectionGroupVersionKind = GroupVersion.WithKind(CosmosdbMongoCollectionKind)
)

func init() {
	SchemeBuilder.Register(&CosmosdbMongoCollection{}, &CosmosdbMongoCollectionList{})
}
