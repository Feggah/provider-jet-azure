/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BackupObservation struct {
}

type BackupParameters struct {
	IntervalInMinutes *int64 `json:"intervalInMinutes,omitempty" tf:"interval_in_minutes"`

	RetentionInHours *int64 `json:"retentionInHours,omitempty" tf:"retention_in_hours"`

	Type string `json:"type" tf:"type"`
}

type CapabilitiesObservation struct {
}

type CapabilitiesParameters struct {
	Name string `json:"name" tf:"name"`
}

type ConsistencyPolicyObservation struct {
}

type ConsistencyPolicyParameters struct {
	ConsistencyLevel string `json:"consistencyLevel" tf:"consistency_level"`

	MaxIntervalInSeconds *int64 `json:"maxIntervalInSeconds,omitempty" tf:"max_interval_in_seconds"`

	MaxStalenessPrefix *int64 `json:"maxStalenessPrefix,omitempty" tf:"max_staleness_prefix"`
}

type CorsRuleObservation struct {
}

type CorsRuleParameters struct {
	AllowedHeaders []string `json:"allowedHeaders" tf:"allowed_headers"`

	AllowedMethods []string `json:"allowedMethods" tf:"allowed_methods"`

	AllowedOrigins []string `json:"allowedOrigins" tf:"allowed_origins"`

	ExposedHeaders []string `json:"exposedHeaders" tf:"exposed_headers"`

	MaxAgeInSeconds int64 `json:"maxAgeInSeconds" tf:"max_age_in_seconds"`
}

type CosmosdbAccountObservation struct {
	ConnectionStrings []string `json:"connectionStrings" tf:"connection_strings"`

	Endpoint string `json:"endpoint" tf:"endpoint"`

	PrimaryKey string `json:"primaryKey" tf:"primary_key"`

	PrimaryMasterKey string `json:"primaryMasterKey" tf:"primary_master_key"`

	PrimaryReadonlyKey string `json:"primaryReadonlyKey" tf:"primary_readonly_key"`

	PrimaryReadonlyMasterKey string `json:"primaryReadonlyMasterKey" tf:"primary_readonly_master_key"`

	ReadEndpoints []string `json:"readEndpoints" tf:"read_endpoints"`

	SecondaryKey string `json:"secondaryKey" tf:"secondary_key"`

	SecondaryMasterKey string `json:"secondaryMasterKey" tf:"secondary_master_key"`

	SecondaryReadonlyKey string `json:"secondaryReadonlyKey" tf:"secondary_readonly_key"`

	SecondaryReadonlyMasterKey string `json:"secondaryReadonlyMasterKey" tf:"secondary_readonly_master_key"`

	WriteEndpoints []string `json:"writeEndpoints" tf:"write_endpoints"`
}

type CosmosdbAccountParameters struct {
	AccessKeyMetadataWritesEnabled *bool `json:"accessKeyMetadataWritesEnabled,omitempty" tf:"access_key_metadata_writes_enabled"`

	AnalyticalStorageEnabled *bool `json:"analyticalStorageEnabled,omitempty" tf:"analytical_storage_enabled"`

	Backup []BackupParameters `json:"backup,omitempty" tf:"backup"`

	Capabilities []CapabilitiesParameters `json:"capabilities,omitempty" tf:"capabilities"`

	ConsistencyPolicy []ConsistencyPolicyParameters `json:"consistencyPolicy" tf:"consistency_policy"`

	CorsRule []CorsRuleParameters `json:"corsRule,omitempty" tf:"cors_rule"`

	EnableAutomaticFailover *bool `json:"enableAutomaticFailover,omitempty" tf:"enable_automatic_failover"`

	EnableFreeTier *bool `json:"enableFreeTier,omitempty" tf:"enable_free_tier"`

	EnableMultipleWriteLocations *bool `json:"enableMultipleWriteLocations,omitempty" tf:"enable_multiple_write_locations"`

	GeoLocation []GeoLocationParameters `json:"geoLocation" tf:"geo_location"`

	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	IpRangeFilter *string `json:"ipRangeFilter,omitempty" tf:"ip_range_filter"`

	IsVirtualNetworkFilterEnabled *bool `json:"isVirtualNetworkFilterEnabled,omitempty" tf:"is_virtual_network_filter_enabled"`

	KeyVaultKeyId *string `json:"keyVaultKeyId,omitempty" tf:"key_vault_key_id"`

	Kind *string `json:"kind,omitempty" tf:"kind"`

	Location string `json:"location" tf:"location"`

	MongoServerVersion *string `json:"mongoServerVersion,omitempty" tf:"mongo_server_version"`

	Name string `json:"name" tf:"name"`

	NetworkAclBypassForAzureServices *bool `json:"networkAclBypassForAzureServices,omitempty" tf:"network_acl_bypass_for_azure_services"`

	NetworkAclBypassIds []string `json:"networkAclBypassIds,omitempty" tf:"network_acl_bypass_ids"`

	OfferType string `json:"offerType" tf:"offer_type"`

	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	VirtualNetworkRule []VirtualNetworkRuleParameters `json:"virtualNetworkRule,omitempty" tf:"virtual_network_rule"`
}

type GeoLocationObservation struct {
	Id string `json:"id" tf:"id"`
}

type GeoLocationParameters struct {
	FailoverPriority int64 `json:"failoverPriority" tf:"failover_priority"`

	Location string `json:"location" tf:"location"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant"`
}

type IdentityObservation struct {
	PrincipalId string `json:"principalId" tf:"principal_id"`

	TenantId string `json:"tenantId" tf:"tenant_id"`
}

type IdentityParameters struct {
	Type string `json:"type" tf:"type"`
}

type VirtualNetworkRuleObservation struct {
}

type VirtualNetworkRuleParameters struct {
	Id string `json:"id" tf:"id"`

	IgnoreMissingVnetServiceEndpoint *bool `json:"ignoreMissingVnetServiceEndpoint,omitempty" tf:"ignore_missing_vnet_service_endpoint"`
}

// CosmosdbAccountSpec defines the desired state of CosmosdbAccount
type CosmosdbAccountSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CosmosdbAccountParameters `json:"forProvider"`
}

// CosmosdbAccountStatus defines the observed state of CosmosdbAccount.
type CosmosdbAccountStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CosmosdbAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbAccount is the Schema for the CosmosdbAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CosmosdbAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CosmosdbAccountSpec   `json:"spec"`
	Status            CosmosdbAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbAccountList contains a list of CosmosdbAccounts
type CosmosdbAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CosmosdbAccount `json:"items"`
}

// Repository type metadata.
var (
	CosmosdbAccountKind             = "CosmosdbAccount"
	CosmosdbAccountGroupKind        = schema.GroupKind{Group: Group, Kind: CosmosdbAccountKind}.String()
	CosmosdbAccountKindAPIVersion   = CosmosdbAccountKind + "." + GroupVersion.String()
	CosmosdbAccountGroupVersionKind = GroupVersion.WithKind(CosmosdbAccountKind)
)

func init() {
	SchemeBuilder.Register(&CosmosdbAccount{}, &CosmosdbAccountList{})
}
