/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ClusterKeyObservation struct {
}

type ClusterKeyParameters struct {
	Name string `json:"name" tf:"name"`

	OrderBy string `json:"orderBy" tf:"order_by"`
}

type ColumnObservation struct {
}

type ColumnParameters struct {
	Name string `json:"name" tf:"name"`

	Type string `json:"type" tf:"type"`
}

type CosmosdbCassandraTableAutoscaleSettingsObservation struct {
}

type CosmosdbCassandraTableAutoscaleSettingsParameters struct {
	MaxThroughput *int64 `json:"maxThroughput,omitempty" tf:"max_throughput"`
}

type CosmosdbCassandraTableObservation struct {
}

type CosmosdbCassandraTableParameters struct {
	AnalyticalStorageTTL *int64 `json:"analyticalStorageTtl,omitempty" tf:"analytical_storage_ttl"`

	AutoscaleSettings []CosmosdbCassandraTableAutoscaleSettingsParameters `json:"autoscaleSettings,omitempty" tf:"autoscale_settings"`

	CassandraKeyspaceID string `json:"cassandraKeyspaceId" tf:"cassandra_keyspace_id"`

	DefaultTTL *int64 `json:"defaultTtl,omitempty" tf:"default_ttl"`

	Name string `json:"name" tf:"name"`

	Schema []SchemaParameters `json:"schema" tf:"schema"`

	Throughput *int64 `json:"throughput,omitempty" tf:"throughput"`
}

type PartitionKeyObservation struct {
}

type PartitionKeyParameters struct {
	Name string `json:"name" tf:"name"`
}

type SchemaObservation struct {
}

type SchemaParameters struct {
	ClusterKey []ClusterKeyParameters `json:"clusterKey,omitempty" tf:"cluster_key"`

	Column []ColumnParameters `json:"column" tf:"column"`

	PartitionKey []PartitionKeyParameters `json:"partitionKey" tf:"partition_key"`
}

// CosmosdbCassandraTableSpec defines the desired state of CosmosdbCassandraTable
type CosmosdbCassandraTableSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CosmosdbCassandraTableParameters `json:"forProvider"`
}

// CosmosdbCassandraTableStatus defines the observed state of CosmosdbCassandraTable.
type CosmosdbCassandraTableStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CosmosdbCassandraTableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbCassandraTable is the Schema for the CosmosdbCassandraTables API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CosmosdbCassandraTable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CosmosdbCassandraTableSpec   `json:"spec"`
	Status            CosmosdbCassandraTableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CosmosdbCassandraTableList contains a list of CosmosdbCassandraTables
type CosmosdbCassandraTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CosmosdbCassandraTable `json:"items"`
}

// Repository type metadata.
var (
	CosmosdbCassandraTableKind             = "CosmosdbCassandraTable"
	CosmosdbCassandraTableGroupKind        = schema.GroupKind{Group: Group, Kind: CosmosdbCassandraTableKind}.String()
	CosmosdbCassandraTableKindAPIVersion   = CosmosdbCassandraTableKind + "." + GroupVersion.String()
	CosmosdbCassandraTableGroupVersionKind = GroupVersion.WithKind(CosmosdbCassandraTableKind)
)

func init() {
	SchemeBuilder.Register(&CosmosdbCassandraTable{}, &CosmosdbCassandraTableList{})
}
