/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DiskEncryptionKeyObservation struct {
}

type DiskEncryptionKeyParameters struct {
	SecretURL string `json:"secretUrl" tf:"secret_url"`

	SourceVaultID string `json:"sourceVaultId" tf:"source_vault_id"`
}

type EncryptionSettingsObservation struct {
}

type EncryptionSettingsParameters struct {
	DiskEncryptionKey []DiskEncryptionKeyParameters `json:"diskEncryptionKey,omitempty" tf:"disk_encryption_key"`

	Enabled bool `json:"enabled" tf:"enabled"`

	KeyEncryptionKey []KeyEncryptionKeyParameters `json:"keyEncryptionKey,omitempty" tf:"key_encryption_key"`
}

type KeyEncryptionKeyObservation struct {
}

type KeyEncryptionKeyParameters struct {
	KeyURL string `json:"keyUrl" tf:"key_url"`

	SourceVaultID string `json:"sourceVaultId" tf:"source_vault_id"`
}

type ManagedDiskObservation struct {
}

type ManagedDiskParameters struct {
	CreateOption string `json:"createOption" tf:"create_option"`

	DiskAccessID *string `json:"diskAccessId,omitempty" tf:"disk_access_id"`

	DiskEncryptionSetID *string `json:"diskEncryptionSetId,omitempty" tf:"disk_encryption_set_id"`

	DiskIopsReadWrite *int64 `json:"diskIopsReadWrite,omitempty" tf:"disk_iops_read_write"`

	DiskMbpsReadWrite *int64 `json:"diskMbpsReadWrite,omitempty" tf:"disk_mbps_read_write"`

	DiskSizeGb *int64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb"`

	EncryptionSettings []EncryptionSettingsParameters `json:"encryptionSettings,omitempty" tf:"encryption_settings"`

	ImageReferenceID *string `json:"imageReferenceId,omitempty" tf:"image_reference_id"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	NetworkAccessPolicy *string `json:"networkAccessPolicy,omitempty" tf:"network_access_policy"`

	OsType *string `json:"osType,omitempty" tf:"os_type"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SourceResourceID *string `json:"sourceResourceId,omitempty" tf:"source_resource_id"`

	SourceURI *string `json:"sourceUri,omitempty" tf:"source_uri"`

	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id"`

	StorageAccountType string `json:"storageAccountType" tf:"storage_account_type"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Tier *string `json:"tier,omitempty" tf:"tier"`

	Zones []string `json:"zones,omitempty" tf:"zones"`
}

// ManagedDiskSpec defines the desired state of ManagedDisk
type ManagedDiskSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ManagedDiskParameters `json:"forProvider"`
}

// ManagedDiskStatus defines the observed state of ManagedDisk.
type ManagedDiskStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ManagedDiskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedDisk is the Schema for the ManagedDisks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ManagedDisk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedDiskSpec   `json:"spec"`
	Status            ManagedDiskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedDiskList contains a list of ManagedDisks
type ManagedDiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedDisk `json:"items"`
}

// Repository type metadata.
var (
	ManagedDiskKind             = "ManagedDisk"
	ManagedDiskGroupKind        = schema.GroupKind{Group: Group, Kind: ManagedDiskKind}.String()
	ManagedDiskKindAPIVersion   = ManagedDiskKind + "." + GroupVersion.String()
	ManagedDiskGroupVersionKind = GroupVersion.WithKind(ManagedDiskKind)
)

func init() {
	SchemeBuilder.Register(&ManagedDisk{}, &ManagedDiskList{})
}
