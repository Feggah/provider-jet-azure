/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ManagedApplicationObservation struct {
	Outputs map[string]string `json:"outputs" tf:"outputs"`
}

type ManagedApplicationParameters struct {
	ApplicationDefinitionID *string `json:"applicationDefinitionId,omitempty" tf:"application_definition_id"`

	Kind string `json:"kind" tf:"kind"`

	Location string `json:"location" tf:"location"`

	ManagedResourceGroupName string `json:"managedResourceGroupName" tf:"managed_resource_group_name"`

	Name string `json:"name" tf:"name"`

	ParameterValues *string `json:"parameterValues,omitempty" tf:"parameter_values"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	Plan []PlanParameters `json:"plan,omitempty" tf:"plan"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type PlanObservation struct {
}

type PlanParameters struct {
	Name string `json:"name" tf:"name"`

	Product string `json:"product" tf:"product"`

	PromotionCode *string `json:"promotionCode,omitempty" tf:"promotion_code"`

	Publisher string `json:"publisher" tf:"publisher"`

	Version string `json:"version" tf:"version"`
}

// ManagedApplicationSpec defines the desired state of ManagedApplication
type ManagedApplicationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ManagedApplicationParameters `json:"forProvider"`
}

// ManagedApplicationStatus defines the observed state of ManagedApplication.
type ManagedApplicationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ManagedApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedApplication is the Schema for the ManagedApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ManagedApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedApplicationSpec   `json:"spec"`
	Status            ManagedApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedApplicationList contains a list of ManagedApplications
type ManagedApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedApplication `json:"items"`
}

// Repository type metadata.
var (
	ManagedApplicationKind             = "ManagedApplication"
	ManagedApplicationGroupKind        = schema.GroupKind{Group: Group, Kind: ManagedApplicationKind}.String()
	ManagedApplicationKindAPIVersion   = ManagedApplicationKind + "." + GroupVersion.String()
	ManagedApplicationGroupVersionKind = GroupVersion.WithKind(ManagedApplicationKind)
)

func init() {
	SchemeBuilder.Register(&ManagedApplication{}, &ManagedApplicationList{})
}
