/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ConnectionConfigurationObservation struct {
}

type ConnectionConfigurationParameters struct {
	Name string `json:"name" tf:"name"`

	Route []RouteParameters `json:"route,omitempty" tf:"route"`

	VpnClientAddressPool []VpnClientAddressPoolParameters `json:"vpnClientAddressPool" tf:"vpn_client_address_pool"`
}

type PointToSiteVpnGatewayObservation struct {
}

type PointToSiteVpnGatewayParameters struct {
	ConnectionConfiguration []ConnectionConfigurationParameters `json:"connectionConfiguration" tf:"connection_configuration"`

	DnsServers []string `json:"dnsServers,omitempty" tf:"dns_servers"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	ScaleUnit int64 `json:"scaleUnit" tf:"scale_unit"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	VirtualHubId string `json:"virtualHubId" tf:"virtual_hub_id"`

	VpnServerConfigurationId string `json:"vpnServerConfigurationId" tf:"vpn_server_configuration_id"`
}

type PropagatedRouteTableObservation struct {
}

type PropagatedRouteTableParameters struct {
	Ids []string `json:"ids" tf:"ids"`

	Labels []string `json:"labels,omitempty" tf:"labels"`
}

type RouteObservation struct {
}

type RouteParameters struct {
	AssociatedRouteTableId string `json:"associatedRouteTableId" tf:"associated_route_table_id"`

	PropagatedRouteTable []PropagatedRouteTableParameters `json:"propagatedRouteTable,omitempty" tf:"propagated_route_table"`
}

type VpnClientAddressPoolObservation struct {
}

type VpnClientAddressPoolParameters struct {
	AddressPrefixes []string `json:"addressPrefixes" tf:"address_prefixes"`
}

// PointToSiteVpnGatewaySpec defines the desired state of PointToSiteVpnGateway
type PointToSiteVpnGatewaySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PointToSiteVpnGatewayParameters `json:"forProvider"`
}

// PointToSiteVpnGatewayStatus defines the observed state of PointToSiteVpnGateway.
type PointToSiteVpnGatewayStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PointToSiteVpnGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PointToSiteVpnGateway is the Schema for the PointToSiteVpnGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PointToSiteVpnGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PointToSiteVpnGatewaySpec   `json:"spec"`
	Status            PointToSiteVpnGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PointToSiteVpnGatewayList contains a list of PointToSiteVpnGateways
type PointToSiteVpnGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PointToSiteVpnGateway `json:"items"`
}

// Repository type metadata.
var (
	PointToSiteVpnGatewayKind             = "PointToSiteVpnGateway"
	PointToSiteVpnGatewayGroupKind        = schema.GroupKind{Group: Group, Kind: PointToSiteVpnGatewayKind}.String()
	PointToSiteVpnGatewayKindAPIVersion   = PointToSiteVpnGatewayKind + "." + GroupVersion.String()
	PointToSiteVpnGatewayGroupVersionKind = GroupVersion.WithKind(PointToSiteVpnGatewayKind)
)

func init() {
	SchemeBuilder.Register(&PointToSiteVpnGateway{}, &PointToSiteVpnGatewayList{})
}
