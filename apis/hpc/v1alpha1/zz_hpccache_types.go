/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AccessRuleObservation struct {
}

type AccessRuleParameters struct {
	Access string `json:"access" tf:"access"`

	AnonymousGID *int64 `json:"anonymousGid,omitempty" tf:"anonymous_gid"`

	AnonymousUID *int64 `json:"anonymousUid,omitempty" tf:"anonymous_uid"`

	Filter *string `json:"filter,omitempty" tf:"filter"`

	RootSquashEnabled *bool `json:"rootSquashEnabled,omitempty" tf:"root_squash_enabled"`

	Scope string `json:"scope" tf:"scope"`

	SubmountAccessEnabled *bool `json:"submountAccessEnabled,omitempty" tf:"submount_access_enabled"`

	SuidEnabled *bool `json:"suidEnabled,omitempty" tf:"suid_enabled"`
}

type BindObservation struct {
}

type BindParameters struct {
	Dn string `json:"dn" tf:"dn"`

	Password string `json:"password" tf:"password"`
}

type DNSObservation struct {
}

type DNSParameters struct {
	SearchDomain *string `json:"searchDomain,omitempty" tf:"search_domain"`

	Servers []string `json:"servers" tf:"servers"`
}

type DefaultAccessPolicyObservation struct {
}

type DefaultAccessPolicyParameters struct {
	AccessRule []AccessRuleParameters `json:"accessRule" tf:"access_rule"`
}

type DirectoryActiveDirectoryObservation struct {
}

type DirectoryActiveDirectoryParameters struct {
	CacheNetbiosName string `json:"cacheNetbiosName" tf:"cache_netbios_name"`

	DNSPrimaryIP string `json:"dnsPrimaryIp" tf:"dns_primary_ip"`

	DNSSecondaryIP *string `json:"dnsSecondaryIp,omitempty" tf:"dns_secondary_ip"`

	DomainName string `json:"domainName" tf:"domain_name"`

	DomainNetbiosName string `json:"domainNetbiosName" tf:"domain_netbios_name"`

	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type DirectoryFlatFileObservation struct {
}

type DirectoryFlatFileParameters struct {
	GroupFileURI string `json:"groupFileUri" tf:"group_file_uri"`

	PasswordFileURI string `json:"passwordFileUri" tf:"password_file_uri"`
}

type DirectoryLdapObservation struct {
}

type DirectoryLdapParameters struct {
	BaseDn string `json:"baseDn" tf:"base_dn"`

	Bind []BindParameters `json:"bind,omitempty" tf:"bind"`

	CertificateValidationURI *string `json:"certificateValidationUri,omitempty" tf:"certificate_validation_uri"`

	DownloadCertificateAutomatically *bool `json:"downloadCertificateAutomatically,omitempty" tf:"download_certificate_automatically"`

	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`

	Server string `json:"server" tf:"server"`
}

type HpcCacheObservation struct {
	MountAddresses []string `json:"mountAddresses" tf:"mount_addresses"`
}

type HpcCacheParameters struct {
	CacheSizeInGb int64 `json:"cacheSizeInGb" tf:"cache_size_in_gb"`

	DNS []DNSParameters `json:"dns,omitempty" tf:"dns"`

	DefaultAccessPolicy []DefaultAccessPolicyParameters `json:"defaultAccessPolicy,omitempty" tf:"default_access_policy"`

	DirectoryActiveDirectory []DirectoryActiveDirectoryParameters `json:"directoryActiveDirectory,omitempty" tf:"directory_active_directory"`

	DirectoryFlatFile []DirectoryFlatFileParameters `json:"directoryFlatFile,omitempty" tf:"directory_flat_file"`

	DirectoryLdap []DirectoryLdapParameters `json:"directoryLdap,omitempty" tf:"directory_ldap"`

	Location string `json:"location" tf:"location"`

	Mtu *int64 `json:"mtu,omitempty" tf:"mtu"`

	Name string `json:"name" tf:"name"`

	NtpServer *string `json:"ntpServer,omitempty" tf:"ntp_server"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RootSquashEnabled *bool `json:"rootSquashEnabled,omitempty" tf:"root_squash_enabled"`

	SkuName string `json:"skuName" tf:"sku_name"`

	SubnetID string `json:"subnetId" tf:"subnet_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// HpcCacheSpec defines the desired state of HpcCache
type HpcCacheSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HpcCacheParameters `json:"forProvider"`
}

// HpcCacheStatus defines the observed state of HpcCache.
type HpcCacheStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HpcCacheObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HpcCache is the Schema for the HpcCaches API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HpcCache struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HpcCacheSpec   `json:"spec"`
	Status            HpcCacheStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HpcCacheList contains a list of HpcCaches
type HpcCacheList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HpcCache `json:"items"`
}

// Repository type metadata.
var (
	HpcCacheKind             = "HpcCache"
	HpcCacheGroupKind        = schema.GroupKind{Group: Group, Kind: HpcCacheKind}.String()
	HpcCacheKindAPIVersion   = HpcCacheKind + "." + GroupVersion.String()
	HpcCacheGroupVersionKind = GroupVersion.WithKind(HpcCacheKind)
)

func init() {
	SchemeBuilder.Register(&HpcCache{}, &HpcCacheList{})
}
