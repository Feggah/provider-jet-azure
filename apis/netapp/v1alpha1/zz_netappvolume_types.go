/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataProtectionReplicationObservation struct {
}

type DataProtectionReplicationParameters struct {
	EndpointType *string `json:"endpointType,omitempty" tf:"endpoint_type"`

	RemoteVolumeLocation string `json:"remoteVolumeLocation" tf:"remote_volume_location"`

	RemoteVolumeResourceId string `json:"remoteVolumeResourceId" tf:"remote_volume_resource_id"`

	ReplicationFrequency string `json:"replicationFrequency" tf:"replication_frequency"`
}

type ExportPolicyRuleObservation struct {
}

type ExportPolicyRuleParameters struct {
	AllowedClients []string `json:"allowedClients" tf:"allowed_clients"`

	CifsEnabled *bool `json:"cifsEnabled,omitempty" tf:"cifs_enabled"`

	Nfsv3Enabled *bool `json:"nfsv3Enabled,omitempty" tf:"nfsv3_enabled"`

	Nfsv4Enabled *bool `json:"nfsv4Enabled,omitempty" tf:"nfsv4_enabled"`

	ProtocolsEnabled []string `json:"protocolsEnabled,omitempty" tf:"protocols_enabled"`

	RootAccessEnabled *bool `json:"rootAccessEnabled,omitempty" tf:"root_access_enabled"`

	RuleIndex int64 `json:"ruleIndex" tf:"rule_index"`

	UnixReadOnly *bool `json:"unixReadOnly,omitempty" tf:"unix_read_only"`

	UnixReadWrite *bool `json:"unixReadWrite,omitempty" tf:"unix_read_write"`
}

type NetappVolumeObservation struct {
	MountIpAddresses []string `json:"mountIpAddresses" tf:"mount_ip_addresses"`
}

type NetappVolumeParameters struct {
	AccountName string `json:"accountName" tf:"account_name"`

	CreateFromSnapshotResourceId *string `json:"createFromSnapshotResourceId,omitempty" tf:"create_from_snapshot_resource_id"`

	DataProtectionReplication []DataProtectionReplicationParameters `json:"dataProtectionReplication,omitempty" tf:"data_protection_replication"`

	ExportPolicyRule []ExportPolicyRuleParameters `json:"exportPolicyRule,omitempty" tf:"export_policy_rule"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	PoolName string `json:"poolName" tf:"pool_name"`

	Protocols []string `json:"protocols,omitempty" tf:"protocols"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SecurityStyle *string `json:"securityStyle,omitempty" tf:"security_style"`

	ServiceLevel string `json:"serviceLevel" tf:"service_level"`

	SnapshotDirectoryVisible *bool `json:"snapshotDirectoryVisible,omitempty" tf:"snapshot_directory_visible"`

	StorageQuotaInGb int64 `json:"storageQuotaInGb" tf:"storage_quota_in_gb"`

	SubnetId string `json:"subnetId" tf:"subnet_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	VolumePath string `json:"volumePath" tf:"volume_path"`
}

// NetappVolumeSpec defines the desired state of NetappVolume
type NetappVolumeSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NetappVolumeParameters `json:"forProvider"`
}

// NetappVolumeStatus defines the observed state of NetappVolume.
type NetappVolumeStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NetappVolumeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetappVolume is the Schema for the NetappVolumes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type NetappVolume struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetappVolumeSpec   `json:"spec"`
	Status            NetappVolumeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetappVolumeList contains a list of NetappVolumes
type NetappVolumeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetappVolume `json:"items"`
}

// Repository type metadata.
var (
	NetappVolumeKind             = "NetappVolume"
	NetappVolumeGroupKind        = schema.GroupKind{Group: Group, Kind: NetappVolumeKind}.String()
	NetappVolumeKindAPIVersion   = NetappVolumeKind + "." + GroupVersion.String()
	NetappVolumeGroupVersionKind = GroupVersion.WithKind(NetappVolumeKind)
)

func init() {
	SchemeBuilder.Register(&NetappVolume{}, &NetappVolumeList{})
}
