/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ActiveDirectoryObservation struct {
}

type ActiveDirectoryParameters struct {
	DnsServers []string `json:"dnsServers" tf:"dns_servers"`

	Domain string `json:"domain" tf:"domain"`

	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit"`

	Password string `json:"password" tf:"password"`

	SmbServerName string `json:"smbServerName" tf:"smb_server_name"`

	Username string `json:"username" tf:"username"`
}

type NetappAccountObservation struct {
}

type NetappAccountParameters struct {
	ActiveDirectory []ActiveDirectoryParameters `json:"activeDirectory,omitempty" tf:"active_directory"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// NetappAccountSpec defines the desired state of NetappAccount
type NetappAccountSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NetappAccountParameters `json:"forProvider"`
}

// NetappAccountStatus defines the observed state of NetappAccount.
type NetappAccountStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NetappAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetappAccount is the Schema for the NetappAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type NetappAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetappAccountSpec   `json:"spec"`
	Status            NetappAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetappAccountList contains a list of NetappAccounts
type NetappAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetappAccount `json:"items"`
}

// Repository type metadata.
var (
	NetappAccountKind             = "NetappAccount"
	NetappAccountGroupKind        = schema.GroupKind{Group: Group, Kind: NetappAccountKind}.String()
	NetappAccountKindAPIVersion   = NetappAccountKind + "." + GroupVersion.String()
	NetappAccountGroupVersionKind = GroupVersion.WithKind(NetappAccountKind)
)

func init() {
	SchemeBuilder.Register(&NetappAccount{}, &NetappAccountList{})
}
