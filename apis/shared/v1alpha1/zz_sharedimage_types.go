/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IdentifierObservation struct {
}

type IdentifierParameters struct {
	Offer string `json:"offer" tf:"offer"`

	Publisher string `json:"publisher" tf:"publisher"`

	Sku string `json:"sku" tf:"sku"`
}

type PurchasePlanObservation struct {
}

type PurchasePlanParameters struct {
	Name string `json:"name" tf:"name"`

	Product *string `json:"product,omitempty" tf:"product"`

	Publisher *string `json:"publisher,omitempty" tf:"publisher"`
}

type SharedImageObservation struct {
}

type SharedImageParameters struct {
	Description *string `json:"description,omitempty" tf:"description"`

	Eula *string `json:"eula,omitempty" tf:"eula"`

	GalleryName string `json:"galleryName" tf:"gallery_name"`

	HyperVGeneration *string `json:"hyperVGeneration,omitempty" tf:"hyper_v_generation"`

	Identifier []IdentifierParameters `json:"identifier" tf:"identifier"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	OsType string `json:"osType" tf:"os_type"`

	PrivacyStatementURI *string `json:"privacyStatementUri,omitempty" tf:"privacy_statement_uri"`

	PurchasePlan []PurchasePlanParameters `json:"purchasePlan,omitempty" tf:"purchase_plan"`

	ReleaseNoteURI *string `json:"releaseNoteUri,omitempty" tf:"release_note_uri"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Specialized *bool `json:"specialized,omitempty" tf:"specialized"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

// SharedImageSpec defines the desired state of SharedImage
type SharedImageSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SharedImageParameters `json:"forProvider"`
}

// SharedImageStatus defines the observed state of SharedImage.
type SharedImageStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SharedImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SharedImage is the Schema for the SharedImages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SharedImage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SharedImageSpec   `json:"spec"`
	Status            SharedImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SharedImageList contains a list of SharedImages
type SharedImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SharedImage `json:"items"`
}

// Repository type metadata.
var (
	SharedImageKind             = "SharedImage"
	SharedImageGroupKind        = schema.GroupKind{Group: Group, Kind: SharedImageKind}.String()
	SharedImageKindAPIVersion   = SharedImageKind + "." + GroupVersion.String()
	SharedImageGroupVersionKind = GroupVersion.WithKind(SharedImageKind)
)

func init() {
	SchemeBuilder.Register(&SharedImage{}, &SharedImageList{})
}
