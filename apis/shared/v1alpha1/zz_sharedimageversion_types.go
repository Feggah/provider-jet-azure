/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SharedImageVersionObservation struct {
}

type SharedImageVersionParameters struct {
	ExcludeFromLatest *bool `json:"excludeFromLatest,omitempty" tf:"exclude_from_latest"`

	GalleryName string `json:"galleryName" tf:"gallery_name"`

	ImageName string `json:"imageName" tf:"image_name"`

	Location string `json:"location" tf:"location"`

	ManagedImageId *string `json:"managedImageId,omitempty" tf:"managed_image_id"`

	Name string `json:"name" tf:"name"`

	OsDiskSnapshotId *string `json:"osDiskSnapshotId,omitempty" tf:"os_disk_snapshot_id"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TargetRegion []TargetRegionParameters `json:"targetRegion" tf:"target_region"`
}

type TargetRegionObservation struct {
}

type TargetRegionParameters struct {
	Name string `json:"name" tf:"name"`

	RegionalReplicaCount int64 `json:"regionalReplicaCount" tf:"regional_replica_count"`

	StorageAccountType *string `json:"storageAccountType,omitempty" tf:"storage_account_type"`
}

// SharedImageVersionSpec defines the desired state of SharedImageVersion
type SharedImageVersionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SharedImageVersionParameters `json:"forProvider"`
}

// SharedImageVersionStatus defines the observed state of SharedImageVersion.
type SharedImageVersionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SharedImageVersionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SharedImageVersion is the Schema for the SharedImageVersions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SharedImageVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SharedImageVersionSpec   `json:"spec"`
	Status            SharedImageVersionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SharedImageVersionList contains a list of SharedImageVersions
type SharedImageVersionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SharedImageVersion `json:"items"`
}

// Repository type metadata.
var (
	SharedImageVersionKind             = "SharedImageVersion"
	SharedImageVersionGroupKind        = schema.GroupKind{Group: Group, Kind: SharedImageVersionKind}.String()
	SharedImageVersionKindAPIVersion   = SharedImageVersionKind + "." + GroupVersion.String()
	SharedImageVersionGroupVersionKind = GroupVersion.WithKind(SharedImageVersionKind)
)

func init() {
	SchemeBuilder.Register(&SharedImageVersion{}, &SharedImageVersionList{})
}
