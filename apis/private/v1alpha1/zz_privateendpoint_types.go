/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CustomDnsConfigsObservation struct {
	Fqdn string `json:"fqdn" tf:"fqdn"`

	IpAddresses []string `json:"ipAddresses" tf:"ip_addresses"`
}

type CustomDnsConfigsParameters struct {
}

type PrivateDnsZoneConfigsObservation struct {
	Id string `json:"id" tf:"id"`

	Name string `json:"name" tf:"name"`

	PrivateDnsZoneId string `json:"privateDnsZoneId" tf:"private_dns_zone_id"`

	RecordSets []RecordSetsObservation `json:"recordSets" tf:"record_sets"`
}

type PrivateDnsZoneConfigsParameters struct {
}

type PrivateDnsZoneGroupObservation struct {
	Id string `json:"id" tf:"id"`
}

type PrivateDnsZoneGroupParameters struct {
	Name string `json:"name" tf:"name"`

	PrivateDnsZoneIds []string `json:"privateDnsZoneIds" tf:"private_dns_zone_ids"`
}

type PrivateEndpointObservation struct {
	CustomDnsConfigs []CustomDnsConfigsObservation `json:"customDnsConfigs" tf:"custom_dns_configs"`

	PrivateDnsZoneConfigs []PrivateDnsZoneConfigsObservation `json:"privateDnsZoneConfigs" tf:"private_dns_zone_configs"`
}

type PrivateEndpointParameters struct {
	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	PrivateDnsZoneGroup []PrivateDnsZoneGroupParameters `json:"privateDnsZoneGroup,omitempty" tf:"private_dns_zone_group"`

	PrivateServiceConnection []PrivateServiceConnectionParameters `json:"privateServiceConnection" tf:"private_service_connection"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SubnetId string `json:"subnetId" tf:"subnet_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type PrivateServiceConnectionObservation struct {
	PrivateIpAddress string `json:"privateIpAddress" tf:"private_ip_address"`
}

type PrivateServiceConnectionParameters struct {
	IsManualConnection bool `json:"isManualConnection" tf:"is_manual_connection"`

	Name string `json:"name" tf:"name"`

	PrivateConnectionResourceAlias *string `json:"privateConnectionResourceAlias,omitempty" tf:"private_connection_resource_alias"`

	PrivateConnectionResourceId *string `json:"privateConnectionResourceId,omitempty" tf:"private_connection_resource_id"`

	RequestMessage *string `json:"requestMessage,omitempty" tf:"request_message"`

	SubresourceNames []string `json:"subresourceNames,omitempty" tf:"subresource_names"`
}

type RecordSetsObservation struct {
	Fqdn string `json:"fqdn" tf:"fqdn"`

	IpAddresses []string `json:"ipAddresses" tf:"ip_addresses"`

	Name string `json:"name" tf:"name"`

	Ttl int64 `json:"ttl" tf:"ttl"`

	Type string `json:"type" tf:"type"`
}

type RecordSetsParameters struct {
}

// PrivateEndpointSpec defines the desired state of PrivateEndpoint
type PrivateEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PrivateEndpointParameters `json:"forProvider"`
}

// PrivateEndpointStatus defines the observed state of PrivateEndpoint.
type PrivateEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PrivateEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateEndpoint is the Schema for the PrivateEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PrivateEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrivateEndpointSpec   `json:"spec"`
	Status            PrivateEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateEndpointList contains a list of PrivateEndpoints
type PrivateEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateEndpoint `json:"items"`
}

// Repository type metadata.
var (
	PrivateEndpointKind             = "PrivateEndpoint"
	PrivateEndpointGroupKind        = schema.GroupKind{Group: Group, Kind: PrivateEndpointKind}.String()
	PrivateEndpointKindAPIVersion   = PrivateEndpointKind + "." + GroupVersion.String()
	PrivateEndpointGroupVersionKind = GroupVersion.WithKind(PrivateEndpointKind)
)

func init() {
	SchemeBuilder.Register(&PrivateEndpoint{}, &PrivateEndpointList{})
}
