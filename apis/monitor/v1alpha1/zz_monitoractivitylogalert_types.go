/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ActionObservation struct {
}

type ActionParameters struct {
	ActionGroupId string `json:"actionGroupId" tf:"action_group_id"`

	WebhookProperties map[string]string `json:"webhookProperties,omitempty" tf:"webhook_properties"`
}

type CriteriaObservation struct {
}

type CriteriaParameters struct {
	Caller *string `json:"caller,omitempty" tf:"caller"`

	Category string `json:"category" tf:"category"`

	Level *string `json:"level,omitempty" tf:"level"`

	OperationName *string `json:"operationName,omitempty" tf:"operation_name"`

	RecommendationCategory *string `json:"recommendationCategory,omitempty" tf:"recommendation_category"`

	RecommendationImpact *string `json:"recommendationImpact,omitempty" tf:"recommendation_impact"`

	RecommendationType *string `json:"recommendationType,omitempty" tf:"recommendation_type"`

	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group"`

	ResourceId *string `json:"resourceId,omitempty" tf:"resource_id"`

	ResourceProvider *string `json:"resourceProvider,omitempty" tf:"resource_provider"`

	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type"`

	ServiceHealth []ServiceHealthParameters `json:"serviceHealth,omitempty" tf:"service_health"`

	Status *string `json:"status,omitempty" tf:"status"`

	SubStatus *string `json:"subStatus,omitempty" tf:"sub_status"`
}

type MonitorActivityLogAlertObservation struct {
}

type MonitorActivityLogAlertParameters struct {
	Action []ActionParameters `json:"action,omitempty" tf:"action"`

	Criteria []CriteriaParameters `json:"criteria" tf:"criteria"`

	Description *string `json:"description,omitempty" tf:"description"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Scopes []string `json:"scopes" tf:"scopes"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type ServiceHealthObservation struct {
}

type ServiceHealthParameters struct {
	Events []string `json:"events,omitempty" tf:"events"`

	Locations []string `json:"locations,omitempty" tf:"locations"`

	Services []string `json:"services,omitempty" tf:"services"`
}

// MonitorActivityLogAlertSpec defines the desired state of MonitorActivityLogAlert
type MonitorActivityLogAlertSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MonitorActivityLogAlertParameters `json:"forProvider"`
}

// MonitorActivityLogAlertStatus defines the observed state of MonitorActivityLogAlert.
type MonitorActivityLogAlertStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MonitorActivityLogAlertObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorActivityLogAlert is the Schema for the MonitorActivityLogAlerts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MonitorActivityLogAlert struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorActivityLogAlertSpec   `json:"spec"`
	Status            MonitorActivityLogAlertStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorActivityLogAlertList contains a list of MonitorActivityLogAlerts
type MonitorActivityLogAlertList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorActivityLogAlert `json:"items"`
}

// Repository type metadata.
var (
	MonitorActivityLogAlertKind             = "MonitorActivityLogAlert"
	MonitorActivityLogAlertGroupKind        = schema.GroupKind{Group: Group, Kind: MonitorActivityLogAlertKind}.String()
	MonitorActivityLogAlertKindAPIVersion   = MonitorActivityLogAlertKind + "." + GroupVersion.String()
	MonitorActivityLogAlertGroupVersionKind = GroupVersion.WithKind(MonitorActivityLogAlertKind)
)

func init() {
	SchemeBuilder.Register(&MonitorActivityLogAlert{}, &MonitorActivityLogAlertList{})
}
