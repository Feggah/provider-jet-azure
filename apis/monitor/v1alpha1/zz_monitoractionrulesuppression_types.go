/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ConditionAlertContextObservation struct {
}

type ConditionAlertContextParameters struct {
	Operator string `json:"operator" tf:"operator"`

	Values []string `json:"values" tf:"values"`
}

type ConditionAlertRuleIDObservation struct {
}

type ConditionAlertRuleIDParameters struct {
	Operator string `json:"operator" tf:"operator"`

	Values []string `json:"values" tf:"values"`
}

type ConditionDescriptionObservation struct {
}

type ConditionDescriptionParameters struct {
	Operator string `json:"operator" tf:"operator"`

	Values []string `json:"values" tf:"values"`
}

type ConditionMonitorObservation struct {
}

type ConditionMonitorParameters struct {
	Operator string `json:"operator" tf:"operator"`

	Values []string `json:"values" tf:"values"`
}

type ConditionMonitorServiceObservation struct {
}

type ConditionMonitorServiceParameters struct {
	Operator string `json:"operator" tf:"operator"`

	Values []string `json:"values" tf:"values"`
}

type ConditionSeverityObservation struct {
}

type ConditionSeverityParameters struct {
	Operator string `json:"operator" tf:"operator"`

	Values []string `json:"values" tf:"values"`
}

type ConditionTargetResourceTypeObservation struct {
}

type ConditionTargetResourceTypeParameters struct {
	Operator string `json:"operator" tf:"operator"`

	Values []string `json:"values" tf:"values"`
}

type MonitorActionRuleSuppressionConditionObservation struct {
}

type MonitorActionRuleSuppressionConditionParameters struct {
	AlertContext []ConditionAlertContextParameters `json:"alertContext,omitempty" tf:"alert_context"`

	AlertRuleID []ConditionAlertRuleIDParameters `json:"alertRuleId,omitempty" tf:"alert_rule_id"`

	Description []ConditionDescriptionParameters `json:"description,omitempty" tf:"description"`

	Monitor []ConditionMonitorParameters `json:"monitor,omitempty" tf:"monitor"`

	MonitorService []ConditionMonitorServiceParameters `json:"monitorService,omitempty" tf:"monitor_service"`

	Severity []ConditionSeverityParameters `json:"severity,omitempty" tf:"severity"`

	TargetResourceType []ConditionTargetResourceTypeParameters `json:"targetResourceType,omitempty" tf:"target_resource_type"`
}

type MonitorActionRuleSuppressionObservation struct {
}

type MonitorActionRuleSuppressionParameters struct {
	Condition []MonitorActionRuleSuppressionConditionParameters `json:"condition,omitempty" tf:"condition"`

	Description *string `json:"description,omitempty" tf:"description"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Scope []MonitorActionRuleSuppressionScopeParameters `json:"scope,omitempty" tf:"scope"`

	Suppression []SuppressionParameters `json:"suppression" tf:"suppression"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type MonitorActionRuleSuppressionScopeObservation struct {
}

type MonitorActionRuleSuppressionScopeParameters struct {
	ResourceIds []string `json:"resourceIds" tf:"resource_ids"`

	Type string `json:"type" tf:"type"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {
	EndDateUtc string `json:"endDateUtc" tf:"end_date_utc"`

	RecurrenceMonthly []int64 `json:"recurrenceMonthly,omitempty" tf:"recurrence_monthly"`

	RecurrenceWeekly []string `json:"recurrenceWeekly,omitempty" tf:"recurrence_weekly"`

	StartDateUtc string `json:"startDateUtc" tf:"start_date_utc"`
}

type SuppressionObservation struct {
}

type SuppressionParameters struct {
	RecurrenceType string `json:"recurrenceType" tf:"recurrence_type"`

	Schedule []ScheduleParameters `json:"schedule,omitempty" tf:"schedule"`
}

// MonitorActionRuleSuppressionSpec defines the desired state of MonitorActionRuleSuppression
type MonitorActionRuleSuppressionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MonitorActionRuleSuppressionParameters `json:"forProvider"`
}

// MonitorActionRuleSuppressionStatus defines the observed state of MonitorActionRuleSuppression.
type MonitorActionRuleSuppressionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MonitorActionRuleSuppressionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorActionRuleSuppression is the Schema for the MonitorActionRuleSuppressions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MonitorActionRuleSuppression struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorActionRuleSuppressionSpec   `json:"spec"`
	Status            MonitorActionRuleSuppressionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorActionRuleSuppressionList contains a list of MonitorActionRuleSuppressions
type MonitorActionRuleSuppressionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorActionRuleSuppression `json:"items"`
}

// Repository type metadata.
var (
	MonitorActionRuleSuppressionKind             = "MonitorActionRuleSuppression"
	MonitorActionRuleSuppressionGroupKind        = schema.GroupKind{Group: Group, Kind: MonitorActionRuleSuppressionKind}.String()
	MonitorActionRuleSuppressionKindAPIVersion   = MonitorActionRuleSuppressionKind + "." + GroupVersion.String()
	MonitorActionRuleSuppressionGroupVersionKind = GroupVersion.WithKind(MonitorActionRuleSuppressionKind)
)

func init() {
	SchemeBuilder.Register(&MonitorActionRuleSuppression{}, &MonitorActionRuleSuppressionList{})
}
