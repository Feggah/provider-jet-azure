/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CapacityObservation struct {
}

type CapacityParameters struct {
	Default int64 `json:"default" tf:"default"`

	Maximum int64 `json:"maximum" tf:"maximum"`

	Minimum int64 `json:"minimum" tf:"minimum"`
}

type DimensionsObservation struct {
}

type DimensionsParameters struct {
	Name string `json:"name" tf:"name"`

	Operator string `json:"operator" tf:"operator"`

	Values []string `json:"values" tf:"values"`
}

type EmailObservation struct {
}

type EmailParameters struct {
	CustomEmails []string `json:"customEmails,omitempty" tf:"custom_emails"`

	SendToSubscriptionAdministrator *bool `json:"sendToSubscriptionAdministrator,omitempty" tf:"send_to_subscription_administrator"`

	SendToSubscriptionCoAdministrator *bool `json:"sendToSubscriptionCoAdministrator,omitempty" tf:"send_to_subscription_co_administrator"`
}

type FixedDateObservation struct {
}

type FixedDateParameters struct {
	End string `json:"end" tf:"end"`

	Start string `json:"start" tf:"start"`

	Timezone *string `json:"timezone,omitempty" tf:"timezone"`
}

type MetricTriggerObservation struct {
}

type MetricTriggerParameters struct {
	Dimensions []DimensionsParameters `json:"dimensions,omitempty" tf:"dimensions"`

	DivideByInstanceCount *bool `json:"divideByInstanceCount,omitempty" tf:"divide_by_instance_count"`

	MetricName string `json:"metricName" tf:"metric_name"`

	MetricNamespace *string `json:"metricNamespace,omitempty" tf:"metric_namespace"`

	MetricResourceId string `json:"metricResourceId" tf:"metric_resource_id"`

	Operator string `json:"operator" tf:"operator"`

	Statistic string `json:"statistic" tf:"statistic"`

	Threshold float64 `json:"threshold" tf:"threshold"`

	TimeAggregation string `json:"timeAggregation" tf:"time_aggregation"`

	TimeGrain string `json:"timeGrain" tf:"time_grain"`

	TimeWindow string `json:"timeWindow" tf:"time_window"`
}

type MonitorAutoscaleSettingObservation struct {
}

type MonitorAutoscaleSettingParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Location string `json:"location" tf:"location"`

	Name string `json:"name" tf:"name"`

	Notification []NotificationParameters `json:"notification,omitempty" tf:"notification"`

	Profile []ProfileParameters `json:"profile" tf:"profile"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TargetResourceId string `json:"targetResourceId" tf:"target_resource_id"`
}

type NotificationObservation struct {
}

type NotificationParameters struct {
	Email []EmailParameters `json:"email,omitempty" tf:"email"`

	Webhook []WebhookParameters `json:"webhook,omitempty" tf:"webhook"`
}

type ProfileObservation struct {
}

type ProfileParameters struct {
	Capacity []CapacityParameters `json:"capacity" tf:"capacity"`

	FixedDate []FixedDateParameters `json:"fixedDate,omitempty" tf:"fixed_date"`

	Name string `json:"name" tf:"name"`

	Recurrence []RecurrenceParameters `json:"recurrence,omitempty" tf:"recurrence"`

	Rule []RuleParameters `json:"rule,omitempty" tf:"rule"`
}

type RecurrenceObservation struct {
}

type RecurrenceParameters struct {
	Days []string `json:"days" tf:"days"`

	Hours []int64 `json:"hours" tf:"hours"`

	Minutes []int64 `json:"minutes" tf:"minutes"`

	Timezone *string `json:"timezone,omitempty" tf:"timezone"`
}

type RuleObservation struct {
}

type RuleParameters struct {
	MetricTrigger []MetricTriggerParameters `json:"metricTrigger" tf:"metric_trigger"`

	ScaleAction []ScaleActionParameters `json:"scaleAction" tf:"scale_action"`
}

type ScaleActionObservation struct {
}

type ScaleActionParameters struct {
	Cooldown string `json:"cooldown" tf:"cooldown"`

	Direction string `json:"direction" tf:"direction"`

	Type string `json:"type" tf:"type"`

	Value int64 `json:"value" tf:"value"`
}

type WebhookObservation struct {
}

type WebhookParameters struct {
	Properties map[string]string `json:"properties,omitempty" tf:"properties"`

	ServiceUri string `json:"serviceUri" tf:"service_uri"`
}

// MonitorAutoscaleSettingSpec defines the desired state of MonitorAutoscaleSetting
type MonitorAutoscaleSettingSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MonitorAutoscaleSettingParameters `json:"forProvider"`
}

// MonitorAutoscaleSettingStatus defines the observed state of MonitorAutoscaleSetting.
type MonitorAutoscaleSettingStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MonitorAutoscaleSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorAutoscaleSetting is the Schema for the MonitorAutoscaleSettings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MonitorAutoscaleSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorAutoscaleSettingSpec   `json:"spec"`
	Status            MonitorAutoscaleSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorAutoscaleSettingList contains a list of MonitorAutoscaleSettings
type MonitorAutoscaleSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitorAutoscaleSetting `json:"items"`
}

// Repository type metadata.
var (
	MonitorAutoscaleSettingKind             = "MonitorAutoscaleSetting"
	MonitorAutoscaleSettingGroupKind        = schema.GroupKind{Group: Group, Kind: MonitorAutoscaleSettingKind}.String()
	MonitorAutoscaleSettingKindAPIVersion   = MonitorAutoscaleSettingKind + "." + GroupVersion.String()
	MonitorAutoscaleSettingGroupVersionKind = GroupVersion.WithKind(MonitorAutoscaleSettingKind)
)

func init() {
	SchemeBuilder.Register(&MonitorAutoscaleSetting{}, &MonitorAutoscaleSettingList{})
}
