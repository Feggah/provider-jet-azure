/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AutomationJobScheduleObservation struct {
}

type AutomationJobScheduleParameters struct {
	AutomationAccountName string `json:"automationAccountName" tf:"automation_account_name"`

	JobScheduleID *string `json:"jobScheduleId,omitempty" tf:"job_schedule_id"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RunOn *string `json:"runOn,omitempty" tf:"run_on"`

	RunbookName string `json:"runbookName" tf:"runbook_name"`

	ScheduleName string `json:"scheduleName" tf:"schedule_name"`
}

// AutomationJobScheduleSpec defines the desired state of AutomationJobSchedule
type AutomationJobScheduleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutomationJobScheduleParameters `json:"forProvider"`
}

// AutomationJobScheduleStatus defines the observed state of AutomationJobSchedule.
type AutomationJobScheduleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutomationJobScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationJobSchedule is the Schema for the AutomationJobSchedules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AutomationJobSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutomationJobScheduleSpec   `json:"spec"`
	Status            AutomationJobScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationJobScheduleList contains a list of AutomationJobSchedules
type AutomationJobScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationJobSchedule `json:"items"`
}

// Repository type metadata.
var (
	AutomationJobScheduleKind             = "AutomationJobSchedule"
	AutomationJobScheduleGroupKind        = schema.GroupKind{Group: Group, Kind: AutomationJobScheduleKind}.String()
	AutomationJobScheduleKindAPIVersion   = AutomationJobScheduleKind + "." + GroupVersion.String()
	AutomationJobScheduleGroupVersionKind = GroupVersion.WithKind(AutomationJobScheduleKind)
)

func init() {
	SchemeBuilder.Register(&AutomationJobSchedule{}, &AutomationJobScheduleList{})
}
