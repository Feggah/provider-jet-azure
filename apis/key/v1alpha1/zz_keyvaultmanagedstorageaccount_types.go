/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyVaultManagedStorageAccountObservation struct {
}

type KeyVaultManagedStorageAccountParameters struct {

	// +kubebuilder:validation:Required
	KeyVaultID *string `json:"keyVaultId" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RegenerateKeyAutomatically *bool `json:"regenerateKeyAutomatically,omitempty" tf:"regenerate_key_automatically,omitempty"`

	// +kubebuilder:validation:Optional
	RegenerationPeriod *string `json:"regenerationPeriod,omitempty" tf:"regeneration_period,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountID *string `json:"storageAccountId" tf:"storage_account_id,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountKey *string `json:"storageAccountKey" tf:"storage_account_key,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// KeyVaultManagedStorageAccountSpec defines the desired state of KeyVaultManagedStorageAccount
type KeyVaultManagedStorageAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyVaultManagedStorageAccountParameters `json:"forProvider"`
}

// KeyVaultManagedStorageAccountStatus defines the observed state of KeyVaultManagedStorageAccount.
type KeyVaultManagedStorageAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyVaultManagedStorageAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVaultManagedStorageAccount is the Schema for the KeyVaultManagedStorageAccounts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type KeyVaultManagedStorageAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyVaultManagedStorageAccountSpec   `json:"spec"`
	Status            KeyVaultManagedStorageAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVaultManagedStorageAccountList contains a list of KeyVaultManagedStorageAccounts
type KeyVaultManagedStorageAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyVaultManagedStorageAccount `json:"items"`
}

// Repository type metadata.
var (
	KeyVaultManagedStorageAccountKind             = "KeyVaultManagedStorageAccount"
	KeyVaultManagedStorageAccountGroupKind        = schema.GroupKind{Group: Group, Kind: KeyVaultManagedStorageAccountKind}.String()
	KeyVaultManagedStorageAccountKindAPIVersion   = KeyVaultManagedStorageAccountKind + "." + GroupVersion.String()
	KeyVaultManagedStorageAccountGroupVersionKind = GroupVersion.WithKind(KeyVaultManagedStorageAccountKind)
)

func init() {
	SchemeBuilder.Register(&KeyVaultManagedStorageAccount{}, &KeyVaultManagedStorageAccountList{})
}
