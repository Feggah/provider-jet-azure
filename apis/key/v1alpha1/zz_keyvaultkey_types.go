/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyVaultKeyObservation struct {
	E *string `json:"e,omitempty" tf:"e,omitempty"`

	N *string `json:"n,omitempty" tf:"n,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	VersionlessID *string `json:"versionlessId,omitempty" tf:"versionless_id,omitempty"`

	X *string `json:"x,omitempty" tf:"x,omitempty"`

	Y *string `json:"y,omitempty" tf:"y,omitempty"`
}

type KeyVaultKeyParameters struct {

	// +kubebuilder:validation:Optional
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// +kubebuilder:validation:Optional
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// +kubebuilder:validation:Required
	KeyOpts []*string `json:"keyOpts" tf:"key_opts,omitempty"`

	// +kubebuilder:validation:Optional
	KeySize *int64 `json:"keySize,omitempty" tf:"key_size,omitempty"`

	// +kubebuilder:validation:Required
	KeyType *string `json:"keyType" tf:"key_type,omitempty"`

	// +kubebuilder:validation:Required
	KeyVaultID *string `json:"keyVaultId" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NotBeforeDate *string `json:"notBeforeDate,omitempty" tf:"not_before_date,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// KeyVaultKeySpec defines the desired state of KeyVaultKey
type KeyVaultKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyVaultKeyParameters `json:"forProvider"`
}

// KeyVaultKeyStatus defines the observed state of KeyVaultKey.
type KeyVaultKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyVaultKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVaultKey is the Schema for the KeyVaultKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type KeyVaultKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyVaultKeySpec   `json:"spec"`
	Status            KeyVaultKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyVaultKeyList contains a list of KeyVaultKeys
type KeyVaultKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyVaultKey `json:"items"`
}

// Repository type metadata.
var (
	KeyVaultKeyKind             = "KeyVaultKey"
	KeyVaultKeyGroupKind        = schema.GroupKind{Group: Group, Kind: KeyVaultKeyKind}.String()
	KeyVaultKeyKindAPIVersion   = KeyVaultKeyKind + "." + GroupVersion.String()
	KeyVaultKeyGroupVersionKind = GroupVersion.WithKind(KeyVaultKeyKind)
)

func init() {
	SchemeBuilder.Register(&KeyVaultKey{}, &KeyVaultKeyList{})
}
