/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CognitiveAccountCustomerManagedKeyObservation struct {
}

type CognitiveAccountCustomerManagedKeyParameters struct {

	// +kubebuilder:validation:Required
	CognitiveAccountID *string `json:"cognitiveAccountId" tf:"cognitive_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	IdentityClientID *string `json:"identityClientId,omitempty" tf:"identity_client_id,omitempty"`

	// +kubebuilder:validation:Required
	KeyVaultKeyID *string `json:"keyVaultKeyId" tf:"key_vault_key_id,omitempty"`
}

// CognitiveAccountCustomerManagedKeySpec defines the desired state of CognitiveAccountCustomerManagedKey
type CognitiveAccountCustomerManagedKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CognitiveAccountCustomerManagedKeyParameters `json:"forProvider"`
}

// CognitiveAccountCustomerManagedKeyStatus defines the observed state of CognitiveAccountCustomerManagedKey.
type CognitiveAccountCustomerManagedKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CognitiveAccountCustomerManagedKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CognitiveAccountCustomerManagedKey is the Schema for the CognitiveAccountCustomerManagedKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CognitiveAccountCustomerManagedKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CognitiveAccountCustomerManagedKeySpec   `json:"spec"`
	Status            CognitiveAccountCustomerManagedKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CognitiveAccountCustomerManagedKeyList contains a list of CognitiveAccountCustomerManagedKeys
type CognitiveAccountCustomerManagedKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CognitiveAccountCustomerManagedKey `json:"items"`
}

// Repository type metadata.
var (
	CognitiveAccountCustomerManagedKeyKind             = "CognitiveAccountCustomerManagedKey"
	CognitiveAccountCustomerManagedKeyGroupKind        = schema.GroupKind{Group: Group, Kind: CognitiveAccountCustomerManagedKeyKind}.String()
	CognitiveAccountCustomerManagedKeyKindAPIVersion   = CognitiveAccountCustomerManagedKeyKind + "." + GroupVersion.String()
	CognitiveAccountCustomerManagedKeyGroupVersionKind = GroupVersion.WithKind(CognitiveAccountCustomerManagedKeyKind)
)

func init() {
	SchemeBuilder.Register(&CognitiveAccountCustomerManagedKey{}, &CognitiveAccountCustomerManagedKeyList{})
}
