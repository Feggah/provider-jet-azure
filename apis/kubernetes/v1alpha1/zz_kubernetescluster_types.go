/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AciConnectorLinuxObservation struct {
}

type AciConnectorLinuxParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	SubnetName *string `json:"subnetName,omitempty" tf:"subnet_name"`
}

type AddonProfileObservation struct {
}

type AddonProfileParameters struct {
	AciConnectorLinux []AciConnectorLinuxParameters `json:"aciConnectorLinux,omitempty" tf:"aci_connector_linux"`

	AzurePolicy []AzurePolicyParameters `json:"azurePolicy,omitempty" tf:"azure_policy"`

	HttpApplicationRouting []HttpApplicationRoutingParameters `json:"httpApplicationRouting,omitempty" tf:"http_application_routing"`

	IngressApplicationGateway []IngressApplicationGatewayParameters `json:"ingressApplicationGateway,omitempty" tf:"ingress_application_gateway"`

	KubeDashboard []KubeDashboardParameters `json:"kubeDashboard,omitempty" tf:"kube_dashboard"`

	OmsAgent []OmsAgentParameters `json:"omsAgent,omitempty" tf:"oms_agent"`
}

type AllowedObservation struct {
}

type AllowedParameters struct {
	Day string `json:"day" tf:"day"`

	Hours []int64 `json:"hours" tf:"hours"`
}

type AutoScalerProfileObservation struct {
}

type AutoScalerProfileParameters struct {
	BalanceSimilarNodeGroups *bool `json:"balanceSimilarNodeGroups,omitempty" tf:"balance_similar_node_groups"`

	EmptyBulkDeleteMax *string `json:"emptyBulkDeleteMax,omitempty" tf:"empty_bulk_delete_max"`

	Expander *string `json:"expander,omitempty" tf:"expander"`

	MaxGracefulTerminationSec *string `json:"maxGracefulTerminationSec,omitempty" tf:"max_graceful_termination_sec"`

	MaxNodeProvisioningTime *string `json:"maxNodeProvisioningTime,omitempty" tf:"max_node_provisioning_time"`

	MaxUnreadyNodes *int64 `json:"maxUnreadyNodes,omitempty" tf:"max_unready_nodes"`

	MaxUnreadyPercentage *float64 `json:"maxUnreadyPercentage,omitempty" tf:"max_unready_percentage"`

	NewPodScaleUpDelay *string `json:"newPodScaleUpDelay,omitempty" tf:"new_pod_scale_up_delay"`

	ScaleDownDelayAfterAdd *string `json:"scaleDownDelayAfterAdd,omitempty" tf:"scale_down_delay_after_add"`

	ScaleDownDelayAfterDelete *string `json:"scaleDownDelayAfterDelete,omitempty" tf:"scale_down_delay_after_delete"`

	ScaleDownDelayAfterFailure *string `json:"scaleDownDelayAfterFailure,omitempty" tf:"scale_down_delay_after_failure"`

	ScaleDownUnneeded *string `json:"scaleDownUnneeded,omitempty" tf:"scale_down_unneeded"`

	ScaleDownUnready *string `json:"scaleDownUnready,omitempty" tf:"scale_down_unready"`

	ScaleDownUtilizationThreshold *string `json:"scaleDownUtilizationThreshold,omitempty" tf:"scale_down_utilization_threshold"`

	ScanInterval *string `json:"scanInterval,omitempty" tf:"scan_interval"`

	SkipNodesWithLocalStorage *bool `json:"skipNodesWithLocalStorage,omitempty" tf:"skip_nodes_with_local_storage"`

	SkipNodesWithSystemPods *bool `json:"skipNodesWithSystemPods,omitempty" tf:"skip_nodes_with_system_pods"`
}

type AzureActiveDirectoryObservation struct {
}

type AzureActiveDirectoryParameters struct {
	AdminGroupObjectIds []string `json:"adminGroupObjectIds,omitempty" tf:"admin_group_object_ids"`

	AzureRbacEnabled *bool `json:"azureRbacEnabled,omitempty" tf:"azure_rbac_enabled"`

	ClientAppId *string `json:"clientAppId,omitempty" tf:"client_app_id"`

	Managed *bool `json:"managed,omitempty" tf:"managed"`

	ServerAppId *string `json:"serverAppId,omitempty" tf:"server_app_id"`

	ServerAppSecret *string `json:"serverAppSecret,omitempty" tf:"server_app_secret"`

	TenantId *string `json:"tenantId,omitempty" tf:"tenant_id"`
}

type AzurePolicyObservation struct {
}

type AzurePolicyParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`
}

type DefaultNodePoolObservation struct {
}

type DefaultNodePoolParameters struct {
	AvailabilityZones []string `json:"availabilityZones,omitempty" tf:"availability_zones"`

	EnableAutoScaling *bool `json:"enableAutoScaling,omitempty" tf:"enable_auto_scaling"`

	EnableHostEncryption *bool `json:"enableHostEncryption,omitempty" tf:"enable_host_encryption"`

	EnableNodePublicIp *bool `json:"enableNodePublicIp,omitempty" tf:"enable_node_public_ip"`

	FipsEnabled *bool `json:"fipsEnabled,omitempty" tf:"fips_enabled"`

	KubeletConfig []KubeletConfigParameters `json:"kubeletConfig,omitempty" tf:"kubelet_config"`

	KubeletDiskType *string `json:"kubeletDiskType,omitempty" tf:"kubelet_disk_type"`

	LinuxOsConfig []LinuxOsConfigParameters `json:"linuxOsConfig,omitempty" tf:"linux_os_config"`

	MaxCount *int64 `json:"maxCount,omitempty" tf:"max_count"`

	MaxPods *int64 `json:"maxPods,omitempty" tf:"max_pods"`

	MinCount *int64 `json:"minCount,omitempty" tf:"min_count"`

	Name string `json:"name" tf:"name"`

	NodeCount *int64 `json:"nodeCount,omitempty" tf:"node_count"`

	NodeLabels map[string]string `json:"nodeLabels,omitempty" tf:"node_labels"`

	NodePublicIpPrefixId *string `json:"nodePublicIpPrefixId,omitempty" tf:"node_public_ip_prefix_id"`

	NodeTaints []string `json:"nodeTaints,omitempty" tf:"node_taints"`

	OnlyCriticalAddonsEnabled *bool `json:"onlyCriticalAddonsEnabled,omitempty" tf:"only_critical_addons_enabled"`

	OrchestratorVersion *string `json:"orchestratorVersion,omitempty" tf:"orchestrator_version"`

	OsDiskSizeGb *int64 `json:"osDiskSizeGb,omitempty" tf:"os_disk_size_gb"`

	OsDiskType *string `json:"osDiskType,omitempty" tf:"os_disk_type"`

	PodSubnetId *string `json:"podSubnetId,omitempty" tf:"pod_subnet_id"`

	ProximityPlacementGroupId *string `json:"proximityPlacementGroupId,omitempty" tf:"proximity_placement_group_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	Type *string `json:"type,omitempty" tf:"type"`

	UltraSsdEnabled *bool `json:"ultraSsdEnabled,omitempty" tf:"ultra_ssd_enabled"`

	UpgradeSettings []UpgradeSettingsParameters `json:"upgradeSettings,omitempty" tf:"upgrade_settings"`

	VmSize string `json:"vmSize" tf:"vm_size"`

	VnetSubnetId *string `json:"vnetSubnetId,omitempty" tf:"vnet_subnet_id"`
}

type HttpApplicationRoutingObservation struct {
	HttpApplicationRoutingZoneName string `json:"httpApplicationRoutingZoneName" tf:"http_application_routing_zone_name"`
}

type HttpApplicationRoutingParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`
}

type IdentityObservation struct {
	PrincipalId string `json:"principalId" tf:"principal_id"`

	TenantId string `json:"tenantId" tf:"tenant_id"`
}

type IdentityParameters struct {
	Type string `json:"type" tf:"type"`

	UserAssignedIdentityId *string `json:"userAssignedIdentityId,omitempty" tf:"user_assigned_identity_id"`
}

type IngressApplicationGatewayIdentityObservation struct {
	ClientId string `json:"clientId" tf:"client_id"`

	ObjectId string `json:"objectId" tf:"object_id"`

	UserAssignedIdentityId string `json:"userAssignedIdentityId" tf:"user_assigned_identity_id"`
}

type IngressApplicationGatewayIdentityParameters struct {
}

type IngressApplicationGatewayObservation struct {
	EffectiveGatewayId string `json:"effectiveGatewayId" tf:"effective_gateway_id"`

	IngressApplicationGatewayIdentity []IngressApplicationGatewayIdentityObservation `json:"ingressApplicationGatewayIdentity" tf:"ingress_application_gateway_identity"`
}

type IngressApplicationGatewayParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	GatewayId *string `json:"gatewayId,omitempty" tf:"gateway_id"`

	GatewayName *string `json:"gatewayName,omitempty" tf:"gateway_name"`

	SubnetCidr *string `json:"subnetCidr,omitempty" tf:"subnet_cidr"`

	SubnetId *string `json:"subnetId,omitempty" tf:"subnet_id"`
}

type KubeAdminConfigObservation struct {
	ClientCertificate string `json:"clientCertificate" tf:"client_certificate"`

	ClientKey string `json:"clientKey" tf:"client_key"`

	ClusterCaCertificate string `json:"clusterCaCertificate" tf:"cluster_ca_certificate"`

	Host string `json:"host" tf:"host"`

	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type KubeAdminConfigParameters struct {
}

type KubeConfigObservation struct {
	ClientCertificate string `json:"clientCertificate" tf:"client_certificate"`

	ClientKey string `json:"clientKey" tf:"client_key"`

	ClusterCaCertificate string `json:"clusterCaCertificate" tf:"cluster_ca_certificate"`

	Host string `json:"host" tf:"host"`

	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type KubeConfigParameters struct {
}

type KubeDashboardObservation struct {
}

type KubeDashboardParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`
}

type KubeletConfigObservation struct {
}

type KubeletConfigParameters struct {
	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls,omitempty" tf:"allowed_unsafe_sysctls"`

	ContainerLogMaxLine *int64 `json:"containerLogMaxLine,omitempty" tf:"container_log_max_line"`

	ContainerLogMaxSizeMb *int64 `json:"containerLogMaxSizeMb,omitempty" tf:"container_log_max_size_mb"`

	CpuCfsQuotaEnabled *bool `json:"cpuCfsQuotaEnabled,omitempty" tf:"cpu_cfs_quota_enabled"`

	CpuCfsQuotaPeriod *string `json:"cpuCfsQuotaPeriod,omitempty" tf:"cpu_cfs_quota_period"`

	CpuManagerPolicy *string `json:"cpuManagerPolicy,omitempty" tf:"cpu_manager_policy"`

	ImageGcHighThreshold *int64 `json:"imageGcHighThreshold,omitempty" tf:"image_gc_high_threshold"`

	ImageGcLowThreshold *int64 `json:"imageGcLowThreshold,omitempty" tf:"image_gc_low_threshold"`

	PodMaxPid *int64 `json:"podMaxPid,omitempty" tf:"pod_max_pid"`

	TopologyManagerPolicy *string `json:"topologyManagerPolicy,omitempty" tf:"topology_manager_policy"`
}

type KubeletIdentityObservation struct {
}

type KubeletIdentityParameters struct {
	ClientId *string `json:"clientId,omitempty" tf:"client_id"`

	ObjectId *string `json:"objectId,omitempty" tf:"object_id"`

	UserAssignedIdentityId *string `json:"userAssignedIdentityId,omitempty" tf:"user_assigned_identity_id"`
}

type KubernetesClusterObservation struct {
	Fqdn string `json:"fqdn" tf:"fqdn"`

	KubeAdminConfig []KubeAdminConfigObservation `json:"kubeAdminConfig" tf:"kube_admin_config"`

	KubeAdminConfigRaw string `json:"kubeAdminConfigRaw" tf:"kube_admin_config_raw"`

	KubeConfig []KubeConfigObservation `json:"kubeConfig" tf:"kube_config"`

	KubeConfigRaw string `json:"kubeConfigRaw" tf:"kube_config_raw"`

	PrivateFqdn string `json:"privateFqdn" tf:"private_fqdn"`
}

type KubernetesClusterParameters struct {
	AddonProfile []AddonProfileParameters `json:"addonProfile,omitempty" tf:"addon_profile"`

	ApiServerAuthorizedIpRanges []string `json:"apiServerAuthorizedIpRanges,omitempty" tf:"api_server_authorized_ip_ranges"`

	AutoScalerProfile []AutoScalerProfileParameters `json:"autoScalerProfile,omitempty" tf:"auto_scaler_profile"`

	AutomaticChannelUpgrade *string `json:"automaticChannelUpgrade,omitempty" tf:"automatic_channel_upgrade"`

	DefaultNodePool []DefaultNodePoolParameters `json:"defaultNodePool" tf:"default_node_pool"`

	DiskEncryptionSetId *string `json:"diskEncryptionSetId,omitempty" tf:"disk_encryption_set_id"`

	DnsPrefix *string `json:"dnsPrefix,omitempty" tf:"dns_prefix"`

	DnsPrefixPrivateCluster *string `json:"dnsPrefixPrivateCluster,omitempty" tf:"dns_prefix_private_cluster"`

	EnablePodSecurityPolicy *bool `json:"enablePodSecurityPolicy,omitempty" tf:"enable_pod_security_policy"`

	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity"`

	KubeletIdentity []KubeletIdentityParameters `json:"kubeletIdentity,omitempty" tf:"kubelet_identity"`

	KubernetesVersion *string `json:"kubernetesVersion,omitempty" tf:"kubernetes_version"`

	LinuxProfile []LinuxProfileParameters `json:"linuxProfile,omitempty" tf:"linux_profile"`

	LocalAccountDisabled *bool `json:"localAccountDisabled,omitempty" tf:"local_account_disabled"`

	Location string `json:"location" tf:"location"`

	MaintenanceWindow []MaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window"`

	Name string `json:"name" tf:"name"`

	NetworkProfile []NetworkProfileParameters `json:"networkProfile,omitempty" tf:"network_profile"`

	NodeResourceGroup *string `json:"nodeResourceGroup,omitempty" tf:"node_resource_group"`

	PrivateClusterEnabled *bool `json:"privateClusterEnabled,omitempty" tf:"private_cluster_enabled"`

	PrivateClusterPublicFqdnEnabled *bool `json:"privateClusterPublicFqdnEnabled,omitempty" tf:"private_cluster_public_fqdn_enabled"`

	PrivateDnsZoneId *string `json:"privateDnsZoneId,omitempty" tf:"private_dns_zone_id"`

	PrivateLinkEnabled *bool `json:"privateLinkEnabled,omitempty" tf:"private_link_enabled"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	RoleBasedAccessControl []RoleBasedAccessControlParameters `json:"roleBasedAccessControl,omitempty" tf:"role_based_access_control"`

	ServicePrincipal []ServicePrincipalParameters `json:"servicePrincipal,omitempty" tf:"service_principal"`

	SkuTier *string `json:"skuTier,omitempty" tf:"sku_tier"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	WindowsProfile []WindowsProfileParameters `json:"windowsProfile,omitempty" tf:"windows_profile"`
}

type LinuxOsConfigObservation struct {
}

type LinuxOsConfigParameters struct {
	SwapFileSizeMb *int64 `json:"swapFileSizeMb,omitempty" tf:"swap_file_size_mb"`

	SysctlConfig []SysctlConfigParameters `json:"sysctlConfig,omitempty" tf:"sysctl_config"`

	TransparentHugePageDefrag *string `json:"transparentHugePageDefrag,omitempty" tf:"transparent_huge_page_defrag"`

	TransparentHugePageEnabled *string `json:"transparentHugePageEnabled,omitempty" tf:"transparent_huge_page_enabled"`
}

type LinuxProfileObservation struct {
}

type LinuxProfileParameters struct {
	AdminUsername string `json:"adminUsername" tf:"admin_username"`

	SshKey []SshKeyParameters `json:"sshKey" tf:"ssh_key"`
}

type LoadBalancerProfileObservation struct {
	EffectiveOutboundIps []string `json:"effectiveOutboundIps" tf:"effective_outbound_ips"`
}

type LoadBalancerProfileParameters struct {
	IdleTimeoutInMinutes *int64 `json:"idleTimeoutInMinutes,omitempty" tf:"idle_timeout_in_minutes"`

	ManagedOutboundIpCount *int64 `json:"managedOutboundIpCount,omitempty" tf:"managed_outbound_ip_count"`

	OutboundIpAddressIds []string `json:"outboundIpAddressIds,omitempty" tf:"outbound_ip_address_ids"`

	OutboundIpPrefixIds []string `json:"outboundIpPrefixIds,omitempty" tf:"outbound_ip_prefix_ids"`

	OutboundPortsAllocated *int64 `json:"outboundPortsAllocated,omitempty" tf:"outbound_ports_allocated"`
}

type MaintenanceWindowObservation struct {
}

type MaintenanceWindowParameters struct {
	Allowed []AllowedParameters `json:"allowed,omitempty" tf:"allowed"`

	NotAllowed []NotAllowedParameters `json:"notAllowed,omitempty" tf:"not_allowed"`
}

type NetworkProfileObservation struct {
}

type NetworkProfileParameters struct {
	DnsServiceIp *string `json:"dnsServiceIp,omitempty" tf:"dns_service_ip"`

	DockerBridgeCidr *string `json:"dockerBridgeCidr,omitempty" tf:"docker_bridge_cidr"`

	LoadBalancerProfile []LoadBalancerProfileParameters `json:"loadBalancerProfile,omitempty" tf:"load_balancer_profile"`

	LoadBalancerSku *string `json:"loadBalancerSku,omitempty" tf:"load_balancer_sku"`

	NetworkMode *string `json:"networkMode,omitempty" tf:"network_mode"`

	NetworkPlugin string `json:"networkPlugin" tf:"network_plugin"`

	NetworkPolicy *string `json:"networkPolicy,omitempty" tf:"network_policy"`

	OutboundType *string `json:"outboundType,omitempty" tf:"outbound_type"`

	PodCidr *string `json:"podCidr,omitempty" tf:"pod_cidr"`

	ServiceCidr *string `json:"serviceCidr,omitempty" tf:"service_cidr"`
}

type NotAllowedObservation struct {
}

type NotAllowedParameters struct {
	End string `json:"end" tf:"end"`

	Start string `json:"start" tf:"start"`
}

type OmsAgentIdentityObservation struct {
	ClientId string `json:"clientId" tf:"client_id"`

	ObjectId string `json:"objectId" tf:"object_id"`

	UserAssignedIdentityId string `json:"userAssignedIdentityId" tf:"user_assigned_identity_id"`
}

type OmsAgentIdentityParameters struct {
}

type OmsAgentObservation struct {
	OmsAgentIdentity []OmsAgentIdentityObservation `json:"omsAgentIdentity" tf:"oms_agent_identity"`
}

type OmsAgentParameters struct {
	Enabled bool `json:"enabled" tf:"enabled"`

	LogAnalyticsWorkspaceId *string `json:"logAnalyticsWorkspaceId,omitempty" tf:"log_analytics_workspace_id"`
}

type RoleBasedAccessControlObservation struct {
}

type RoleBasedAccessControlParameters struct {
	AzureActiveDirectory []AzureActiveDirectoryParameters `json:"azureActiveDirectory,omitempty" tf:"azure_active_directory"`

	Enabled bool `json:"enabled" tf:"enabled"`
}

type ServicePrincipalObservation struct {
}

type ServicePrincipalParameters struct {
	ClientId string `json:"clientId" tf:"client_id"`

	ClientSecret string `json:"clientSecret" tf:"client_secret"`
}

type SshKeyObservation struct {
}

type SshKeyParameters struct {
	KeyData string `json:"keyData" tf:"key_data"`
}

type SysctlConfigObservation struct {
}

type SysctlConfigParameters struct {
	FsAioMaxNr *int64 `json:"fsAioMaxNr,omitempty" tf:"fs_aio_max_nr"`

	FsFileMax *int64 `json:"fsFileMax,omitempty" tf:"fs_file_max"`

	FsInotifyMaxUserWatches *int64 `json:"fsInotifyMaxUserWatches,omitempty" tf:"fs_inotify_max_user_watches"`

	FsNrOpen *int64 `json:"fsNrOpen,omitempty" tf:"fs_nr_open"`

	KernelThreadsMax *int64 `json:"kernelThreadsMax,omitempty" tf:"kernel_threads_max"`

	NetCoreNetdevMaxBacklog *int64 `json:"netCoreNetdevMaxBacklog,omitempty" tf:"net_core_netdev_max_backlog"`

	NetCoreOptmemMax *int64 `json:"netCoreOptmemMax,omitempty" tf:"net_core_optmem_max"`

	NetCoreRmemDefault *int64 `json:"netCoreRmemDefault,omitempty" tf:"net_core_rmem_default"`

	NetCoreRmemMax *int64 `json:"netCoreRmemMax,omitempty" tf:"net_core_rmem_max"`

	NetCoreSomaxconn *int64 `json:"netCoreSomaxconn,omitempty" tf:"net_core_somaxconn"`

	NetCoreWmemDefault *int64 `json:"netCoreWmemDefault,omitempty" tf:"net_core_wmem_default"`

	NetCoreWmemMax *int64 `json:"netCoreWmemMax,omitempty" tf:"net_core_wmem_max"`

	NetIpv4IpLocalPortRangeMax *int64 `json:"netIpv4IpLocalPortRangeMax,omitempty" tf:"net_ipv4_ip_local_port_range_max"`

	NetIpv4IpLocalPortRangeMin *int64 `json:"netIpv4IpLocalPortRangeMin,omitempty" tf:"net_ipv4_ip_local_port_range_min"`

	NetIpv4NeighDefaultGcThresh1 *int64 `json:"netIpv4NeighDefaultGcThresh1,omitempty" tf:"net_ipv4_neigh_default_gc_thresh1"`

	NetIpv4NeighDefaultGcThresh2 *int64 `json:"netIpv4NeighDefaultGcThresh2,omitempty" tf:"net_ipv4_neigh_default_gc_thresh2"`

	NetIpv4NeighDefaultGcThresh3 *int64 `json:"netIpv4NeighDefaultGcThresh3,omitempty" tf:"net_ipv4_neigh_default_gc_thresh3"`

	NetIpv4TcpFinTimeout *int64 `json:"netIpv4TcpFinTimeout,omitempty" tf:"net_ipv4_tcp_fin_timeout"`

	NetIpv4TcpKeepaliveIntvl *int64 `json:"netIpv4TcpKeepaliveIntvl,omitempty" tf:"net_ipv4_tcp_keepalive_intvl"`

	NetIpv4TcpKeepaliveProbes *int64 `json:"netIpv4TcpKeepaliveProbes,omitempty" tf:"net_ipv4_tcp_keepalive_probes"`

	NetIpv4TcpKeepaliveTime *int64 `json:"netIpv4TcpKeepaliveTime,omitempty" tf:"net_ipv4_tcp_keepalive_time"`

	NetIpv4TcpMaxSynBacklog *int64 `json:"netIpv4TcpMaxSynBacklog,omitempty" tf:"net_ipv4_tcp_max_syn_backlog"`

	NetIpv4TcpMaxTwBuckets *int64 `json:"netIpv4TcpMaxTwBuckets,omitempty" tf:"net_ipv4_tcp_max_tw_buckets"`

	NetIpv4TcpTwReuse *bool `json:"netIpv4TcpTwReuse,omitempty" tf:"net_ipv4_tcp_tw_reuse"`

	NetNetfilterNfConntrackBuckets *int64 `json:"netNetfilterNfConntrackBuckets,omitempty" tf:"net_netfilter_nf_conntrack_buckets"`

	NetNetfilterNfConntrackMax *int64 `json:"netNetfilterNfConntrackMax,omitempty" tf:"net_netfilter_nf_conntrack_max"`

	VmMaxMapCount *int64 `json:"vmMaxMapCount,omitempty" tf:"vm_max_map_count"`

	VmSwappiness *int64 `json:"vmSwappiness,omitempty" tf:"vm_swappiness"`

	VmVfsCachePressure *int64 `json:"vmVfsCachePressure,omitempty" tf:"vm_vfs_cache_pressure"`
}

type UpgradeSettingsObservation struct {
}

type UpgradeSettingsParameters struct {
	MaxSurge string `json:"maxSurge" tf:"max_surge"`
}

type WindowsProfileObservation struct {
}

type WindowsProfileParameters struct {
	AdminPassword *string `json:"adminPassword,omitempty" tf:"admin_password"`

	AdminUsername string `json:"adminUsername" tf:"admin_username"`

	License *string `json:"license,omitempty" tf:"license"`
}

// KubernetesClusterSpec defines the desired state of KubernetesCluster
type KubernetesClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KubernetesClusterParameters `json:"forProvider"`
}

// KubernetesClusterStatus defines the observed state of KubernetesCluster.
type KubernetesClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KubernetesClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesCluster is the Schema for the KubernetesClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type KubernetesCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KubernetesClusterSpec   `json:"spec"`
	Status            KubernetesClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesClusterList contains a list of KubernetesClusters
type KubernetesClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KubernetesCluster `json:"items"`
}

// Repository type metadata.
var (
	KubernetesClusterKind             = "KubernetesCluster"
	KubernetesClusterGroupKind        = schema.GroupKind{Group: Group, Kind: KubernetesClusterKind}.String()
	KubernetesClusterKindAPIVersion   = KubernetesClusterKind + "." + GroupVersion.String()
	KubernetesClusterGroupVersionKind = GroupVersion.WithKind(KubernetesClusterKind)
)

func init() {
	SchemeBuilder.Register(&KubernetesCluster{}, &KubernetesClusterList{})
}
