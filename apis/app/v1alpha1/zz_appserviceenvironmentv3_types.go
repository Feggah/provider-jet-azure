/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AppServiceEnvironmentV3ClusterSettingObservation struct {
}

type AppServiceEnvironmentV3ClusterSettingParameters struct {
	Name string `json:"name" tf:"name"`

	Value string `json:"value" tf:"value"`
}

type AppServiceEnvironmentV3Observation struct {
	DnsSuffix string `json:"dnsSuffix" tf:"dns_suffix"`

	ExternalInboundIpAddresses []string `json:"externalInboundIpAddresses" tf:"external_inbound_ip_addresses"`

	InboundNetworkDependencies []InboundNetworkDependenciesObservation `json:"inboundNetworkDependencies" tf:"inbound_network_dependencies"`

	InternalInboundIpAddresses []string `json:"internalInboundIpAddresses" tf:"internal_inbound_ip_addresses"`

	IpSslAddressCount int64 `json:"ipSslAddressCount" tf:"ip_ssl_address_count"`

	LinuxOutboundIpAddresses []string `json:"linuxOutboundIpAddresses" tf:"linux_outbound_ip_addresses"`

	Location string `json:"location" tf:"location"`

	PricingTier string `json:"pricingTier" tf:"pricing_tier"`

	WindowsOutboundIpAddresses []string `json:"windowsOutboundIpAddresses" tf:"windows_outbound_ip_addresses"`
}

type AppServiceEnvironmentV3Parameters struct {
	AllowNewPrivateEndpointConnections *bool `json:"allowNewPrivateEndpointConnections,omitempty" tf:"allow_new_private_endpoint_connections"`

	ClusterSetting []AppServiceEnvironmentV3ClusterSettingParameters `json:"clusterSetting,omitempty" tf:"cluster_setting"`

	DedicatedHostCount *int64 `json:"dedicatedHostCount,omitempty" tf:"dedicated_host_count"`

	InternalLoadBalancingMode *string `json:"internalLoadBalancingMode,omitempty" tf:"internal_load_balancing_mode"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SubnetId string `json:"subnetId" tf:"subnet_id"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant"`
}

type InboundNetworkDependenciesObservation struct {
	Description string `json:"description" tf:"description"`

	IpAddresses []string `json:"ipAddresses" tf:"ip_addresses"`

	Ports []string `json:"ports" tf:"ports"`
}

type InboundNetworkDependenciesParameters struct {
}

// AppServiceEnvironmentV3Spec defines the desired state of AppServiceEnvironmentV3
type AppServiceEnvironmentV3Spec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppServiceEnvironmentV3Parameters `json:"forProvider"`
}

// AppServiceEnvironmentV3Status defines the observed state of AppServiceEnvironmentV3.
type AppServiceEnvironmentV3Status struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppServiceEnvironmentV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceEnvironmentV3 is the Schema for the AppServiceEnvironmentV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AppServiceEnvironmentV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppServiceEnvironmentV3Spec   `json:"spec"`
	Status            AppServiceEnvironmentV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceEnvironmentV3List contains a list of AppServiceEnvironmentV3s
type AppServiceEnvironmentV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppServiceEnvironmentV3 `json:"items"`
}

// Repository type metadata.
var (
	AppServiceEnvironmentV3Kind             = "AppServiceEnvironmentV3"
	AppServiceEnvironmentV3GroupKind        = schema.GroupKind{Group: Group, Kind: AppServiceEnvironmentV3Kind}.String()
	AppServiceEnvironmentV3KindAPIVersion   = AppServiceEnvironmentV3Kind + "." + GroupVersion.String()
	AppServiceEnvironmentV3GroupVersionKind = GroupVersion.WithKind(AppServiceEnvironmentV3Kind)
)

func init() {
	SchemeBuilder.Register(&AppServiceEnvironmentV3{}, &AppServiceEnvironmentV3List{})
}
