/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ActiveDirectoryObservation struct {
}

type ActiveDirectoryParameters struct {
	AllowedAudiences []string `json:"allowedAudiences,omitempty" tf:"allowed_audiences"`

	ClientId string `json:"clientId" tf:"client_id"`

	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret"`
}

type AppServiceIdentityObservation struct {
	PrincipalId string `json:"principalId" tf:"principal_id"`

	TenantId string `json:"tenantId" tf:"tenant_id"`
}

type AppServiceIdentityParameters struct {
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	Type string `json:"type" tf:"type"`
}

type AppServiceObservation struct {
	CustomDomainVerificationId string `json:"customDomainVerificationId" tf:"custom_domain_verification_id"`

	DefaultSiteHostname string `json:"defaultSiteHostname" tf:"default_site_hostname"`

	OutboundIpAddressList []string `json:"outboundIpAddressList" tf:"outbound_ip_address_list"`

	OutboundIpAddresses string `json:"outboundIpAddresses" tf:"outbound_ip_addresses"`

	PossibleOutboundIpAddressList []string `json:"possibleOutboundIpAddressList" tf:"possible_outbound_ip_address_list"`

	PossibleOutboundIpAddresses string `json:"possibleOutboundIpAddresses" tf:"possible_outbound_ip_addresses"`

	SiteCredential []SiteCredentialObservation `json:"siteCredential" tf:"site_credential"`
}

type AppServiceParameters struct {
	AppServicePlanId string `json:"appServicePlanId" tf:"app_service_plan_id"`

	AppSettings map[string]string `json:"appSettings,omitempty" tf:"app_settings"`

	AuthSettings []AuthSettingsParameters `json:"authSettings,omitempty" tf:"auth_settings"`

	Backup []BackupParameters `json:"backup,omitempty" tf:"backup"`

	ClientAffinityEnabled *bool `json:"clientAffinityEnabled,omitempty" tf:"client_affinity_enabled"`

	ClientCertEnabled *bool `json:"clientCertEnabled,omitempty" tf:"client_cert_enabled"`

	ConnectionString []ConnectionStringParameters `json:"connectionString,omitempty" tf:"connection_string"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	HttpsOnly *bool `json:"httpsOnly,omitempty" tf:"https_only"`

	Identity []AppServiceIdentityParameters `json:"identity,omitempty" tf:"identity"`

	Location string `json:"location" tf:"location"`

	Logs []LogsParameters `json:"logs,omitempty" tf:"logs"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SiteConfig []SiteConfigParameters `json:"siteConfig,omitempty" tf:"site_config"`

	SourceControl []SourceControlParameters `json:"sourceControl,omitempty" tf:"source_control"`

	StorageAccount []StorageAccountParameters `json:"storageAccount,omitempty" tf:"storage_account"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type ApplicationLogsObservation struct {
}

type ApplicationLogsParameters struct {
	AzureBlobStorage []AzureBlobStorageParameters `json:"azureBlobStorage,omitempty" tf:"azure_blob_storage"`

	FileSystemLevel *string `json:"fileSystemLevel,omitempty" tf:"file_system_level"`
}

type AuthSettingsObservation struct {
}

type AuthSettingsParameters struct {
	ActiveDirectory []ActiveDirectoryParameters `json:"activeDirectory,omitempty" tf:"active_directory"`

	AdditionalLoginParams map[string]string `json:"additionalLoginParams,omitempty" tf:"additional_login_params"`

	AllowedExternalRedirectUrls []string `json:"allowedExternalRedirectUrls,omitempty" tf:"allowed_external_redirect_urls"`

	DefaultProvider *string `json:"defaultProvider,omitempty" tf:"default_provider"`

	Enabled bool `json:"enabled" tf:"enabled"`

	Facebook []FacebookParameters `json:"facebook,omitempty" tf:"facebook"`

	Google []GoogleParameters `json:"google,omitempty" tf:"google"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer"`

	Microsoft []MicrosoftParameters `json:"microsoft,omitempty" tf:"microsoft"`

	RuntimeVersion *string `json:"runtimeVersion,omitempty" tf:"runtime_version"`

	TokenRefreshExtensionHours *float64 `json:"tokenRefreshExtensionHours,omitempty" tf:"token_refresh_extension_hours"`

	TokenStoreEnabled *bool `json:"tokenStoreEnabled,omitempty" tf:"token_store_enabled"`

	Twitter []TwitterParameters `json:"twitter,omitempty" tf:"twitter"`

	UnauthenticatedClientAction *string `json:"unauthenticatedClientAction,omitempty" tf:"unauthenticated_client_action"`
}

type AzureBlobStorageObservation struct {
}

type AzureBlobStorageParameters struct {
	Level string `json:"level" tf:"level"`

	RetentionInDays int64 `json:"retentionInDays" tf:"retention_in_days"`

	SasUrl string `json:"sasUrl" tf:"sas_url"`
}

type BackupObservation struct {
}

type BackupParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	Name string `json:"name" tf:"name"`

	Schedule []ScheduleParameters `json:"schedule" tf:"schedule"`

	StorageAccountUrl string `json:"storageAccountUrl" tf:"storage_account_url"`
}

type ConnectionStringObservation struct {
}

type ConnectionStringParameters struct {
	Name string `json:"name" tf:"name"`

	Type string `json:"type" tf:"type"`

	Value string `json:"value" tf:"value"`
}

type CorsObservation struct {
}

type CorsParameters struct {
	AllowedOrigins []string `json:"allowedOrigins" tf:"allowed_origins"`

	SupportCredentials *bool `json:"supportCredentials,omitempty" tf:"support_credentials"`
}

type FacebookObservation struct {
}

type FacebookParameters struct {
	AppId string `json:"appId" tf:"app_id"`

	AppSecret string `json:"appSecret" tf:"app_secret"`

	OauthScopes []string `json:"oauthScopes,omitempty" tf:"oauth_scopes"`
}

type FileSystemObservation struct {
}

type FileSystemParameters struct {
	RetentionInDays int64 `json:"retentionInDays" tf:"retention_in_days"`

	RetentionInMb int64 `json:"retentionInMb" tf:"retention_in_mb"`
}

type GoogleObservation struct {
}

type GoogleParameters struct {
	ClientId string `json:"clientId" tf:"client_id"`

	ClientSecret string `json:"clientSecret" tf:"client_secret"`

	OauthScopes []string `json:"oauthScopes,omitempty" tf:"oauth_scopes"`
}

type HeadersObservation struct {
}

type HeadersParameters struct {
	XAzureFdid []string `json:"xAzureFdid,omitempty" tf:"x_azure_fdid"`

	XFdHealthProbe []string `json:"xFdHealthProbe,omitempty" tf:"x_fd_health_probe"`

	XForwardedFor []string `json:"xForwardedFor,omitempty" tf:"x_forwarded_for"`

	XForwardedHost []string `json:"xForwardedHost,omitempty" tf:"x_forwarded_host"`
}

type HttpLogsAzureBlobStorageObservation struct {
}

type HttpLogsAzureBlobStorageParameters struct {
	RetentionInDays int64 `json:"retentionInDays" tf:"retention_in_days"`

	SasUrl string `json:"sasUrl" tf:"sas_url"`
}

type HttpLogsObservation struct {
}

type HttpLogsParameters struct {
	AzureBlobStorage []HttpLogsAzureBlobStorageParameters `json:"azureBlobStorage,omitempty" tf:"azure_blob_storage"`

	FileSystem []FileSystemParameters `json:"fileSystem,omitempty" tf:"file_system"`
}

type IpRestrictionObservation struct {
}

type IpRestrictionParameters struct {
	Action *string `json:"action,omitempty" tf:"action"`

	Headers []HeadersParameters `json:"headers,omitempty" tf:"headers"`

	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`

	Name *string `json:"name,omitempty" tf:"name"`

	Priority *int64 `json:"priority,omitempty" tf:"priority"`

	ServiceTag *string `json:"serviceTag,omitempty" tf:"service_tag"`

	VirtualNetworkSubnetId *string `json:"virtualNetworkSubnetId,omitempty" tf:"virtual_network_subnet_id"`
}

type LogsObservation struct {
}

type LogsParameters struct {
	ApplicationLogs []ApplicationLogsParameters `json:"applicationLogs,omitempty" tf:"application_logs"`

	DetailedErrorMessagesEnabled *bool `json:"detailedErrorMessagesEnabled,omitempty" tf:"detailed_error_messages_enabled"`

	FailedRequestTracingEnabled *bool `json:"failedRequestTracingEnabled,omitempty" tf:"failed_request_tracing_enabled"`

	HttpLogs []HttpLogsParameters `json:"httpLogs,omitempty" tf:"http_logs"`
}

type MicrosoftObservation struct {
}

type MicrosoftParameters struct {
	ClientId string `json:"clientId" tf:"client_id"`

	ClientSecret string `json:"clientSecret" tf:"client_secret"`

	OauthScopes []string `json:"oauthScopes,omitempty" tf:"oauth_scopes"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {
	FrequencyInterval int64 `json:"frequencyInterval" tf:"frequency_interval"`

	FrequencyUnit string `json:"frequencyUnit" tf:"frequency_unit"`

	KeepAtLeastOneBackup *bool `json:"keepAtLeastOneBackup,omitempty" tf:"keep_at_least_one_backup"`

	RetentionPeriodInDays *int64 `json:"retentionPeriodInDays,omitempty" tf:"retention_period_in_days"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time"`
}

type ScmIpRestrictionHeadersObservation struct {
}

type ScmIpRestrictionHeadersParameters struct {
	XAzureFdid []string `json:"xAzureFdid,omitempty" tf:"x_azure_fdid"`

	XFdHealthProbe []string `json:"xFdHealthProbe,omitempty" tf:"x_fd_health_probe"`

	XForwardedFor []string `json:"xForwardedFor,omitempty" tf:"x_forwarded_for"`

	XForwardedHost []string `json:"xForwardedHost,omitempty" tf:"x_forwarded_host"`
}

type ScmIpRestrictionObservation struct {
}

type ScmIpRestrictionParameters struct {
	Action *string `json:"action,omitempty" tf:"action"`

	Headers []ScmIpRestrictionHeadersParameters `json:"headers,omitempty" tf:"headers"`

	IpAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`

	Name *string `json:"name,omitempty" tf:"name"`

	Priority *int64 `json:"priority,omitempty" tf:"priority"`

	ServiceTag *string `json:"serviceTag,omitempty" tf:"service_tag"`

	VirtualNetworkSubnetId *string `json:"virtualNetworkSubnetId,omitempty" tf:"virtual_network_subnet_id"`
}

type SiteConfigObservation struct {
}

type SiteConfigParameters struct {
	AcrUseManagedIdentityCredentials *bool `json:"acrUseManagedIdentityCredentials,omitempty" tf:"acr_use_managed_identity_credentials"`

	AcrUserManagedIdentityClientId *string `json:"acrUserManagedIdentityClientId,omitempty" tf:"acr_user_managed_identity_client_id"`

	AlwaysOn *bool `json:"alwaysOn,omitempty" tf:"always_on"`

	AppCommandLine *string `json:"appCommandLine,omitempty" tf:"app_command_line"`

	AutoSwapSlotName *string `json:"autoSwapSlotName,omitempty" tf:"auto_swap_slot_name"`

	Cors []CorsParameters `json:"cors,omitempty" tf:"cors"`

	DefaultDocuments []string `json:"defaultDocuments,omitempty" tf:"default_documents"`

	DotnetFrameworkVersion *string `json:"dotnetFrameworkVersion,omitempty" tf:"dotnet_framework_version"`

	FtpsState *string `json:"ftpsState,omitempty" tf:"ftps_state"`

	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path"`

	Http2Enabled *bool `json:"http2Enabled,omitempty" tf:"http2_enabled"`

	IpRestriction []IpRestrictionParameters `json:"ipRestriction,omitempty" tf:"ip_restriction"`

	JavaContainer *string `json:"javaContainer,omitempty" tf:"java_container"`

	JavaContainerVersion *string `json:"javaContainerVersion,omitempty" tf:"java_container_version"`

	JavaVersion *string `json:"javaVersion,omitempty" tf:"java_version"`

	LinuxFxVersion *string `json:"linuxFxVersion,omitempty" tf:"linux_fx_version"`

	LocalMysqlEnabled *bool `json:"localMysqlEnabled,omitempty" tf:"local_mysql_enabled"`

	ManagedPipelineMode *string `json:"managedPipelineMode,omitempty" tf:"managed_pipeline_mode"`

	MinTlsVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version"`

	NumberOfWorkers *int64 `json:"numberOfWorkers,omitempty" tf:"number_of_workers"`

	PhpVersion *string `json:"phpVersion,omitempty" tf:"php_version"`

	PythonVersion *string `json:"pythonVersion,omitempty" tf:"python_version"`

	RemoteDebuggingEnabled *bool `json:"remoteDebuggingEnabled,omitempty" tf:"remote_debugging_enabled"`

	RemoteDebuggingVersion *string `json:"remoteDebuggingVersion,omitempty" tf:"remote_debugging_version"`

	ScmIpRestriction []ScmIpRestrictionParameters `json:"scmIpRestriction,omitempty" tf:"scm_ip_restriction"`

	ScmType *string `json:"scmType,omitempty" tf:"scm_type"`

	ScmUseMainIpRestriction *bool `json:"scmUseMainIpRestriction,omitempty" tf:"scm_use_main_ip_restriction"`

	Use32BitWorkerProcess *bool `json:"use32BitWorkerProcess,omitempty" tf:"use_32_bit_worker_process"`

	VnetRouteAllEnabled *bool `json:"vnetRouteAllEnabled,omitempty" tf:"vnet_route_all_enabled"`

	WebsocketsEnabled *bool `json:"websocketsEnabled,omitempty" tf:"websockets_enabled"`

	WindowsFxVersion *string `json:"windowsFxVersion,omitempty" tf:"windows_fx_version"`
}

type SiteCredentialObservation struct {
	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type SiteCredentialParameters struct {
}

type SourceControlObservation struct {
}

type SourceControlParameters struct {
	Branch *string `json:"branch,omitempty" tf:"branch"`

	ManualIntegration *bool `json:"manualIntegration,omitempty" tf:"manual_integration"`

	RepoUrl *string `json:"repoUrl,omitempty" tf:"repo_url"`

	RollbackEnabled *bool `json:"rollbackEnabled,omitempty" tf:"rollback_enabled"`

	UseMercurial *bool `json:"useMercurial,omitempty" tf:"use_mercurial"`
}

type StorageAccountObservation struct {
}

type StorageAccountParameters struct {
	AccessKey string `json:"accessKey" tf:"access_key"`

	AccountName string `json:"accountName" tf:"account_name"`

	MountPath *string `json:"mountPath,omitempty" tf:"mount_path"`

	Name string `json:"name" tf:"name"`

	ShareName string `json:"shareName" tf:"share_name"`

	Type string `json:"type" tf:"type"`
}

type TwitterObservation struct {
}

type TwitterParameters struct {
	ConsumerKey string `json:"consumerKey" tf:"consumer_key"`

	ConsumerSecret string `json:"consumerSecret" tf:"consumer_secret"`
}

// AppServiceSpec defines the desired state of AppService
type AppServiceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppServiceParameters `json:"forProvider"`
}

// AppServiceStatus defines the observed state of AppService.
type AppServiceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppService is the Schema for the AppServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AppService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppServiceSpec   `json:"spec"`
	Status            AppServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceList contains a list of AppServices
type AppServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppService `json:"items"`
}

// Repository type metadata.
var (
	AppServiceKind             = "AppService"
	AppServiceGroupKind        = schema.GroupKind{Group: Group, Kind: AppServiceKind}.String()
	AppServiceKindAPIVersion   = AppServiceKind + "." + GroupVersion.String()
	AppServiceGroupVersionKind = GroupVersion.WithKind(AppServiceKind)
)

func init() {
	SchemeBuilder.Register(&AppService{}, &AppServiceList{})
}
