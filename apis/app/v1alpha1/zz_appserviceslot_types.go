/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AppServiceSlotAuthSettingsObservation struct {
}

type AppServiceSlotAuthSettingsParameters struct {
	ActiveDirectory []AuthSettingsActiveDirectoryParameters `json:"activeDirectory,omitempty" tf:"active_directory"`

	AdditionalLoginParams map[string]string `json:"additionalLoginParams,omitempty" tf:"additional_login_params"`

	AllowedExternalRedirectUrls []string `json:"allowedExternalRedirectUrls,omitempty" tf:"allowed_external_redirect_urls"`

	DefaultProvider *string `json:"defaultProvider,omitempty" tf:"default_provider"`

	Enabled bool `json:"enabled" tf:"enabled"`

	Facebook []AuthSettingsFacebookParameters `json:"facebook,omitempty" tf:"facebook"`

	Google []AuthSettingsGoogleParameters `json:"google,omitempty" tf:"google"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer"`

	Microsoft []AuthSettingsMicrosoftParameters `json:"microsoft,omitempty" tf:"microsoft"`

	RuntimeVersion *string `json:"runtimeVersion,omitempty" tf:"runtime_version"`

	TokenRefreshExtensionHours *float64 `json:"tokenRefreshExtensionHours,omitempty" tf:"token_refresh_extension_hours"`

	TokenStoreEnabled *bool `json:"tokenStoreEnabled,omitempty" tf:"token_store_enabled"`

	Twitter []AuthSettingsTwitterParameters `json:"twitter,omitempty" tf:"twitter"`

	UnauthenticatedClientAction *string `json:"unauthenticatedClientAction,omitempty" tf:"unauthenticated_client_action"`
}

type AppServiceSlotConnectionStringObservation struct {
}

type AppServiceSlotConnectionStringParameters struct {
	Name string `json:"name" tf:"name"`

	Type string `json:"type" tf:"type"`

	Value string `json:"value" tf:"value"`
}

type AppServiceSlotIdentityObservation struct {
	PrincipalID string `json:"principalId" tf:"principal_id"`

	TenantID string `json:"tenantId" tf:"tenant_id"`
}

type AppServiceSlotIdentityParameters struct {
	IdentityIds []string `json:"identityIds,omitempty" tf:"identity_ids"`

	Type string `json:"type" tf:"type"`
}

type AppServiceSlotLogsObservation struct {
}

type AppServiceSlotLogsParameters struct {
	ApplicationLogs []LogsApplicationLogsParameters `json:"applicationLogs,omitempty" tf:"application_logs"`

	DetailedErrorMessagesEnabled *bool `json:"detailedErrorMessagesEnabled,omitempty" tf:"detailed_error_messages_enabled"`

	FailedRequestTracingEnabled *bool `json:"failedRequestTracingEnabled,omitempty" tf:"failed_request_tracing_enabled"`

	HTTPLogs []LogsHTTPLogsParameters `json:"httpLogs,omitempty" tf:"http_logs"`
}

type AppServiceSlotObservation struct {
	DefaultSiteHostname string `json:"defaultSiteHostname" tf:"default_site_hostname"`

	SiteCredential []AppServiceSlotSiteCredentialObservation `json:"siteCredential" tf:"site_credential"`
}

type AppServiceSlotParameters struct {
	AppServiceName string `json:"appServiceName" tf:"app_service_name"`

	AppServicePlanID string `json:"appServicePlanId" tf:"app_service_plan_id"`

	AppSettings map[string]string `json:"appSettings,omitempty" tf:"app_settings"`

	AuthSettings []AppServiceSlotAuthSettingsParameters `json:"authSettings,omitempty" tf:"auth_settings"`

	ClientAffinityEnabled *bool `json:"clientAffinityEnabled,omitempty" tf:"client_affinity_enabled"`

	ConnectionString []AppServiceSlotConnectionStringParameters `json:"connectionString,omitempty" tf:"connection_string"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	HTTPSOnly *bool `json:"httpsOnly,omitempty" tf:"https_only"`

	Identity []AppServiceSlotIdentityParameters `json:"identity,omitempty" tf:"identity"`

	Location string `json:"location" tf:"location"`

	Logs []AppServiceSlotLogsParameters `json:"logs,omitempty" tf:"logs"`

	Name string `json:"name" tf:"name"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	SiteConfig []AppServiceSlotSiteConfigParameters `json:"siteConfig,omitempty" tf:"site_config"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`
}

type AppServiceSlotSiteConfigObservation struct {
}

type AppServiceSlotSiteConfigParameters struct {
	AcrUseManagedIdentityCredentials *bool `json:"acrUseManagedIdentityCredentials,omitempty" tf:"acr_use_managed_identity_credentials"`

	AcrUserManagedIdentityClientID *string `json:"acrUserManagedIdentityClientId,omitempty" tf:"acr_user_managed_identity_client_id"`

	AlwaysOn *bool `json:"alwaysOn,omitempty" tf:"always_on"`

	AppCommandLine *string `json:"appCommandLine,omitempty" tf:"app_command_line"`

	AutoSwapSlotName *string `json:"autoSwapSlotName,omitempty" tf:"auto_swap_slot_name"`

	Cors []SiteConfigCorsParameters `json:"cors,omitempty" tf:"cors"`

	DefaultDocuments []string `json:"defaultDocuments,omitempty" tf:"default_documents"`

	DotnetFrameworkVersion *string `json:"dotnetFrameworkVersion,omitempty" tf:"dotnet_framework_version"`

	FtpsState *string `json:"ftpsState,omitempty" tf:"ftps_state"`

	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path"`

	Http2Enabled *bool `json:"http2Enabled,omitempty" tf:"http2_enabled"`

	IPRestriction []SiteConfigIPRestrictionParameters `json:"ipRestriction,omitempty" tf:"ip_restriction"`

	JavaContainer *string `json:"javaContainer,omitempty" tf:"java_container"`

	JavaContainerVersion *string `json:"javaContainerVersion,omitempty" tf:"java_container_version"`

	JavaVersion *string `json:"javaVersion,omitempty" tf:"java_version"`

	LinuxFxVersion *string `json:"linuxFxVersion,omitempty" tf:"linux_fx_version"`

	LocalMysqlEnabled *bool `json:"localMysqlEnabled,omitempty" tf:"local_mysql_enabled"`

	ManagedPipelineMode *string `json:"managedPipelineMode,omitempty" tf:"managed_pipeline_mode"`

	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version"`

	NumberOfWorkers *int64 `json:"numberOfWorkers,omitempty" tf:"number_of_workers"`

	PhpVersion *string `json:"phpVersion,omitempty" tf:"php_version"`

	PythonVersion *string `json:"pythonVersion,omitempty" tf:"python_version"`

	RemoteDebuggingEnabled *bool `json:"remoteDebuggingEnabled,omitempty" tf:"remote_debugging_enabled"`

	RemoteDebuggingVersion *string `json:"remoteDebuggingVersion,omitempty" tf:"remote_debugging_version"`

	ScmIPRestriction []SiteConfigScmIPRestrictionParameters `json:"scmIpRestriction,omitempty" tf:"scm_ip_restriction"`

	ScmType *string `json:"scmType,omitempty" tf:"scm_type"`

	ScmUseMainIPRestriction *bool `json:"scmUseMainIpRestriction,omitempty" tf:"scm_use_main_ip_restriction"`

	Use32BitWorkerProcess *bool `json:"use32BitWorkerProcess,omitempty" tf:"use_32_bit_worker_process"`

	VnetRouteAllEnabled *bool `json:"vnetRouteAllEnabled,omitempty" tf:"vnet_route_all_enabled"`

	WebsocketsEnabled *bool `json:"websocketsEnabled,omitempty" tf:"websockets_enabled"`

	WindowsFxVersion *string `json:"windowsFxVersion,omitempty" tf:"windows_fx_version"`
}

type AppServiceSlotSiteCredentialObservation struct {
	Password string `json:"password" tf:"password"`

	Username string `json:"username" tf:"username"`
}

type AppServiceSlotSiteCredentialParameters struct {
}

type ApplicationLogsAzureBlobStorageObservation struct {
}

type ApplicationLogsAzureBlobStorageParameters struct {
	Level string `json:"level" tf:"level"`

	RetentionInDays int64 `json:"retentionInDays" tf:"retention_in_days"`

	SasURL string `json:"sasUrl" tf:"sas_url"`
}

type AuthSettingsActiveDirectoryObservation struct {
}

type AuthSettingsActiveDirectoryParameters struct {
	AllowedAudiences []string `json:"allowedAudiences,omitempty" tf:"allowed_audiences"`

	ClientID string `json:"clientId" tf:"client_id"`

	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret"`
}

type AuthSettingsFacebookObservation struct {
}

type AuthSettingsFacebookParameters struct {
	AppID string `json:"appId" tf:"app_id"`

	AppSecret string `json:"appSecret" tf:"app_secret"`

	OauthScopes []string `json:"oauthScopes,omitempty" tf:"oauth_scopes"`
}

type AuthSettingsGoogleObservation struct {
}

type AuthSettingsGoogleParameters struct {
	ClientID string `json:"clientId" tf:"client_id"`

	ClientSecret string `json:"clientSecret" tf:"client_secret"`

	OauthScopes []string `json:"oauthScopes,omitempty" tf:"oauth_scopes"`
}

type AuthSettingsMicrosoftObservation struct {
}

type AuthSettingsMicrosoftParameters struct {
	ClientID string `json:"clientId" tf:"client_id"`

	ClientSecret string `json:"clientSecret" tf:"client_secret"`

	OauthScopes []string `json:"oauthScopes,omitempty" tf:"oauth_scopes"`
}

type AuthSettingsTwitterObservation struct {
}

type AuthSettingsTwitterParameters struct {
	ConsumerKey string `json:"consumerKey" tf:"consumer_key"`

	ConsumerSecret string `json:"consumerSecret" tf:"consumer_secret"`
}

type HTTPLogsFileSystemObservation struct {
}

type HTTPLogsFileSystemParameters struct {
	RetentionInDays int64 `json:"retentionInDays" tf:"retention_in_days"`

	RetentionInMb int64 `json:"retentionInMb" tf:"retention_in_mb"`
}

type IPRestrictionHeadersObservation struct {
}

type IPRestrictionHeadersParameters struct {
	XAzureFdid []string `json:"xAzureFdid,omitempty" tf:"x_azure_fdid"`

	XFdHealthProbe []string `json:"xFdHealthProbe,omitempty" tf:"x_fd_health_probe"`

	XForwardedFor []string `json:"xForwardedFor,omitempty" tf:"x_forwarded_for"`

	XForwardedHost []string `json:"xForwardedHost,omitempty" tf:"x_forwarded_host"`
}

type LogsApplicationLogsObservation struct {
}

type LogsApplicationLogsParameters struct {
	AzureBlobStorage []ApplicationLogsAzureBlobStorageParameters `json:"azureBlobStorage,omitempty" tf:"azure_blob_storage"`

	FileSystemLevel *string `json:"fileSystemLevel,omitempty" tf:"file_system_level"`
}

type LogsHTTPLogsAzureBlobStorageObservation struct {
}

type LogsHTTPLogsAzureBlobStorageParameters struct {
	RetentionInDays int64 `json:"retentionInDays" tf:"retention_in_days"`

	SasURL string `json:"sasUrl" tf:"sas_url"`
}

type LogsHTTPLogsObservation struct {
}

type LogsHTTPLogsParameters struct {
	AzureBlobStorage []LogsHTTPLogsAzureBlobStorageParameters `json:"azureBlobStorage,omitempty" tf:"azure_blob_storage"`

	FileSystem []HTTPLogsFileSystemParameters `json:"fileSystem,omitempty" tf:"file_system"`
}

type SiteConfigCorsObservation struct {
}

type SiteConfigCorsParameters struct {
	AllowedOrigins []string `json:"allowedOrigins" tf:"allowed_origins"`

	SupportCredentials *bool `json:"supportCredentials,omitempty" tf:"support_credentials"`
}

type SiteConfigIPRestrictionObservation struct {
}

type SiteConfigIPRestrictionParameters struct {
	Action *string `json:"action,omitempty" tf:"action"`

	Headers []IPRestrictionHeadersParameters `json:"headers,omitempty" tf:"headers"`

	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`

	Name *string `json:"name,omitempty" tf:"name"`

	Priority *int64 `json:"priority,omitempty" tf:"priority"`

	ServiceTag *string `json:"serviceTag,omitempty" tf:"service_tag"`

	VirtualNetworkSubnetID *string `json:"virtualNetworkSubnetId,omitempty" tf:"virtual_network_subnet_id"`
}

type SiteConfigScmIPRestrictionHeadersObservation struct {
}

type SiteConfigScmIPRestrictionHeadersParameters struct {
	XAzureFdid []string `json:"xAzureFdid,omitempty" tf:"x_azure_fdid"`

	XFdHealthProbe []string `json:"xFdHealthProbe,omitempty" tf:"x_fd_health_probe"`

	XForwardedFor []string `json:"xForwardedFor,omitempty" tf:"x_forwarded_for"`

	XForwardedHost []string `json:"xForwardedHost,omitempty" tf:"x_forwarded_host"`
}

type SiteConfigScmIPRestrictionObservation struct {
}

type SiteConfigScmIPRestrictionParameters struct {
	Action *string `json:"action,omitempty" tf:"action"`

	Headers []SiteConfigScmIPRestrictionHeadersParameters `json:"headers,omitempty" tf:"headers"`

	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address"`

	Name *string `json:"name,omitempty" tf:"name"`

	Priority *int64 `json:"priority,omitempty" tf:"priority"`

	ServiceTag *string `json:"serviceTag,omitempty" tf:"service_tag"`

	VirtualNetworkSubnetID *string `json:"virtualNetworkSubnetId,omitempty" tf:"virtual_network_subnet_id"`
}

// AppServiceSlotSpec defines the desired state of AppServiceSlot
type AppServiceSlotSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppServiceSlotParameters `json:"forProvider"`
}

// AppServiceSlotStatus defines the observed state of AppServiceSlot.
type AppServiceSlotStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppServiceSlotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceSlot is the Schema for the AppServiceSlots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AppServiceSlot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppServiceSlotSpec   `json:"spec"`
	Status            AppServiceSlotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppServiceSlotList contains a list of AppServiceSlots
type AppServiceSlotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppServiceSlot `json:"items"`
}

// Repository type metadata.
var (
	AppServiceSlotKind             = "AppServiceSlot"
	AppServiceSlotGroupKind        = schema.GroupKind{Group: Group, Kind: AppServiceSlotKind}.String()
	AppServiceSlotKindAPIVersion   = AppServiceSlotKind + "." + GroupVersion.String()
	AppServiceSlotGroupVersionKind = GroupVersion.WithKind(AppServiceSlotKind)
)

func init() {
	SchemeBuilder.Register(&AppServiceSlot{}, &AppServiceSlotList{})
}
