/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApplicationPortsObservation struct {
}

type ApplicationPortsParameters struct {
	EndPort int64 `json:"endPort" tf:"end_port"`

	StartPort int64 `json:"startPort" tf:"start_port"`
}

type AzureActiveDirectoryObservation struct {
}

type AzureActiveDirectoryParameters struct {
	ClientApplicationID string `json:"clientApplicationId" tf:"client_application_id"`

	ClusterApplicationID string `json:"clusterApplicationId" tf:"cluster_application_id"`

	TenantID string `json:"tenantId" tf:"tenant_id"`
}

type CertificateCommonNamesObservation struct {
}

type CertificateCommonNamesParameters struct {
	CommonNames []CommonNamesParameters `json:"commonNames" tf:"common_names"`

	X509StoreName string `json:"x509StoreName" tf:"x509_store_name"`
}

type CertificateObservation struct {
}

type CertificateParameters struct {
	Thumbprint string `json:"thumbprint" tf:"thumbprint"`

	ThumbprintSecondary *string `json:"thumbprintSecondary,omitempty" tf:"thumbprint_secondary"`

	X509StoreName string `json:"x509StoreName" tf:"x509_store_name"`
}

type ClientCertificateCommonNameObservation struct {
}

type ClientCertificateCommonNameParameters struct {
	CommonName string `json:"commonName" tf:"common_name"`

	IsAdmin bool `json:"isAdmin" tf:"is_admin"`

	IssuerThumbprint *string `json:"issuerThumbprint,omitempty" tf:"issuer_thumbprint"`
}

type ClientCertificateThumbprintObservation struct {
}

type ClientCertificateThumbprintParameters struct {
	IsAdmin bool `json:"isAdmin" tf:"is_admin"`

	Thumbprint string `json:"thumbprint" tf:"thumbprint"`
}

type CommonNamesObservation struct {
}

type CommonNamesParameters struct {
	CertificateCommonName string `json:"certificateCommonName" tf:"certificate_common_name"`

	CertificateIssuerThumbprint *string `json:"certificateIssuerThumbprint,omitempty" tf:"certificate_issuer_thumbprint"`
}

type DeltaHealthPolicyObservation struct {
}

type DeltaHealthPolicyParameters struct {
	MaxDeltaUnhealthyApplicationsPercent *int64 `json:"maxDeltaUnhealthyApplicationsPercent,omitempty" tf:"max_delta_unhealthy_applications_percent"`

	MaxDeltaUnhealthyNodesPercent *int64 `json:"maxDeltaUnhealthyNodesPercent,omitempty" tf:"max_delta_unhealthy_nodes_percent"`

	MaxUpgradeDomainDeltaUnhealthyNodesPercent *int64 `json:"maxUpgradeDomainDeltaUnhealthyNodesPercent,omitempty" tf:"max_upgrade_domain_delta_unhealthy_nodes_percent"`
}

type DiagnosticsConfigObservation struct {
}

type DiagnosticsConfigParameters struct {
	BlobEndpoint string `json:"blobEndpoint" tf:"blob_endpoint"`

	ProtectedAccountKeyName string `json:"protectedAccountKeyName" tf:"protected_account_key_name"`

	QueueEndpoint string `json:"queueEndpoint" tf:"queue_endpoint"`

	StorageAccountName string `json:"storageAccountName" tf:"storage_account_name"`

	TableEndpoint string `json:"tableEndpoint" tf:"table_endpoint"`
}

type EphemeralPortsObservation struct {
}

type EphemeralPortsParameters struct {
	EndPort int64 `json:"endPort" tf:"end_port"`

	StartPort int64 `json:"startPort" tf:"start_port"`
}

type FabricSettingsObservation struct {
}

type FabricSettingsParameters struct {
	Name string `json:"name" tf:"name"`

	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters"`
}

type HealthPolicyObservation struct {
}

type HealthPolicyParameters struct {
	MaxUnhealthyApplicationsPercent *int64 `json:"maxUnhealthyApplicationsPercent,omitempty" tf:"max_unhealthy_applications_percent"`

	MaxUnhealthyNodesPercent *int64 `json:"maxUnhealthyNodesPercent,omitempty" tf:"max_unhealthy_nodes_percent"`
}

type NodeTypeObservation struct {
}

type NodeTypeParameters struct {
	ApplicationPorts []ApplicationPortsParameters `json:"applicationPorts,omitempty" tf:"application_ports"`

	Capacities map[string]string `json:"capacities,omitempty" tf:"capacities"`

	ClientEndpointPort int64 `json:"clientEndpointPort" tf:"client_endpoint_port"`

	DurabilityLevel *string `json:"durabilityLevel,omitempty" tf:"durability_level"`

	EphemeralPorts []EphemeralPortsParameters `json:"ephemeralPorts,omitempty" tf:"ephemeral_ports"`

	HTTPEndpointPort int64 `json:"httpEndpointPort" tf:"http_endpoint_port"`

	InstanceCount int64 `json:"instanceCount" tf:"instance_count"`

	IsPrimary bool `json:"isPrimary" tf:"is_primary"`

	Name string `json:"name" tf:"name"`

	PlacementProperties map[string]string `json:"placementProperties,omitempty" tf:"placement_properties"`

	ReverseProxyEndpointPort *int64 `json:"reverseProxyEndpointPort,omitempty" tf:"reverse_proxy_endpoint_port"`
}

type ReverseProxyCertificateCommonNamesCommonNamesObservation struct {
}

type ReverseProxyCertificateCommonNamesCommonNamesParameters struct {
	CertificateCommonName string `json:"certificateCommonName" tf:"certificate_common_name"`

	CertificateIssuerThumbprint *string `json:"certificateIssuerThumbprint,omitempty" tf:"certificate_issuer_thumbprint"`
}

type ReverseProxyCertificateCommonNamesObservation struct {
}

type ReverseProxyCertificateCommonNamesParameters struct {
	CommonNames []ReverseProxyCertificateCommonNamesCommonNamesParameters `json:"commonNames" tf:"common_names"`

	X509StoreName string `json:"x509StoreName" tf:"x509_store_name"`
}

type ReverseProxyCertificateObservation struct {
}

type ReverseProxyCertificateParameters struct {
	Thumbprint string `json:"thumbprint" tf:"thumbprint"`

	ThumbprintSecondary *string `json:"thumbprintSecondary,omitempty" tf:"thumbprint_secondary"`

	X509StoreName string `json:"x509StoreName" tf:"x509_store_name"`
}

type ServiceFabricClusterObservation struct {
	ClusterEndpoint string `json:"clusterEndpoint" tf:"cluster_endpoint"`
}

type ServiceFabricClusterParameters struct {
	AddOnFeatures []string `json:"addOnFeatures,omitempty" tf:"add_on_features"`

	AzureActiveDirectory []AzureActiveDirectoryParameters `json:"azureActiveDirectory,omitempty" tf:"azure_active_directory"`

	Certificate []CertificateParameters `json:"certificate,omitempty" tf:"certificate"`

	CertificateCommonNames []CertificateCommonNamesParameters `json:"certificateCommonNames,omitempty" tf:"certificate_common_names"`

	ClientCertificateCommonName []ClientCertificateCommonNameParameters `json:"clientCertificateCommonName,omitempty" tf:"client_certificate_common_name"`

	ClientCertificateThumbprint []ClientCertificateThumbprintParameters `json:"clientCertificateThumbprint,omitempty" tf:"client_certificate_thumbprint"`

	ClusterCodeVersion *string `json:"clusterCodeVersion,omitempty" tf:"cluster_code_version"`

	DiagnosticsConfig []DiagnosticsConfigParameters `json:"diagnosticsConfig,omitempty" tf:"diagnostics_config"`

	FabricSettings []FabricSettingsParameters `json:"fabricSettings,omitempty" tf:"fabric_settings"`

	Location string `json:"location" tf:"location"`

	ManagementEndpoint string `json:"managementEndpoint" tf:"management_endpoint"`

	Name string `json:"name" tf:"name"`

	NodeType []NodeTypeParameters `json:"nodeType" tf:"node_type"`

	ReliabilityLevel string `json:"reliabilityLevel" tf:"reliability_level"`

	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name"`

	ReverseProxyCertificate []ReverseProxyCertificateParameters `json:"reverseProxyCertificate,omitempty" tf:"reverse_proxy_certificate"`

	ReverseProxyCertificateCommonNames []ReverseProxyCertificateCommonNamesParameters `json:"reverseProxyCertificateCommonNames,omitempty" tf:"reverse_proxy_certificate_common_names"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	UpgradeMode string `json:"upgradeMode" tf:"upgrade_mode"`

	UpgradePolicy []UpgradePolicyParameters `json:"upgradePolicy,omitempty" tf:"upgrade_policy"`

	VMImage string `json:"vmImage" tf:"vm_image"`
}

type UpgradePolicyObservation struct {
}

type UpgradePolicyParameters struct {
	DeltaHealthPolicy []DeltaHealthPolicyParameters `json:"deltaHealthPolicy,omitempty" tf:"delta_health_policy"`

	ForceRestartEnabled *bool `json:"forceRestartEnabled,omitempty" tf:"force_restart_enabled"`

	HealthCheckRetryTimeout *string `json:"healthCheckRetryTimeout,omitempty" tf:"health_check_retry_timeout"`

	HealthCheckStableDuration *string `json:"healthCheckStableDuration,omitempty" tf:"health_check_stable_duration"`

	HealthCheckWaitDuration *string `json:"healthCheckWaitDuration,omitempty" tf:"health_check_wait_duration"`

	HealthPolicy []HealthPolicyParameters `json:"healthPolicy,omitempty" tf:"health_policy"`

	UpgradeDomainTimeout *string `json:"upgradeDomainTimeout,omitempty" tf:"upgrade_domain_timeout"`

	UpgradeReplicaSetCheckTimeout *string `json:"upgradeReplicaSetCheckTimeout,omitempty" tf:"upgrade_replica_set_check_timeout"`

	UpgradeTimeout *string `json:"upgradeTimeout,omitempty" tf:"upgrade_timeout"`
}

// ServiceFabricClusterSpec defines the desired state of ServiceFabricCluster
type ServiceFabricClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServiceFabricClusterParameters `json:"forProvider"`
}

// ServiceFabricClusterStatus defines the observed state of ServiceFabricCluster.
type ServiceFabricClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServiceFabricClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceFabricCluster is the Schema for the ServiceFabricClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ServiceFabricCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceFabricClusterSpec   `json:"spec"`
	Status            ServiceFabricClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceFabricClusterList contains a list of ServiceFabricClusters
type ServiceFabricClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceFabricCluster `json:"items"`
}

// Repository type metadata.
var (
	ServiceFabricClusterKind             = "ServiceFabricCluster"
	ServiceFabricClusterGroupKind        = schema.GroupKind{Group: Group, Kind: ServiceFabricClusterKind}.String()
	ServiceFabricClusterKindAPIVersion   = ServiceFabricClusterKind + "." + GroupVersion.String()
	ServiceFabricClusterGroupVersionKind = GroupVersion.WithKind(ServiceFabricClusterKind)
)

func init() {
	SchemeBuilder.Register(&ServiceFabricCluster{}, &ServiceFabricClusterList{})
}
